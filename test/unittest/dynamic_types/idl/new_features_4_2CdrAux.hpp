// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file new_features_4_2CdrAux.hpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_NEW_FEATURES_4_2CDRAUX_HPP_
#define _FAST_DDS_GENERATED_NEW_FEATURES_4_2CDRAUX_HPP_

#include "new_features_4_2.h"



            constexpr uint32_t bitmodule_BM2_max_cdr_typesize {28UL};
            constexpr uint32_t bitmodule_BM2_max_key_cdr_typesize {0UL};

            constexpr uint32_t NewAliases_max_cdr_typesize {40UL};
            constexpr uint32_t NewAliases_max_key_cdr_typesize {0UL};


            constexpr uint32_t StructTest_max_cdr_typesize {92UL};
            constexpr uint32_t StructTest_max_key_cdr_typesize {0UL};




            constexpr uint32_t bitmodule_BitsetBitmask_max_cdr_typesize {21UL};
            constexpr uint32_t bitmodule_BitsetBitmask_max_key_cdr_typesize {0UL};

namespace eprosima {
namespace fastcdr {

class Cdr;
class CdrSizeCalculator;

size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const NewAliases& data,
        size_t current_alignment);
void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const NewAliases& data);

void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        NewAliases& data);

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const NewAliases& data);

size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const WCharUnion& data,
        size_t current_alignment);

void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const WCharUnion& data);

void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        WCharUnion& data);
size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const OctetUnion& data,
        size_t current_alignment);

void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const OctetUnion& data);

void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        OctetUnion& data);
size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const Int8Union& data,
        size_t current_alignment);

void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const Int8Union& data);

void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        Int8Union& data);
size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const bitmodule::ParentBitset& ,
        size_t current_alignment);
void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const bitmodule::ParentBitset& data);

void deserialize(
        eprosima::fastcdr::Cdr& dcdr,
        bitmodule::ParentBitset& data);
size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const bitmodule::MyBitset& data,
        size_t current_alignment);
void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const bitmodule::MyBitset& data);

void deserialize(
        eprosima::fastcdr::Cdr& dcdr,
        bitmodule::MyBitset& data);

size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const bitmodule::BitsetBitmask& data,
        size_t current_alignment);
void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const bitmodule::BitsetBitmask& data);

void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        bitmodule::BitsetBitmask& data);

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const bitmodule::BitsetBitmask& data);

size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const bitmodule::BM2& data,
        size_t current_alignment);
void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const bitmodule::BM2& data);

void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        bitmodule::BM2& data);

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const bitmodule::BM2& data);


size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const StructTest& data,
        size_t current_alignment);
void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const StructTest& data);

void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        StructTest& data);

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const StructTest& data);


} // namespace fastcdr
} // namespace eprosima

#endif // _FAST_DDS_GENERATED_NEW_FEATURES_4_2CDRAUX_HPP_