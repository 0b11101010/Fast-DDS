// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TestCdrAux.hpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_TESTCDRAUX_HPP_
#define _FAST_DDS_GENERATED_TESTCDRAUX_HPP_

#include "Test.h"

            constexpr uint32_t KeyedStruct_max_cdr_typesize {1372UL};
            constexpr uint32_t KeyedStruct_max_key_cdr_typesize {1UL};




            constexpr uint32_t BasicStruct_max_cdr_typesize {1364UL};
            constexpr uint32_t BasicStruct_max_key_cdr_typesize {0UL};


            constexpr uint32_t ComplexStruct_max_cdr_typesize {69481704UL};
            constexpr uint32_t ComplexStruct_max_key_cdr_typesize {0UL};



            constexpr uint32_t CompleteStruct_max_cdr_typesize {69481976UL};
            constexpr uint32_t CompleteStruct_max_key_cdr_typesize {0UL};






namespace eprosima {
namespace fastcdr {

class Cdr;
class CdrSizeCalculator;





size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const BasicStruct& data,
        size_t current_alignment);
void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const BasicStruct& data);

void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        BasicStruct& data);

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const BasicStruct& data);






size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const ComplexStruct& data,
        size_t current_alignment);
void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const ComplexStruct& data);

void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        ComplexStruct& data);

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const ComplexStruct& data);

size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const MyUnion& data,
        size_t current_alignment);

void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const MyUnion& data);

void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        MyUnion& data);
size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const MyUnion2& data,
        size_t current_alignment);

void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const MyUnion2& data);

void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        MyUnion2& data);
size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const CompleteStruct& data,
        size_t current_alignment);
void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const CompleteStruct& data);

void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        CompleteStruct& data);

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const CompleteStruct& data);

size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const KeyedStruct& data,
        size_t current_alignment);
void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const KeyedStruct& data);

void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        KeyedStruct& data);

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const KeyedStruct& data);


} // namespace fastcdr
} // namespace eprosima

#endif // _FAST_DDS_GENERATED_TESTCDRAUX_HPP_