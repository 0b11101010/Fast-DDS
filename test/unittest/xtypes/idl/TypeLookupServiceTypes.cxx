// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TypeLookupServiceTypes.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "TypeLookupServiceTypes.h"
#include "TypeLookupServiceTypesTypeObject.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define AnotherBasicStruct_max_cdr_typesize 4ULL;
#define BasicStruct_max_cdr_typesize 104ULL;
#define InheritanceStruct_max_cdr_typesize 106ULL;
#define AnotherInheritanceStruct_max_cdr_typesize 66512ULL;
#define StructStruct_max_cdr_typesize 106ULL;

#define AnotherBasicStruct_max_key_cdr_typesize 0ULL;
#define BasicStruct_max_key_cdr_typesize 0ULL;
#define InheritanceStruct_max_key_cdr_typesize 0ULL;
#define AnotherInheritanceStruct_max_key_cdr_typesize 0ULL;
#define StructStruct_max_key_cdr_typesize 0ULL;


BasicStruct::BasicStruct()
{
    // sequence<char> m_message


    // Just to register all known types
    registerTypeLookupServiceTypesTypes();
}

BasicStruct::~BasicStruct()
{
}

BasicStruct::BasicStruct(
        const BasicStruct& x)
{
    m_message = x.m_message;
}

BasicStruct::BasicStruct(
        BasicStruct&& x) noexcept 
{
    m_message = std::move(x.m_message);
}

BasicStruct& BasicStruct::operator =(
        const BasicStruct& x)
{

    m_message = x.m_message;

    return *this;
}

BasicStruct& BasicStruct::operator =(
        BasicStruct&& x) noexcept
{

    m_message = std::move(x.m_message);

    return *this;
}

bool BasicStruct::operator ==(
        const BasicStruct& x) const
{

    return (m_message == x.m_message);
}

bool BasicStruct::operator !=(
        const BasicStruct& x) const
{
    return !(*this == x);
}

size_t BasicStruct::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return BasicStruct_max_cdr_typesize;
}

size_t BasicStruct::getCdrSerializedSize(
        const BasicStruct& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.message().size() > 0)
    {
        current_alignment += (data.message().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }



    return current_alignment - initial_alignment;
}

void BasicStruct::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_message;
}

void BasicStruct::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_message;}

/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void BasicStruct::message(
        const std::vector<char>& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void BasicStruct::message(
        std::vector<char>&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::vector<char>& BasicStruct::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::vector<char>& BasicStruct::message()
{
    return m_message;
}


size_t BasicStruct::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return BasicStruct_max_key_cdr_typesize;
}

bool BasicStruct::isKeyDefined()
{
    return false;
}

void BasicStruct::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

StructStruct::StructStruct()
{
    // BasicStruct m_basic

    // unsigned short m_index
    m_index = 0;

    // Just to register all known types
    registerTypeLookupServiceTypesTypes();
}

StructStruct::~StructStruct()
{


}

StructStruct::StructStruct(
        const StructStruct& x)
{
    m_basic = x.m_basic;
    m_index = x.m_index;
}

StructStruct::StructStruct(
        StructStruct&& x) noexcept 
{
    m_basic = std::move(x.m_basic);
    m_index = x.m_index;
}

StructStruct& StructStruct::operator =(
        const StructStruct& x)
{

    m_basic = x.m_basic;
    m_index = x.m_index;

    return *this;
}

StructStruct& StructStruct::operator =(
        StructStruct&& x) noexcept
{

    m_basic = std::move(x.m_basic);
    m_index = x.m_index;

    return *this;
}

bool StructStruct::operator ==(
        const StructStruct& x) const
{

    return (m_basic == x.m_basic && m_index == x.m_index);
}

bool StructStruct::operator !=(
        const StructStruct& x) const
{
    return !(*this == x);
}

size_t StructStruct::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return StructStruct_max_cdr_typesize;
}

size_t StructStruct::getCdrSerializedSize(
        const StructStruct& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += BasicStruct::getCdrSerializedSize(data.basic(), current_alignment);
    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);



    return current_alignment - initial_alignment;
}

void StructStruct::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_basic;
    scdr << m_index;

}

void StructStruct::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_basic;
    dcdr >> m_index;
}

/*!
 * @brief This function copies the value in member basic
 * @param _basic New value to be copied in member basic
 */
void StructStruct::basic(
        const BasicStruct& _basic)
{
    m_basic = _basic;
}

/*!
 * @brief This function moves the value in member basic
 * @param _basic New value to be moved in member basic
 */
void StructStruct::basic(
        BasicStruct&& _basic)
{
    m_basic = std::move(_basic);
}

/*!
 * @brief This function returns a constant reference to member basic
 * @return Constant reference to member basic
 */
const BasicStruct& StructStruct::basic() const
{
    return m_basic;
}

/*!
 * @brief This function returns a reference to member basic
 * @return Reference to member basic
 */
BasicStruct& StructStruct::basic()
{
    return m_basic;
}
/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void StructStruct::index(
        uint16_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint16_t StructStruct::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint16_t& StructStruct::index()
{
    return m_index;
}



size_t StructStruct::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return StructStruct_max_key_cdr_typesize;
}

bool StructStruct::isKeyDefined()
{
    return false;
}

void StructStruct::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

InheritanceStruct::InheritanceStruct()    : BasicStruct() 
{
    // unsigned short m_another_index
    m_another_index = 0;

    // Just to register all known types
    registerTypeLookupServiceTypesTypes();
}

InheritanceStruct::~InheritanceStruct()
{
}

InheritanceStruct::InheritanceStruct(
        const InheritanceStruct& x)    : BasicStruct(x) 
{
    m_another_index = x.m_another_index;
}

InheritanceStruct::InheritanceStruct(
        InheritanceStruct&& x) noexcept     : BasicStruct(std::move(x)) 
{
    m_another_index = x.m_another_index;
}

InheritanceStruct& InheritanceStruct::operator =(
        const InheritanceStruct& x)
{
    BasicStruct::operator =(x); 

    m_another_index = x.m_another_index;

    return *this;
}

InheritanceStruct& InheritanceStruct::operator =(
        InheritanceStruct&& x) noexcept
{
    BasicStruct::operator =(std::move(x)); 

    m_another_index = x.m_another_index;

    return *this;
}

bool InheritanceStruct::operator ==(
        const InheritanceStruct& x) const
{
     if (BasicStruct::operator !=(x)) return false; 

    return (m_another_index == x.m_another_index);
}

bool InheritanceStruct::operator !=(
        const InheritanceStruct& x) const
{
    return !(*this == x);
}

size_t InheritanceStruct::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return InheritanceStruct_max_cdr_typesize;
}

size_t InheritanceStruct::getCdrSerializedSize(
        const InheritanceStruct& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += BasicStruct::getCdrSerializedSize(data, current_alignment); 

    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    return current_alignment - initial_alignment;
}

void InheritanceStruct::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    BasicStruct::serialize(scdr); 

    scdr << m_another_index;

}

void InheritanceStruct::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    BasicStruct::deserialize(dcdr); 

    dcdr >> m_another_index;
}

/*!
 * @brief This function sets a value in member another_index
 * @param _another_index New value for member another_index
 */
void InheritanceStruct::another_index(
        uint16_t _another_index)
{
    m_another_index = _another_index;
}

/*!
 * @brief This function returns the value of member another_index
 * @return Value of member another_index
 */
uint16_t InheritanceStruct::another_index() const
{
    return m_another_index;
}

/*!
 * @brief This function returns a reference to member another_index
 * @return Reference to member another_index
 */
uint16_t& InheritanceStruct::another_index()
{
    return m_another_index;
}



size_t InheritanceStruct::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return InheritanceStruct_max_key_cdr_typesize;
}

bool InheritanceStruct::isKeyDefined()
{
    if (BasicStruct::isKeyDefined())
        return true;
     return false;
}

void InheritanceStruct::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
 BasicStruct::serializeKey(scdr);  
}

AnotherBasicStruct::AnotherBasicStruct()
{
    // long m_number
    m_number = 0;

    // Just to register all known types
    registerTypeLookupServiceTypesTypes();
}

AnotherBasicStruct::~AnotherBasicStruct()
{
}

AnotherBasicStruct::AnotherBasicStruct(
        const AnotherBasicStruct& x)
{
    m_number = x.m_number;
}

AnotherBasicStruct::AnotherBasicStruct(
        AnotherBasicStruct&& x) noexcept 
{
    m_number = x.m_number;
}

AnotherBasicStruct& AnotherBasicStruct::operator =(
        const AnotherBasicStruct& x)
{

    m_number = x.m_number;

    return *this;
}

AnotherBasicStruct& AnotherBasicStruct::operator =(
        AnotherBasicStruct&& x) noexcept
{

    m_number = x.m_number;

    return *this;
}

bool AnotherBasicStruct::operator ==(
        const AnotherBasicStruct& x) const
{

    return (m_number == x.m_number);
}

bool AnotherBasicStruct::operator !=(
        const AnotherBasicStruct& x) const
{
    return !(*this == x);
}

size_t AnotherBasicStruct::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return AnotherBasicStruct_max_cdr_typesize;
}

size_t AnotherBasicStruct::getCdrSerializedSize(
        const AnotherBasicStruct& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

void AnotherBasicStruct::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_number;

}

void AnotherBasicStruct::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_number;
}

/*!
 * @brief This function sets a value in member number
 * @param _number New value for member number
 */
void AnotherBasicStruct::number(
        int32_t _number)
{
    m_number = _number;
}

/*!
 * @brief This function returns the value of member number
 * @return Value of member number
 */
int32_t AnotherBasicStruct::number() const
{
    return m_number;
}

/*!
 * @brief This function returns a reference to member number
 * @return Reference to member number
 */
int32_t& AnotherBasicStruct::number()
{
    return m_number;
}



size_t AnotherBasicStruct::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return AnotherBasicStruct_max_key_cdr_typesize;
}

bool AnotherBasicStruct::isKeyDefined()
{
    return false;
}

void AnotherBasicStruct::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


AnotherInheritanceStruct::AnotherInheritanceStruct()    : StructStruct() 
{
    // map<string, complex_sequence> m_complex_map


    // Just to register all known types
    registerTypeLookupServiceTypesTypes();
}

AnotherInheritanceStruct::~AnotherInheritanceStruct()
{
}

AnotherInheritanceStruct::AnotherInheritanceStruct(
        const AnotherInheritanceStruct& x)    : StructStruct(x) 
{
    m_complex_map = x.m_complex_map;
}

AnotherInheritanceStruct::AnotherInheritanceStruct(
        AnotherInheritanceStruct&& x) noexcept     : StructStruct(std::move(x)) 
{
    m_complex_map = std::move(x.m_complex_map);
}

AnotherInheritanceStruct& AnotherInheritanceStruct::operator =(
        const AnotherInheritanceStruct& x)
{
    StructStruct::operator =(x); 

    m_complex_map = x.m_complex_map;

    return *this;
}

AnotherInheritanceStruct& AnotherInheritanceStruct::operator =(
        AnotherInheritanceStruct&& x) noexcept
{
    StructStruct::operator =(std::move(x)); 

    m_complex_map = std::move(x.m_complex_map);

    return *this;
}

bool AnotherInheritanceStruct::operator ==(
        const AnotherInheritanceStruct& x) const
{
     if (StructStruct::operator !=(x)) return false; 

    return (m_complex_map == x.m_complex_map);
}

bool AnotherInheritanceStruct::operator !=(
        const AnotherInheritanceStruct& x) const
{
    return !(*this == x);
}

size_t AnotherInheritanceStruct::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return AnotherInheritanceStruct_max_cdr_typesize;
}

size_t AnotherInheritanceStruct::getCdrSerializedSize(
        const AnotherInheritanceStruct& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += StructStruct::getCdrSerializedSize(data, current_alignment); 

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.complex_map())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


            for(size_t b = 0; b < a.second.size(); ++b)
            {
                current_alignment += AnotherBasicStruct::getCdrSerializedSize(a.second.at(b), current_alignment);}
    }

    return current_alignment - initial_alignment;
}

void AnotherInheritanceStruct::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    StructStruct::serialize(scdr); 

    scdr << m_complex_map;
}

void AnotherInheritanceStruct::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    StructStruct::deserialize(dcdr); 

    dcdr >> m_complex_map;}

/*!
 * @brief This function copies the value in member complex_map
 * @param _complex_map New value to be copied in member complex_map
 */
void AnotherInheritanceStruct::complex_map(
        const std::map<std::string, complex_sequence>& _complex_map)
{
    m_complex_map = _complex_map;
}

/*!
 * @brief This function moves the value in member complex_map
 * @param _complex_map New value to be moved in member complex_map
 */
void AnotherInheritanceStruct::complex_map(
        std::map<std::string, complex_sequence>&& _complex_map)
{
    m_complex_map = std::move(_complex_map);
}

/*!
 * @brief This function returns a constant reference to member complex_map
 * @return Constant reference to member complex_map
 */
const std::map<std::string, complex_sequence>& AnotherInheritanceStruct::complex_map() const
{
    return m_complex_map;
}

/*!
 * @brief This function returns a reference to member complex_map
 * @return Reference to member complex_map
 */
std::map<std::string, complex_sequence>& AnotherInheritanceStruct::complex_map()
{
    return m_complex_map;
}


size_t AnotherInheritanceStruct::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return AnotherInheritanceStruct_max_key_cdr_typesize;
}

bool AnotherInheritanceStruct::isKeyDefined()
{
    if (StructStruct::isKeyDefined())
        return true;
     return false;
}

void AnotherInheritanceStruct::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
 StructStruct::serializeKey(scdr);  
}
