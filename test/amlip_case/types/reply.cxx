// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file reply.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "reply.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

Reply::Reply()    : Request() 
{
    // m_server_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@282003e1
    m_server_id = 0;

}

Reply::~Reply()
{
}

Reply::Reply(
        const Reply& x)    : Request(x) 
{
    m_server_id = x.m_server_id;
}

Reply::Reply(
        Reply&& x)    : Request(std::move(x)) 
{
    m_server_id = x.m_server_id;
}

Reply& Reply::operator =(
        const Reply& x)
{
    Request::operator =(x); 

    m_server_id = x.m_server_id;

    return *this;
}

Reply& Reply::operator =(
        Reply&& x)
{
    Request::operator =(std::move(x)); 

    m_server_id = x.m_server_id;

    return *this;
}

bool Reply::operator ==(
        const Reply& x) const
{
     if (Request::operator !=(x)) return false; 

    return (m_server_id == x.m_server_id);
}

bool Reply::operator !=(
        const Reply& x) const
{
    return !(*this == x);
}

size_t Reply::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += Request::getMaxCdrSerializedSize(current_alignment); 

    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    return current_alignment - initial_alignment;
}

size_t Reply::getCdrSerializedSize(
        const Reply& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += Request::getCdrSerializedSize(data, current_alignment); 

    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    return current_alignment - initial_alignment;
}

void Reply::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    Request::serialize(scdr); 

    scdr << m_server_id;

}

void Reply::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    Request::deserialize(dcdr); 

    dcdr >> m_server_id;
}

/*!
 * @brief This function sets a value in member server_id
 * @param _server_id New value for member server_id
 */
void Reply::server_id(
        uint16_t _server_id)
{
    m_server_id = _server_id;
}

/*!
 * @brief This function returns the value of member server_id
 * @return Value of member server_id
 */
uint16_t Reply::server_id() const
{
    return m_server_id;
}

/*!
 * @brief This function returns a reference to member server_id
 * @return Reference to member server_id
 */
uint16_t& Reply::server_id()
{
    return m_server_id;
}


size_t Reply::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;

    current_align += Request::getKeyMaxCdrSerializedSize(current_align); 


    return current_align;
}

bool Reply::isKeyDefined()
{
    if (Request::isKeyDefined())
        return true;
     return false;
}

void Reply::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
    Request::serializeKey(scdr); 
     
}
