// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file request.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "request.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

Request::Request()
{
    // m_task_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6b0c2d26
    m_task_id = 0;
    // m_client_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3d3fcdb0
    m_client_id = 0;

}

Request::~Request()
{


}

Request::Request(
        const Request& x)
{
    m_task_id = x.m_task_id;
    m_client_id = x.m_client_id;
}

Request::Request(
        Request&& x)
{
    m_task_id = x.m_task_id;
    m_client_id = x.m_client_id;
}

Request& Request::operator =(
        const Request& x)
{

    m_task_id = x.m_task_id;
    m_client_id = x.m_client_id;

    return *this;
}

Request& Request::operator =(
        Request&& x)
{

    m_task_id = x.m_task_id;
    m_client_id = x.m_client_id;

    return *this;
}

bool Request::operator ==(
        const Request& x) const
{

    return (m_task_id == x.m_task_id && m_client_id == x.m_client_id);
}

bool Request::operator !=(
        const Request& x) const
{
    return !(*this == x);
}

size_t Request::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);



    return current_alignment - initial_alignment;
}

size_t Request::getCdrSerializedSize(
        const Request& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);



    return current_alignment - initial_alignment;
}

void Request::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_task_id;
    scdr << m_client_id;

}

void Request::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_task_id;
    dcdr >> m_client_id;
}

/*!
 * @brief This function sets a value in member task_id
 * @param _task_id New value for member task_id
 */
void Request::task_id(
        uint16_t _task_id)
{
    m_task_id = _task_id;
}

/*!
 * @brief This function returns the value of member task_id
 * @return Value of member task_id
 */
uint16_t Request::task_id() const
{
    return m_task_id;
}

/*!
 * @brief This function returns a reference to member task_id
 * @return Reference to member task_id
 */
uint16_t& Request::task_id()
{
    return m_task_id;
}

/*!
 * @brief This function sets a value in member client_id
 * @param _client_id New value for member client_id
 */
void Request::client_id(
        uint16_t _client_id)
{
    m_client_id = _client_id;
}

/*!
 * @brief This function returns the value of member client_id
 * @return Value of member client_id
 */
uint16_t Request::client_id() const
{
    return m_client_id;
}

/*!
 * @brief This function returns a reference to member client_id
 * @return Reference to member client_id
 */
uint16_t& Request::client_id()
{
    return m_client_id;
}


size_t Request::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool Request::isKeyDefined()
{
    return false;
}

void Request::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}
