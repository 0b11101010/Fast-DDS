// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file calculatorServer.hpp
 * Server implementation for interfaces
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__CALCULATOR_SERVER_HPP
#define FAST_DDS_GENERATED__CALCULATOR_SERVER_HPP

#include <memory>

#include <fastdds/dds/domain/DomainParticipant.hpp>
#include <fastdds/dds/domain/qos/ReplierQos.hpp>
#include <fastdds/rtps/common/Guid.hpp>
#include <fastdds/rtps/common/LocatorList.hpp>

#include "calculator.hpp"

namespace calculator_example {

/**
 * @brief This class represents the server for the Calculator interface.
 */
struct CalculatorServer
{
    struct ClientContext
    {
        virtual ~ClientContext() = default;

        virtual const eprosima::fastdds::rtps::GUID_t& get_client_id() const = 0;

        virtual const eprosima::fastdds::rtps::LocatorList& get_client_locators() const = 0;
    };

    virtual ~CalculatorServer() = default;

    /**
     * @brief Run the server.
     *
     * This method starts the server and begins processing requests.
     * The method will block until the server is stopped.
     */
    virtual void run() = 0;

    /**
     * @brief Stop the server.
     *
     * This method stops the server and releases all resources.
     * It will cancel all pending requests, and wait for all processing threads to finish before returning.
     */
    virtual void stop() = 0;
};

extern CALCULATOR_DllAPI std::shared_ptr<CalculatorServer> create_CalculatorServer(
        eprosima::fastdds::dds::DomainParticipant& part,
        const char* service_name,
        const eprosima::fastdds::dds::ReplierQos& qos,
        size_t thread_pool_size);

} // namespace calculator_example


#endif  // FAST_DDS_GENERATED__CALCULATOR_CLIENT_HPP
