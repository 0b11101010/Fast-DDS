// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file calculatorServer.cxx
 * Server implementation for interfaces
 *
 * This file was generated by the tool fastddsgen.
 */

#include "calculatorServer.hpp"

#include <memory>
#include <stdexcept>
#include <string>

#include <fastdds/dds/domain/DomainParticipant.hpp>
#include <fastdds/dds/domain/qos/ReplierQos.hpp>
#include <fastdds/dds/rpc/exceptions.hpp>
#include <fastdds/dds/rpc/interfaces.hpp>
#include <fastdds/dds/rpc/RequestInfo.hpp>
#include <fastdds/dds/rpc/Replier.hpp>
#include <fastdds/dds/rpc/Service.hpp>
#include <fastdds/dds/rpc/ServiceTypeSupport.hpp>

#include "calculator.hpp"
#include "calculator_details.hpp"
#include "calculatorPubSubTypes.hpp"

namespace calculator_example {

//{ interface Calculator

namespace detail {

namespace fdds = eprosima::fastdds::dds;
namespace frpc = eprosima::fastdds::dds::rpc;
namespace frtps = eprosima::fastdds::rtps;

class CalculatorServerLogic
    : public CalculatorServer
{

public:

    CalculatorServerLogic(
            eprosima::fastdds::dds::DomainParticipant& part,
            const char* service_name,
            const eprosima::fastdds::dds::ReplierQos& qos,
            size_t thread_pool_size)
        : CalculatorServer()
        , participant_(part)
    {
        // Register the service type support
        auto service_type = create_Calculator_service_type_support();
        auto ret = service_type.register_service_type(&participant_, "calculator_example::Calculator");
        if (ret != fdds::RETCODE_OK)
        {
            throw std::runtime_error("Error registering service type");
        }

        // Create the service
        service_ = participant_.create_service(service_name, "calculator_example::Calculator");
        if (nullptr == service_)
        {
            throw std::runtime_error("Error creating service");
        }

        // Create the replier
        replier_ = participant_.create_service_replier(service_, qos);
        if (nullptr == replier_)
        {
            throw std::runtime_error("Error creating requester");
        }

        // TODO: Create thread pool
        static_cast<void>(thread_pool_size);
    }

    ~CalculatorServerLogic() override
    {
        if (nullptr != replier_)
        {
            participant_.delete_service_replier(service_->get_service_name(), replier_);
        }
        if (nullptr != service_)
        {
            participant_.delete_service(service_);
        }
    }

    void run() override
    {
    }

    void stop() override
    {
    }

private:

    fdds::DomainParticipant& participant_;
    frpc::Service* service_ = nullptr;
    frpc::Replier* replier_ = nullptr;

    void representation_limits(
            const CalculatorServer::ClientContext& info,
            /* out */ int32_t& min_value,
            /* out */ int32_t& max_value);

    int32_t addition(
            const CalculatorServer::ClientContext& info,
            /* in */ int32_t value1,
            /* in */ int32_t value2);

    int32_t CalculatorServerLogic::subtraction(
            const CalculatorServer::ClientContext& info,
            /* in */ int32_t value1,
            /* in */ int32_t value2);

    void CalculatorServerLogic::fibonacci_seq(
            const CalculatorServer::ClientContext& info,
            /* in */ uint32_t n_results,
            /* result */ frpc::RpcServerWriter<int32_t>& result_writer);

    int32_t CalculatorServerLogic::sum_all(
            const CalculatorServer::ClientContext& info,
            /* in */ frpc::RpcServerReader<int32_t>& value);

    void CalculatorServerLogic::accumulator(
            const CalculatorServer::ClientContext& info,
            /* in */ frpc::RpcServerReader<int32_t>& value,
            /* result */ frpc::RpcServerWriter<int32_t>& result_writer);

    void CalculatorServerLogic::vector_addition(
            const CalculatorServer::ClientContext& info,
            /* in */ frpc::RpcServerReader<int32_t>& value1,
            /* in */ frpc::RpcServerReader<int32_t>& value2,
            /* result */ frpc::RpcServerWriter<int32_t>& result_writer);

    void CalculatorServerLogic::filter(
            const CalculatorServer::ClientContext& info,
            /* in */ frpc::RpcServerReader<int32_t>& value,
            /* in */ calculator_example::FilterKind filter_kind,
            /* result */ frpc::RpcServerWriter<int32_t>& result_writer);

};

}  // namespace detail

std::shared_ptr<CalculatorServer> create_CalculatorServer(
        eprosima::fastdds::dds::DomainParticipant& part,
        const char* service_name,
        const eprosima::fastdds::dds::ReplierQos& qos,
        size_t thread_pool_size)
{
    return std::make_shared<detail::CalculatorServerLogic>(part, service_name, qos, thread_pool_size);
}

//} interface Calculator


} // namespace calculator_example

#include "calculatorServer.ipp"
