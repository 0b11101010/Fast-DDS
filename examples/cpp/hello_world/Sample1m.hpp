// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Sample1m.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__PERFORMANCE_TEST_MSG_SAMPLE1M_HPP
#define FAST_DDS_GENERATED__PERFORMANCE_TEST_MSG_SAMPLE1M_HPP

#include <array>
#include <cstdint>
#include <utility>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(SAMPLE1M_SOURCE)
#define SAMPLE1M_DllAPI __declspec( dllexport )
#else
#define SAMPLE1M_DllAPI __declspec( dllimport )
#endif // SAMPLE1M_SOURCE
#else
#define SAMPLE1M_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define SAMPLE1M_DllAPI
#endif // _WIN32

namespace performance_test {

namespace msg {

/*!
 * @brief This class represents the structure Array1m defined by the user in the IDL file.
 * @ingroup Sample1m
 */
class Array1m
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Array1m()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Array1m()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Array1m that will be copied.
     */
    eProsima_user_DllExport Array1m(
            const Array1m& x)
    {
                    m_array = x.m_array;

                    m_time = x.m_time;

                    m_id = x.m_id;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Array1m that will be copied.
     */
    eProsima_user_DllExport Array1m(
            Array1m&& x) noexcept
    {
        m_array = std::move(x.m_array);
        m_time = x.m_time;
        m_id = x.m_id;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Array1m that will be copied.
     */
    eProsima_user_DllExport Array1m& operator =(
            const Array1m& x)
    {

                    m_array = x.m_array;

                    m_time = x.m_time;

                    m_id = x.m_id;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Array1m that will be copied.
     */
    eProsima_user_DllExport Array1m& operator =(
            Array1m&& x) noexcept
    {

        m_array = std::move(x.m_array);
        m_time = x.m_time;
        m_id = x.m_id;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Array1m object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Array1m& x) const
    {
        return (m_array == x.m_array &&
           m_time == x.m_time &&
           m_id == x.m_id);
    }

    /*!
     * @brief Comparison operator.
     * @param x Array1m object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Array1m& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member array
     * @param _array New value to be copied in member array
     */
    eProsima_user_DllExport void array(
            const std::array<uint8_t, 1048576>& _array)
    {
        m_array = _array;
    }

    /*!
     * @brief This function moves the value in member array
     * @param _array New value to be moved in member array
     */
    eProsima_user_DllExport void array(
            std::array<uint8_t, 1048576>&& _array)
    {
        m_array = std::move(_array);
    }

    /*!
     * @brief This function returns a constant reference to member array
     * @return Constant reference to member array
     */
    eProsima_user_DllExport const std::array<uint8_t, 1048576>& array() const
    {
        return m_array;
    }

    /*!
     * @brief This function returns a reference to member array
     * @return Reference to member array
     */
    eProsima_user_DllExport std::array<uint8_t, 1048576>& array()
    {
        return m_array;
    }


    /*!
     * @brief This function sets a value in member time
     * @param _time New value for member time
     */
    eProsima_user_DllExport void time(
            int64_t _time)
    {
        m_time = _time;
    }

    /*!
     * @brief This function returns the value of member time
     * @return Value of member time
     */
    eProsima_user_DllExport int64_t time() const
    {
        return m_time;
    }

    /*!
     * @brief This function returns a reference to member time
     * @return Reference to member time
     */
    eProsima_user_DllExport int64_t& time()
    {
        return m_time;
    }


    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    eProsima_user_DllExport void id(
            uint64_t _id)
    {
        m_id = _id;
    }

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    eProsima_user_DllExport uint64_t id() const
    {
        return m_id;
    }

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    eProsima_user_DllExport uint64_t& id()
    {
        return m_id;
    }



private:

    std::array<uint8_t, 1048576> m_array{0};
    int64_t m_time{0};
    uint64_t m_id{0};

};

} // namespace msg

} // namespace performance_test

#endif // _FAST_DDS_GENERATED_PERFORMANCE_TEST_MSG_SAMPLE1M_HPP_


