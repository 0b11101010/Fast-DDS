// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Sample1mTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "Sample1mTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "Sample1m.hpp"


using namespace eprosima::fastdds::dds::xtypes;

namespace performance_test {
namespace msg {
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_Array1m_type_identifier(
        TypeIdentifierPair& type_ids_Array1m)
{

    ReturnCode_t return_code_Array1m {eprosima::fastdds::dds::RETCODE_OK};
    return_code_Array1m =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "performance_test::msg::Array1m", type_ids_Array1m);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_Array1m)
    {
        StructTypeFlag struct_flags_Array1m = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_Array1m = "performance_test::msg::Array1m";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Array1m;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Array1m;
        CompleteTypeDetail detail_Array1m = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Array1m, ann_custom_Array1m, type_name_Array1m.to_string());
        CompleteStructHeader header_Array1m;
        header_Array1m = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_Array1m);
        CompleteStructMemberSeq member_seq_Array1m;
        {
            TypeIdentifierPair type_ids_array;
            ReturnCode_t return_code_array {eprosima::fastdds::dds::RETCODE_OK};
            return_code_array =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_byte_1048576", type_ids_array);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_array)
            {
                return_code_array =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_byte", type_ids_array);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_array)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_array_byte_1048576_ec {false};
                TypeIdentifier* element_identifier_anonymous_array_byte_1048576 {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_array, element_identifier_anonymous_array_byte_1048576_ec))};
                if (!element_identifier_anonymous_array_byte_1048576_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_byte_1048576 = EK_COMPLETE;
                if (TK_NONE == type_ids_array.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_byte_1048576 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_byte_1048576 = 0;
                PlainCollectionHeader header_anonymous_array_byte_1048576 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_byte_1048576, element_flags_anonymous_array_byte_1048576);
                {
                    LBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(1048576));

                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header_anonymous_array_byte_1048576, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_byte_1048576));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_byte_1048576", type_ids_array))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_byte_1048576 already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_array = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_array = 0x00000000;
            bool common_array_ec {false};
            CommonStructMember common_array {TypeObjectUtils::build_common_struct_member(member_id_array, member_flags_array, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_array, common_array_ec))};
            if (!common_array_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure array member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_array = "array";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_array;
            ann_custom_Array1m.reset();
            CompleteMemberDetail detail_array = TypeObjectUtils::build_complete_member_detail(name_array, member_ann_builtin_array, ann_custom_Array1m);
            CompleteStructMember member_array = TypeObjectUtils::build_complete_struct_member(common_array, detail_array);
            TypeObjectUtils::add_complete_struct_member(member_seq_Array1m, member_array);
        }
        {
            TypeIdentifierPair type_ids_time;
            ReturnCode_t return_code_time {eprosima::fastdds::dds::RETCODE_OK};
            return_code_time =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int64_t", type_ids_time);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_time)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "time Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_time = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_time = 0x00000001;
            bool common_time_ec {false};
            CommonStructMember common_time {TypeObjectUtils::build_common_struct_member(member_id_time, member_flags_time, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_time, common_time_ec))};
            if (!common_time_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure time member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_time = "time";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_time;
            ann_custom_Array1m.reset();
            CompleteMemberDetail detail_time = TypeObjectUtils::build_complete_member_detail(name_time, member_ann_builtin_time, ann_custom_Array1m);
            CompleteStructMember member_time = TypeObjectUtils::build_complete_struct_member(common_time, detail_time);
            TypeObjectUtils::add_complete_struct_member(member_seq_Array1m, member_time);
        }
        {
            TypeIdentifierPair type_ids_id;
            ReturnCode_t return_code_id {eprosima::fastdds::dds::RETCODE_OK};
            return_code_id =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_id);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_id)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "id Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_id = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_id = 0x00000002;
            bool common_id_ec {false};
            CommonStructMember common_id {TypeObjectUtils::build_common_struct_member(member_id_id, member_flags_id, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_id, common_id_ec))};
            if (!common_id_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure id member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_id = "id";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_id;
            ann_custom_Array1m.reset();
            CompleteMemberDetail detail_id = TypeObjectUtils::build_complete_member_detail(name_id, member_ann_builtin_id, ann_custom_Array1m);
            CompleteStructMember member_id = TypeObjectUtils::build_complete_struct_member(common_id, detail_id);
            TypeObjectUtils::add_complete_struct_member(member_seq_Array1m, member_id);
        }
        CompleteStructType struct_type_Array1m = TypeObjectUtils::build_complete_struct_type(struct_flags_Array1m, header_Array1m, member_seq_Array1m);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_Array1m, type_name_Array1m.to_string(), type_ids_Array1m))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "performance_test::msg::Array1m already registered in TypeObjectRegistry for a different type.");
        }
    }
}

} // namespace msg

} // namespace performance_test

