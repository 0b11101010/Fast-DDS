// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file HelloWorld.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_HELLOWORLD_HPP_
#define _FAST_DDS_GENERATED_HELLOWORLD_HPP_

#include <cstdint>
#include <string>
#include <utility>
#include <fastcdr/cdr/fixed_size_string.hpp>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(HELLOWORLD_SOURCE)
#define HELLOWORLD_DllAPI __declspec( dllexport )
#else
#define HELLOWORLD_DllAPI __declspec( dllimport )
#endif // HELLOWORLD_SOURCE
#else
#define HELLOWORLD_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define HELLOWORLD_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure HelloWorld defined by the user in the IDL file.
 * @ingroup HelloWorld
 */
class HelloWorld
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport HelloWorld()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~HelloWorld()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object HelloWorld that will be copied.
     */
    eProsima_user_DllExport HelloWorld(
            const HelloWorld& x)
    {
                    m_site = x.m_site;

                    m_device = x.m_device;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object HelloWorld that will be copied.
     */
    eProsima_user_DllExport HelloWorld(
            HelloWorld&& x) noexcept
    {
        m_site = std::move(x.m_site);
        m_device = std::move(x.m_device);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object HelloWorld that will be copied.
     */
    eProsima_user_DllExport HelloWorld& operator =(
            const HelloWorld& x)
    {

                    m_site = x.m_site;

                    m_device = x.m_device;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object HelloWorld that will be copied.
     */
    eProsima_user_DllExport HelloWorld& operator =(
            HelloWorld&& x) noexcept
    {

        m_site = std::move(x.m_site);
        m_device = std::move(x.m_device);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x HelloWorld object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const HelloWorld& x) const
    {
        return (m_site == x.m_site &&
           m_device == x.m_device);
    }

    /*!
     * @brief Comparison operator.
     * @param x HelloWorld object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const HelloWorld& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member site
     * @param _site New value to be copied in member site
     */
    eProsima_user_DllExport void site(
            const std::string& _site)
    {
        m_site = _site;
    }

    /*!
     * @brief This function moves the value in member site
     * @param _site New value to be moved in member site
     */
    eProsima_user_DllExport void site(
            std::string&& _site)
    {
        m_site = std::move(_site);
    }

    /*!
     * @brief This function returns a constant reference to member site
     * @return Constant reference to member site
     */
    eProsima_user_DllExport const std::string& site() const
    {
        return m_site;
    }

    /*!
     * @brief This function returns a reference to member site
     * @return Reference to member site
     */
    eProsima_user_DllExport std::string& site()
    {
        return m_site;
    }


    /*!
     * @brief This function copies the value in member device
     * @param _device New value to be copied in member device
     */
    eProsima_user_DllExport void device(
            const std::string& _device)
    {
        m_device = _device;
    }

    /*!
     * @brief This function moves the value in member device
     * @param _device New value to be moved in member device
     */
    eProsima_user_DllExport void device(
            std::string&& _device)
    {
        m_device = std::move(_device);
    }

    /*!
     * @brief This function returns a constant reference to member device
     * @return Constant reference to member device
     */
    eProsima_user_DllExport const std::string& device() const
    {
        return m_device;
    }

    /*!
     * @brief This function returns a reference to member device
     * @return Reference to member device
     */
    eProsima_user_DllExport std::string& device()
    {
        return m_device;
    }



private:

    std::string m_site;
    std::string m_device;

};

#endif // _FAST_DDS_GENERATED_HELLOWORLD_HPP_


