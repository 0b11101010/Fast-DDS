// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ComplexSequence.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_COMPLEXSEQUENCE_HPP_
#define _FAST_DDS_GENERATED_COMPLEXSEQUENCE_HPP_

#include <cstdint>
#include <string>
#include <utility>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(COMPLEXSEQUENCE_SOURCE)
#define COMPLEXSEQUENCE_DllAPI __declspec( dllexport )
#else
#define COMPLEXSEQUENCE_DllAPI __declspec( dllimport )
#endif // COMPLEXSEQUENCE_SOURCE
#else
#define COMPLEXSEQUENCE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define COMPLEXSEQUENCE_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure InternalSequencePoints_TypeIntrospectionExample defined by the user in the IDL file.
 * @ingroup ComplexSequence
 */
class InternalSequencePoints_TypeIntrospectionExample
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport InternalSequencePoints_TypeIntrospectionExample()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~InternalSequencePoints_TypeIntrospectionExample()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object InternalSequencePoints_TypeIntrospectionExample that will be copied.
     */
    eProsima_user_DllExport InternalSequencePoints_TypeIntrospectionExample(
            const InternalSequencePoints_TypeIntrospectionExample& x)
    {
                    m_x_member = x.m_x_member;

                    m_y_member = x.m_y_member;

                    m_z_member = x.m_z_member;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object InternalSequencePoints_TypeIntrospectionExample that will be copied.
     */
    eProsima_user_DllExport InternalSequencePoints_TypeIntrospectionExample(
            InternalSequencePoints_TypeIntrospectionExample&& x) noexcept
    {
        m_x_member = x.m_x_member;
        m_y_member = x.m_y_member;
        m_z_member = x.m_z_member;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object InternalSequencePoints_TypeIntrospectionExample that will be copied.
     */
    eProsima_user_DllExport InternalSequencePoints_TypeIntrospectionExample& operator =(
            const InternalSequencePoints_TypeIntrospectionExample& x)
    {

                    m_x_member = x.m_x_member;

                    m_y_member = x.m_y_member;

                    m_z_member = x.m_z_member;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object InternalSequencePoints_TypeIntrospectionExample that will be copied.
     */
    eProsima_user_DllExport InternalSequencePoints_TypeIntrospectionExample& operator =(
            InternalSequencePoints_TypeIntrospectionExample&& x) noexcept
    {

        m_x_member = x.m_x_member;
        m_y_member = x.m_y_member;
        m_z_member = x.m_z_member;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x InternalSequencePoints_TypeIntrospectionExample object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const InternalSequencePoints_TypeIntrospectionExample& x) const
    {
        return (m_x_member == x.m_x_member &&
           m_y_member == x.m_y_member &&
           m_z_member == x.m_z_member);
    }

    /*!
     * @brief Comparison operator.
     * @param x InternalSequencePoints_TypeIntrospectionExample object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const InternalSequencePoints_TypeIntrospectionExample& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member x_member
     * @param _x_member New value for member x_member
     */
    eProsima_user_DllExport void x_member(
            int32_t _x_member)
    {
        m_x_member = _x_member;
    }

    /*!
     * @brief This function returns the value of member x_member
     * @return Value of member x_member
     */
    eProsima_user_DllExport int32_t x_member() const
    {
        return m_x_member;
    }

    /*!
     * @brief This function returns a reference to member x_member
     * @return Reference to member x_member
     */
    eProsima_user_DllExport int32_t& x_member()
    {
        return m_x_member;
    }


    /*!
     * @brief This function sets a value in member y_member
     * @param _y_member New value for member y_member
     */
    eProsima_user_DllExport void y_member(
            int32_t _y_member)
    {
        m_y_member = _y_member;
    }

    /*!
     * @brief This function returns the value of member y_member
     * @return Value of member y_member
     */
    eProsima_user_DllExport int32_t y_member() const
    {
        return m_y_member;
    }

    /*!
     * @brief This function returns a reference to member y_member
     * @return Reference to member y_member
     */
    eProsima_user_DllExport int32_t& y_member()
    {
        return m_y_member;
    }


    /*!
     * @brief This function sets a value in member z_member
     * @param _z_member New value for member z_member
     */
    eProsima_user_DllExport void z_member(
            int32_t _z_member)
    {
        m_z_member = _z_member;
    }

    /*!
     * @brief This function returns the value of member z_member
     * @return Value of member z_member
     */
    eProsima_user_DllExport int32_t z_member() const
    {
        return m_z_member;
    }

    /*!
     * @brief This function returns a reference to member z_member
     * @return Reference to member z_member
     */
    eProsima_user_DllExport int32_t& z_member()
    {
        return m_z_member;
    }



private:

    int32_t m_x_member{0};
    int32_t m_y_member{0};
    int32_t m_z_member{0};

};
/*!
 * @brief This class represents the structure InternalSequenceMessage_TypeIntrospectionExample defined by the user in the IDL file.
 * @ingroup ComplexSequence
 */
class InternalSequenceMessage_TypeIntrospectionExample
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport InternalSequenceMessage_TypeIntrospectionExample()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~InternalSequenceMessage_TypeIntrospectionExample()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object InternalSequenceMessage_TypeIntrospectionExample that will be copied.
     */
    eProsima_user_DllExport InternalSequenceMessage_TypeIntrospectionExample(
            const InternalSequenceMessage_TypeIntrospectionExample& x)
    {
                    m_message = x.m_message;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object InternalSequenceMessage_TypeIntrospectionExample that will be copied.
     */
    eProsima_user_DllExport InternalSequenceMessage_TypeIntrospectionExample(
            InternalSequenceMessage_TypeIntrospectionExample&& x) noexcept
    {
        m_message = std::move(x.m_message);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object InternalSequenceMessage_TypeIntrospectionExample that will be copied.
     */
    eProsima_user_DllExport InternalSequenceMessage_TypeIntrospectionExample& operator =(
            const InternalSequenceMessage_TypeIntrospectionExample& x)
    {

                    m_message = x.m_message;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object InternalSequenceMessage_TypeIntrospectionExample that will be copied.
     */
    eProsima_user_DllExport InternalSequenceMessage_TypeIntrospectionExample& operator =(
            InternalSequenceMessage_TypeIntrospectionExample&& x) noexcept
    {

        m_message = std::move(x.m_message);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x InternalSequenceMessage_TypeIntrospectionExample object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const InternalSequenceMessage_TypeIntrospectionExample& x) const
    {
        return (m_message == x.m_message);
    }

    /*!
     * @brief Comparison operator.
     * @param x InternalSequenceMessage_TypeIntrospectionExample object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const InternalSequenceMessage_TypeIntrospectionExample& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member message
     * @param _message New value to be copied in member message
     */
    eProsima_user_DllExport void message(
            const std::string& _message)
    {
        m_message = _message;
    }

    /*!
     * @brief This function moves the value in member message
     * @param _message New value to be moved in member message
     */
    eProsima_user_DllExport void message(
            std::string&& _message)
    {
        m_message = std::move(_message);
    }

    /*!
     * @brief This function returns a constant reference to member message
     * @return Constant reference to member message
     */
    eProsima_user_DllExport const std::string& message() const
    {
        return m_message;
    }

    /*!
     * @brief This function returns a reference to member message
     * @return Reference to member message
     */
    eProsima_user_DllExport std::string& message()
    {
        return m_message;
    }



private:

    std::string m_message;

};
/*!
 * @brief This class represents the structure ComplexSequence_TypeIntrospectionExample defined by the user in the IDL file.
 * @ingroup ComplexSequence
 */
class ComplexSequence_TypeIntrospectionExample
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ComplexSequence_TypeIntrospectionExample()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ComplexSequence_TypeIntrospectionExample()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ComplexSequence_TypeIntrospectionExample that will be copied.
     */
    eProsima_user_DllExport ComplexSequence_TypeIntrospectionExample(
            const ComplexSequence_TypeIntrospectionExample& x)
    {
                    m_index = x.m_index;

                    m_internal_data = x.m_internal_data;

                    m_messages = x.m_messages;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ComplexSequence_TypeIntrospectionExample that will be copied.
     */
    eProsima_user_DllExport ComplexSequence_TypeIntrospectionExample(
            ComplexSequence_TypeIntrospectionExample&& x) noexcept
    {
        m_index = x.m_index;
        m_internal_data = std::move(x.m_internal_data);
        m_messages = std::move(x.m_messages);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ComplexSequence_TypeIntrospectionExample that will be copied.
     */
    eProsima_user_DllExport ComplexSequence_TypeIntrospectionExample& operator =(
            const ComplexSequence_TypeIntrospectionExample& x)
    {

                    m_index = x.m_index;

                    m_internal_data = x.m_internal_data;

                    m_messages = x.m_messages;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ComplexSequence_TypeIntrospectionExample that will be copied.
     */
    eProsima_user_DllExport ComplexSequence_TypeIntrospectionExample& operator =(
            ComplexSequence_TypeIntrospectionExample&& x) noexcept
    {

        m_index = x.m_index;
        m_internal_data = std::move(x.m_internal_data);
        m_messages = std::move(x.m_messages);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x ComplexSequence_TypeIntrospectionExample object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ComplexSequence_TypeIntrospectionExample& x) const
    {
        return (m_index == x.m_index &&
           m_internal_data == x.m_internal_data &&
           m_messages == x.m_messages);
    }

    /*!
     * @brief Comparison operator.
     * @param x ComplexSequence_TypeIntrospectionExample object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ComplexSequence_TypeIntrospectionExample& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member index
     * @param _index New value for member index
     */
    eProsima_user_DllExport void index(
            uint32_t _index)
    {
        m_index = _index;
    }

    /*!
     * @brief This function returns the value of member index
     * @return Value of member index
     */
    eProsima_user_DllExport uint32_t index() const
    {
        return m_index;
    }

    /*!
     * @brief This function returns a reference to member index
     * @return Reference to member index
     */
    eProsima_user_DllExport uint32_t& index()
    {
        return m_index;
    }


    /*!
     * @brief This function copies the value in member internal_data
     * @param _internal_data New value to be copied in member internal_data
     */
    eProsima_user_DllExport void internal_data(
            const std::vector<InternalSequencePoints_TypeIntrospectionExample>& _internal_data)
    {
        m_internal_data = _internal_data;
    }

    /*!
     * @brief This function moves the value in member internal_data
     * @param _internal_data New value to be moved in member internal_data
     */
    eProsima_user_DllExport void internal_data(
            std::vector<InternalSequencePoints_TypeIntrospectionExample>&& _internal_data)
    {
        m_internal_data = std::move(_internal_data);
    }

    /*!
     * @brief This function returns a constant reference to member internal_data
     * @return Constant reference to member internal_data
     */
    eProsima_user_DllExport const std::vector<InternalSequencePoints_TypeIntrospectionExample>& internal_data() const
    {
        return m_internal_data;
    }

    /*!
     * @brief This function returns a reference to member internal_data
     * @return Reference to member internal_data
     */
    eProsima_user_DllExport std::vector<InternalSequencePoints_TypeIntrospectionExample>& internal_data()
    {
        return m_internal_data;
    }


    /*!
     * @brief This function copies the value in member messages
     * @param _messages New value to be copied in member messages
     */
    eProsima_user_DllExport void messages(
            const std::vector<InternalSequenceMessage_TypeIntrospectionExample>& _messages)
    {
        m_messages = _messages;
    }

    /*!
     * @brief This function moves the value in member messages
     * @param _messages New value to be moved in member messages
     */
    eProsima_user_DllExport void messages(
            std::vector<InternalSequenceMessage_TypeIntrospectionExample>&& _messages)
    {
        m_messages = std::move(_messages);
    }

    /*!
     * @brief This function returns a constant reference to member messages
     * @return Constant reference to member messages
     */
    eProsima_user_DllExport const std::vector<InternalSequenceMessage_TypeIntrospectionExample>& messages() const
    {
        return m_messages;
    }

    /*!
     * @brief This function returns a reference to member messages
     * @return Reference to member messages
     */
    eProsima_user_DllExport std::vector<InternalSequenceMessage_TypeIntrospectionExample>& messages()
    {
        return m_messages;
    }



private:

    uint32_t m_index{0};
    std::vector<InternalSequencePoints_TypeIntrospectionExample> m_internal_data;
    std::vector<InternalSequenceMessage_TypeIntrospectionExample> m_messages;

};

#endif // _FAST_DDS_GENERATED_COMPLEXSEQUENCE_HPP_


