// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ComplexSequence.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ComplexSequence.h"

#if FASTCDR_VERSION_MAJOR > 1

#include "ComplexSequenceTypeObject.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




InternalSequencePoints_TypeIntrospectionExample::InternalSequencePoints_TypeIntrospectionExample()
{
    // Just to register all known types
    registerComplexSequenceTypes();
}

InternalSequencePoints_TypeIntrospectionExample::~InternalSequencePoints_TypeIntrospectionExample()
{
}

InternalSequencePoints_TypeIntrospectionExample::InternalSequencePoints_TypeIntrospectionExample(
        const InternalSequencePoints_TypeIntrospectionExample& x)
{
    m_x_member = x.m_x_member;
    m_y_member = x.m_y_member;
    m_z_member = x.m_z_member;
}

InternalSequencePoints_TypeIntrospectionExample::InternalSequencePoints_TypeIntrospectionExample(
        InternalSequencePoints_TypeIntrospectionExample&& x) noexcept
{
    m_x_member = x.m_x_member;
    m_y_member = x.m_y_member;
    m_z_member = x.m_z_member;
}

InternalSequencePoints_TypeIntrospectionExample& InternalSequencePoints_TypeIntrospectionExample::operator =(
        const InternalSequencePoints_TypeIntrospectionExample& x)
{

    m_x_member = x.m_x_member;
    m_y_member = x.m_y_member;
    m_z_member = x.m_z_member;
    return *this;
}

InternalSequencePoints_TypeIntrospectionExample& InternalSequencePoints_TypeIntrospectionExample::operator =(
        InternalSequencePoints_TypeIntrospectionExample&& x) noexcept
{

    m_x_member = x.m_x_member;
    m_y_member = x.m_y_member;
    m_z_member = x.m_z_member;
    return *this;
}

bool InternalSequencePoints_TypeIntrospectionExample::operator ==(
        const InternalSequencePoints_TypeIntrospectionExample& x) const
{
    return (m_x_member == x.m_x_member &&
           m_y_member == x.m_y_member &&
           m_z_member == x.m_z_member);
}

bool InternalSequencePoints_TypeIntrospectionExample::operator !=(
        const InternalSequencePoints_TypeIntrospectionExample& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member x_member
 * @param _x_member New value for member x_member
 */
void InternalSequencePoints_TypeIntrospectionExample::x_member(
        int32_t _x_member)
{
    m_x_member = _x_member;
}

/*!
 * @brief This function returns the value of member x_member
 * @return Value of member x_member
 */
int32_t InternalSequencePoints_TypeIntrospectionExample::x_member() const
{
    return m_x_member;
}

/*!
 * @brief This function returns a reference to member x_member
 * @return Reference to member x_member
 */
int32_t& InternalSequencePoints_TypeIntrospectionExample::x_member()
{
    return m_x_member;
}


/*!
 * @brief This function sets a value in member y_member
 * @param _y_member New value for member y_member
 */
void InternalSequencePoints_TypeIntrospectionExample::y_member(
        int32_t _y_member)
{
    m_y_member = _y_member;
}

/*!
 * @brief This function returns the value of member y_member
 * @return Value of member y_member
 */
int32_t InternalSequencePoints_TypeIntrospectionExample::y_member() const
{
    return m_y_member;
}

/*!
 * @brief This function returns a reference to member y_member
 * @return Reference to member y_member
 */
int32_t& InternalSequencePoints_TypeIntrospectionExample::y_member()
{
    return m_y_member;
}


/*!
 * @brief This function sets a value in member z_member
 * @param _z_member New value for member z_member
 */
void InternalSequencePoints_TypeIntrospectionExample::z_member(
        int32_t _z_member)
{
    m_z_member = _z_member;
}

/*!
 * @brief This function returns the value of member z_member
 * @return Value of member z_member
 */
int32_t InternalSequencePoints_TypeIntrospectionExample::z_member() const
{
    return m_z_member;
}

/*!
 * @brief This function returns a reference to member z_member
 * @return Reference to member z_member
 */
int32_t& InternalSequencePoints_TypeIntrospectionExample::z_member()
{
    return m_z_member;
}




InternalSequenceMessage_TypeIntrospectionExample::InternalSequenceMessage_TypeIntrospectionExample()
{
    // Just to register all known types
    registerComplexSequenceTypes();
}

InternalSequenceMessage_TypeIntrospectionExample::~InternalSequenceMessage_TypeIntrospectionExample()
{
}

InternalSequenceMessage_TypeIntrospectionExample::InternalSequenceMessage_TypeIntrospectionExample(
        const InternalSequenceMessage_TypeIntrospectionExample& x)
{
    m_message = x.m_message;
}

InternalSequenceMessage_TypeIntrospectionExample::InternalSequenceMessage_TypeIntrospectionExample(
        InternalSequenceMessage_TypeIntrospectionExample&& x) noexcept
{
    m_message = std::move(x.m_message);
}

InternalSequenceMessage_TypeIntrospectionExample& InternalSequenceMessage_TypeIntrospectionExample::operator =(
        const InternalSequenceMessage_TypeIntrospectionExample& x)
{

    m_message = x.m_message;
    return *this;
}

InternalSequenceMessage_TypeIntrospectionExample& InternalSequenceMessage_TypeIntrospectionExample::operator =(
        InternalSequenceMessage_TypeIntrospectionExample&& x) noexcept
{

    m_message = std::move(x.m_message);
    return *this;
}

bool InternalSequenceMessage_TypeIntrospectionExample::operator ==(
        const InternalSequenceMessage_TypeIntrospectionExample& x) const
{
    return (m_message == x.m_message);
}

bool InternalSequenceMessage_TypeIntrospectionExample::operator !=(
        const InternalSequenceMessage_TypeIntrospectionExample& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void InternalSequenceMessage_TypeIntrospectionExample::message(
        const std::string& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void InternalSequenceMessage_TypeIntrospectionExample::message(
        std::string&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::string& InternalSequenceMessage_TypeIntrospectionExample::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::string& InternalSequenceMessage_TypeIntrospectionExample::message()
{
    return m_message;
}






ComplexSequence_TypeIntrospectionExample::ComplexSequence_TypeIntrospectionExample()
{
    // Just to register all known types
    registerComplexSequenceTypes();
}

ComplexSequence_TypeIntrospectionExample::~ComplexSequence_TypeIntrospectionExample()
{
}

ComplexSequence_TypeIntrospectionExample::ComplexSequence_TypeIntrospectionExample(
        const ComplexSequence_TypeIntrospectionExample& x)
{
    m_index = x.m_index;
    m_internal_data = x.m_internal_data;
    m_messages = x.m_messages;
}

ComplexSequence_TypeIntrospectionExample::ComplexSequence_TypeIntrospectionExample(
        ComplexSequence_TypeIntrospectionExample&& x) noexcept
{
    m_index = x.m_index;
    m_internal_data = std::move(x.m_internal_data);
    m_messages = std::move(x.m_messages);
}

ComplexSequence_TypeIntrospectionExample& ComplexSequence_TypeIntrospectionExample::operator =(
        const ComplexSequence_TypeIntrospectionExample& x)
{

    m_index = x.m_index;
    m_internal_data = x.m_internal_data;
    m_messages = x.m_messages;
    return *this;
}

ComplexSequence_TypeIntrospectionExample& ComplexSequence_TypeIntrospectionExample::operator =(
        ComplexSequence_TypeIntrospectionExample&& x) noexcept
{

    m_index = x.m_index;
    m_internal_data = std::move(x.m_internal_data);
    m_messages = std::move(x.m_messages);
    return *this;
}

bool ComplexSequence_TypeIntrospectionExample::operator ==(
        const ComplexSequence_TypeIntrospectionExample& x) const
{
    return (m_index == x.m_index &&
           m_internal_data == x.m_internal_data &&
           m_messages == x.m_messages);
}

bool ComplexSequence_TypeIntrospectionExample::operator !=(
        const ComplexSequence_TypeIntrospectionExample& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void ComplexSequence_TypeIntrospectionExample::index(
        uint32_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint32_t ComplexSequence_TypeIntrospectionExample::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint32_t& ComplexSequence_TypeIntrospectionExample::index()
{
    return m_index;
}


/*!
 * @brief This function copies the value in member internal_data
 * @param _internal_data New value to be copied in member internal_data
 */
void ComplexSequence_TypeIntrospectionExample::internal_data(
        const std::vector<InternalSequencePoints_TypeIntrospectionExample>& _internal_data)
{
    m_internal_data = _internal_data;
}

/*!
 * @brief This function moves the value in member internal_data
 * @param _internal_data New value to be moved in member internal_data
 */
void ComplexSequence_TypeIntrospectionExample::internal_data(
        std::vector<InternalSequencePoints_TypeIntrospectionExample>&& _internal_data)
{
    m_internal_data = std::move(_internal_data);
}

/*!
 * @brief This function returns a constant reference to member internal_data
 * @return Constant reference to member internal_data
 */
const std::vector<InternalSequencePoints_TypeIntrospectionExample>& ComplexSequence_TypeIntrospectionExample::internal_data() const
{
    return m_internal_data;
}

/*!
 * @brief This function returns a reference to member internal_data
 * @return Reference to member internal_data
 */
std::vector<InternalSequencePoints_TypeIntrospectionExample>& ComplexSequence_TypeIntrospectionExample::internal_data()
{
    return m_internal_data;
}


/*!
 * @brief This function copies the value in member messages
 * @param _messages New value to be copied in member messages
 */
void ComplexSequence_TypeIntrospectionExample::messages(
        const std::vector<InternalSequenceMessage_TypeIntrospectionExample>& _messages)
{
    m_messages = _messages;
}

/*!
 * @brief This function moves the value in member messages
 * @param _messages New value to be moved in member messages
 */
void ComplexSequence_TypeIntrospectionExample::messages(
        std::vector<InternalSequenceMessage_TypeIntrospectionExample>&& _messages)
{
    m_messages = std::move(_messages);
}

/*!
 * @brief This function returns a constant reference to member messages
 * @return Constant reference to member messages
 */
const std::vector<InternalSequenceMessage_TypeIntrospectionExample>& ComplexSequence_TypeIntrospectionExample::messages() const
{
    return m_messages;
}

/*!
 * @brief This function returns a reference to member messages
 * @return Reference to member messages
 */
std::vector<InternalSequenceMessage_TypeIntrospectionExample>& ComplexSequence_TypeIntrospectionExample::messages()
{
    return m_messages;
}


// Include auxiliary functions like for serializing/deserializing.
#include "ComplexSequenceCdrAux.ipp"

#endif // FASTCDR_VERSION_MAJOR > 1
