// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SimpleLargeTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "SimpleLargeTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "SimpleLarge.hpp"


using namespace eprosima::fastdds::dds::xtypes;

void register_SimpleLarge_type_objects()
{
    static std::once_flag once_flag;
    std::call_once(once_flag, []()
            {
                register_SimpleLarge_TypeIntrospectionExample_type_identifier();

            });
}

void register_SimpleLarge_TypeIntrospectionExample_type_identifier()
{
    {
        StructTypeFlag struct_flags_SimpleLarge_TypeIntrospectionExample = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SimpleLarge_TypeIntrospectionExample;
        TypeIdentifierPair type_ids_SimpleLarge_TypeIntrospectionExample;
        QualifiedTypeName type_name_SimpleLarge_TypeIntrospectionExample = "SimpleLarge_TypeIntrospectionExample";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SimpleLarge_TypeIntrospectionExample;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SimpleLarge_TypeIntrospectionExample;
        CompleteTypeDetail detail_SimpleLarge_TypeIntrospectionExample = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SimpleLarge_TypeIntrospectionExample, ann_custom_SimpleLarge_TypeIntrospectionExample, type_name_SimpleLarge_TypeIntrospectionExample.to_string());
        CompleteStructHeader header_SimpleLarge_TypeIntrospectionExample;
        header_SimpleLarge_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SimpleLarge_TypeIntrospectionExample);
        CompleteStructMemberSeq member_seq_SimpleLarge_TypeIntrospectionExample;
        {
            return_code_SimpleLarge_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids_SimpleLarge_TypeIntrospectionExample);

            if (return_code_SimpleLarge_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "index Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_index = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_index;
            MemberId member_id_index = 0x00000000;
            if (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_index = TypeObjectUtils::build_common_struct_member(member_id_index, member_flags_index, type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_index = TypeObjectUtils::build_common_struct_member(member_id_index, member_flags_index, type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure index member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_index = "index";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_index;
            ann_custom_SimpleLarge_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_index = TypeObjectUtils::build_complete_member_detail(name_index, member_ann_builtin_index, ann_custom_SimpleLarge_TypeIntrospectionExample);
            CompleteStructMember member_index = TypeObjectUtils::build_complete_struct_member(common_index, detail_index);
            TypeObjectUtils::add_complete_struct_member(member_seq_SimpleLarge_TypeIntrospectionExample, member_index);
        }
        {
            return_code_SimpleLarge_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_SimpleLarge_TypeIntrospectionExample);

            if (return_code_SimpleLarge_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Unknown String kind.");
                    return;
                }
                return_code_SimpleLarge_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_SimpleLarge_TypeIntrospectionExample);
                if (return_code_SimpleLarge_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_message = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_message;
            MemberId member_id_message = 0x00000001;
            if (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_message = TypeObjectUtils::build_common_struct_member(member_id_message, member_flags_message, type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_message = TypeObjectUtils::build_common_struct_member(member_id_message, member_flags_message, type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure message member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_message = "message";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_message;
            ann_custom_SimpleLarge_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_message = TypeObjectUtils::build_complete_member_detail(name_message, member_ann_builtin_message, ann_custom_SimpleLarge_TypeIntrospectionExample);
            CompleteStructMember member_message = TypeObjectUtils::build_complete_struct_member(common_message, detail_message);
            TypeObjectUtils::add_complete_struct_member(member_seq_SimpleLarge_TypeIntrospectionExample, member_message);
        }
        {
            return_code_SimpleLarge_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_int32_t_3", type_ids_SimpleLarge_TypeIntrospectionExample);

            if (return_code_SimpleLarge_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SimpleLarge_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_SimpleLarge_TypeIntrospectionExample);

                if (return_code_SimpleLarge_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_array_int32_t_3 {nullptr};
                if (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_array_int32_t_3 = new TypeIdentifier(type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_array_int32_t_3 = new TypeIdentifier(type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_int32_t_3 = EK_COMPLETE;
                if (TK_NONE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_int32_t_3 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_int32_t_3 = 0;
                PlainCollectionHeader header_anonymous_array_int32_t_3 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_int32_t_3, element_flags_anonymous_array_int32_t_3);
                std::string type_id_kind_anonymous_array_int32_t_3("TI_PLAIN_ARRAY_SMALL");
                if (type_id_kind_anonymous_array_int32_t_3 == "TI_PLAIN_ARRAY_SMALL")
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(3));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_int32_t_3, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int32_t_3));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_int32_t_3"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_int32_t_3 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(3));

                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header_anonymous_array_int32_t_3, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int32_t_3));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_int32_t_3"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_int32_t_3 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SimpleLarge_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_array_int32_t_3", type_ids_SimpleLarge_TypeIntrospectionExample);
                if (return_code_SimpleLarge_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_array_int32_t_3: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_points = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_points;
            MemberId member_id_points = 0x00000002;
            if (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_points = TypeObjectUtils::build_common_struct_member(member_id_points, member_flags_points, type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_points = TypeObjectUtils::build_common_struct_member(member_id_points, member_flags_points, type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure points member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_points = "points";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_points;
            ann_custom_SimpleLarge_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_points = TypeObjectUtils::build_complete_member_detail(name_points, member_ann_builtin_points, ann_custom_SimpleLarge_TypeIntrospectionExample);
            CompleteStructMember member_points = TypeObjectUtils::build_complete_struct_member(common_points, detail_points);
            TypeObjectUtils::add_complete_struct_member(member_seq_SimpleLarge_TypeIntrospectionExample, member_points);
        }
        {
            return_code_SimpleLarge_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_SimpleLarge_TypeIntrospectionExample);

            if (return_code_SimpleLarge_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Unknown String kind.");
                    return;
                }
                return_code_SimpleLarge_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_SimpleLarge_TypeIntrospectionExample);
                if (return_code_SimpleLarge_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_second_message = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_second_message;
            MemberId member_id_second_message = 0x00000003;
            if (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_second_message = TypeObjectUtils::build_common_struct_member(member_id_second_message, member_flags_second_message, type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_second_message = TypeObjectUtils::build_common_struct_member(member_id_second_message, member_flags_second_message, type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure second_message member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_second_message = "second_message";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_second_message;
            ann_custom_SimpleLarge_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_second_message = TypeObjectUtils::build_complete_member_detail(name_second_message, member_ann_builtin_second_message, ann_custom_SimpleLarge_TypeIntrospectionExample);
            CompleteStructMember member_second_message = TypeObjectUtils::build_complete_struct_member(common_second_message, detail_second_message);
            TypeObjectUtils::add_complete_struct_member(member_seq_SimpleLarge_TypeIntrospectionExample, member_second_message);
        }
        {
            return_code_SimpleLarge_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_int16_t_unbounded", type_ids_SimpleLarge_TypeIntrospectionExample);

            if (return_code_SimpleLarge_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SimpleLarge_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_SimpleLarge_TypeIntrospectionExample);

                if (return_code_SimpleLarge_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_sequence_int16_t_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_int16_t_unbounded = new TypeIdentifier(type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_int16_t_unbounded = new TypeIdentifier(type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_int16_t_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_int16_t_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_int16_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_int16_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_int16_t_unbounded, element_flags_anonymous_sequence_int16_t_unbounded);
                std::string type_id_kind_anonymous_sequence_int16_t_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_int16_t_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_int16_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int16_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_int16_t_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_int16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_int16_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int16_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_int16_t_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_int16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SimpleLarge_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_int16_t_unbounded", type_ids_SimpleLarge_TypeIntrospectionExample);
                if (return_code_SimpleLarge_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_int16_t_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_some_values = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_some_values;
            MemberId member_id_some_values = 0x00000004;
            if (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_some_values = TypeObjectUtils::build_common_struct_member(member_id_some_values, member_flags_some_values, type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_some_values = TypeObjectUtils::build_common_struct_member(member_id_some_values, member_flags_some_values, type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure some_values member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_some_values = "some_values";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_some_values;
            ann_custom_SimpleLarge_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_some_values = TypeObjectUtils::build_complete_member_detail(name_some_values, member_ann_builtin_some_values, ann_custom_SimpleLarge_TypeIntrospectionExample);
            CompleteStructMember member_some_values = TypeObjectUtils::build_complete_struct_member(common_some_values, detail_some_values);
            TypeObjectUtils::add_complete_struct_member(member_seq_SimpleLarge_TypeIntrospectionExample, member_some_values);
        }
        {
            return_code_SimpleLarge_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_SimpleLarge_TypeIntrospectionExample);

            if (return_code_SimpleLarge_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "is_it_not_true_that_true_is_not_true Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_is_it_not_true_that_true_is_not_true = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_is_it_not_true_that_true_is_not_true;
            MemberId member_id_is_it_not_true_that_true_is_not_true = 0x00000005;
            if (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_is_it_not_true_that_true_is_not_true = TypeObjectUtils::build_common_struct_member(member_id_is_it_not_true_that_true_is_not_true, member_flags_is_it_not_true_that_true_is_not_true, type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_is_it_not_true_that_true_is_not_true = TypeObjectUtils::build_common_struct_member(member_id_is_it_not_true_that_true_is_not_true, member_flags_is_it_not_true_that_true_is_not_true, type_ids_SimpleLarge_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure is_it_not_true_that_true_is_not_true member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_is_it_not_true_that_true_is_not_true = "is_it_not_true_that_true_is_not_true";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_is_it_not_true_that_true_is_not_true;
            ann_custom_SimpleLarge_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_is_it_not_true_that_true_is_not_true = TypeObjectUtils::build_complete_member_detail(name_is_it_not_true_that_true_is_not_true, member_ann_builtin_is_it_not_true_that_true_is_not_true, ann_custom_SimpleLarge_TypeIntrospectionExample);
            CompleteStructMember member_is_it_not_true_that_true_is_not_true = TypeObjectUtils::build_complete_struct_member(common_is_it_not_true_that_true_is_not_true, detail_is_it_not_true_that_true_is_not_true);
            TypeObjectUtils::add_complete_struct_member(member_seq_SimpleLarge_TypeIntrospectionExample, member_is_it_not_true_that_true_is_not_true);
        }
        CompleteStructType struct_type_SimpleLarge_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_type(struct_flags_SimpleLarge_TypeIntrospectionExample, header_SimpleLarge_TypeIntrospectionExample, member_seq_SimpleLarge_TypeIntrospectionExample);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SimpleLarge_TypeIntrospectionExample, type_name_SimpleLarge_TypeIntrospectionExample.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SimpleLarge_TypeIntrospectionExample already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SimpleLarge_TypeIntrospectionExample =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SimpleLarge_TypeIntrospectionExample", type_ids_SimpleLarge_TypeIntrospectionExample);
        if (return_code_SimpleLarge_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SimpleLarge_TypeIntrospectionExample: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}

