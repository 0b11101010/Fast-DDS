// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SimpleLarge.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_SIMPLELARGE_HPP_
#define _FAST_DDS_GENERATED_SIMPLELARGE_HPP_

#include <array>
#include <cstdint>
#include <string>
#include <utility>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(SIMPLELARGE_SOURCE)
#define SIMPLELARGE_DllAPI __declspec( dllexport )
#else
#define SIMPLELARGE_DllAPI __declspec( dllimport )
#endif // SIMPLELARGE_SOURCE
#else
#define SIMPLELARGE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define SIMPLELARGE_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure SimpleLarge_TypeIntrospectionExample defined by the user in the IDL file.
 * @ingroup SimpleLarge
 */
class SimpleLarge_TypeIntrospectionExample
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SimpleLarge_TypeIntrospectionExample()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SimpleLarge_TypeIntrospectionExample()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SimpleLarge_TypeIntrospectionExample that will be copied.
     */
    eProsima_user_DllExport SimpleLarge_TypeIntrospectionExample(
            const SimpleLarge_TypeIntrospectionExample& x)
    {
                    m_index = x.m_index;

                    m_message = x.m_message;

                    m_points = x.m_points;

                    m_second_message = x.m_second_message;

                    m_some_values = x.m_some_values;

                    m_is_it_not_true_that_true_is_not_true = x.m_is_it_not_true_that_true_is_not_true;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SimpleLarge_TypeIntrospectionExample that will be copied.
     */
    eProsima_user_DllExport SimpleLarge_TypeIntrospectionExample(
            SimpleLarge_TypeIntrospectionExample&& x) noexcept
    {
        m_index = x.m_index;
        m_message = std::move(x.m_message);
        m_points = std::move(x.m_points);
        m_second_message = std::move(x.m_second_message);
        m_some_values = std::move(x.m_some_values);
        m_is_it_not_true_that_true_is_not_true = x.m_is_it_not_true_that_true_is_not_true;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SimpleLarge_TypeIntrospectionExample that will be copied.
     */
    eProsima_user_DllExport SimpleLarge_TypeIntrospectionExample& operator =(
            const SimpleLarge_TypeIntrospectionExample& x)
    {

                    m_index = x.m_index;

                    m_message = x.m_message;

                    m_points = x.m_points;

                    m_second_message = x.m_second_message;

                    m_some_values = x.m_some_values;

                    m_is_it_not_true_that_true_is_not_true = x.m_is_it_not_true_that_true_is_not_true;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SimpleLarge_TypeIntrospectionExample that will be copied.
     */
    eProsima_user_DllExport SimpleLarge_TypeIntrospectionExample& operator =(
            SimpleLarge_TypeIntrospectionExample&& x) noexcept
    {

        m_index = x.m_index;
        m_message = std::move(x.m_message);
        m_points = std::move(x.m_points);
        m_second_message = std::move(x.m_second_message);
        m_some_values = std::move(x.m_some_values);
        m_is_it_not_true_that_true_is_not_true = x.m_is_it_not_true_that_true_is_not_true;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x SimpleLarge_TypeIntrospectionExample object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SimpleLarge_TypeIntrospectionExample& x) const
    {
        return (m_index == x.m_index &&
           m_message == x.m_message &&
           m_points == x.m_points &&
           m_second_message == x.m_second_message &&
           m_some_values == x.m_some_values &&
           m_is_it_not_true_that_true_is_not_true == x.m_is_it_not_true_that_true_is_not_true);
    }

    /*!
     * @brief Comparison operator.
     * @param x SimpleLarge_TypeIntrospectionExample object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SimpleLarge_TypeIntrospectionExample& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member index
     * @param _index New value for member index
     */
    eProsima_user_DllExport void index(
            uint32_t _index)
    {
        m_index = _index;
    }

    /*!
     * @brief This function returns the value of member index
     * @return Value of member index
     */
    eProsima_user_DllExport uint32_t index() const
    {
        return m_index;
    }

    /*!
     * @brief This function returns a reference to member index
     * @return Reference to member index
     */
    eProsima_user_DllExport uint32_t& index()
    {
        return m_index;
    }


    /*!
     * @brief This function copies the value in member message
     * @param _message New value to be copied in member message
     */
    eProsima_user_DllExport void message(
            const std::string& _message)
    {
        m_message = _message;
    }

    /*!
     * @brief This function moves the value in member message
     * @param _message New value to be moved in member message
     */
    eProsima_user_DllExport void message(
            std::string&& _message)
    {
        m_message = std::move(_message);
    }

    /*!
     * @brief This function returns a constant reference to member message
     * @return Constant reference to member message
     */
    eProsima_user_DllExport const std::string& message() const
    {
        return m_message;
    }

    /*!
     * @brief This function returns a reference to member message
     * @return Reference to member message
     */
    eProsima_user_DllExport std::string& message()
    {
        return m_message;
    }


    /*!
     * @brief This function copies the value in member points
     * @param _points New value to be copied in member points
     */
    eProsima_user_DllExport void points(
            const std::array<int32_t, 3>& _points)
    {
        m_points = _points;
    }

    /*!
     * @brief This function moves the value in member points
     * @param _points New value to be moved in member points
     */
    eProsima_user_DllExport void points(
            std::array<int32_t, 3>&& _points)
    {
        m_points = std::move(_points);
    }

    /*!
     * @brief This function returns a constant reference to member points
     * @return Constant reference to member points
     */
    eProsima_user_DllExport const std::array<int32_t, 3>& points() const
    {
        return m_points;
    }

    /*!
     * @brief This function returns a reference to member points
     * @return Reference to member points
     */
    eProsima_user_DllExport std::array<int32_t, 3>& points()
    {
        return m_points;
    }


    /*!
     * @brief This function copies the value in member second_message
     * @param _second_message New value to be copied in member second_message
     */
    eProsima_user_DllExport void second_message(
            const std::string& _second_message)
    {
        m_second_message = _second_message;
    }

    /*!
     * @brief This function moves the value in member second_message
     * @param _second_message New value to be moved in member second_message
     */
    eProsima_user_DllExport void second_message(
            std::string&& _second_message)
    {
        m_second_message = std::move(_second_message);
    }

    /*!
     * @brief This function returns a constant reference to member second_message
     * @return Constant reference to member second_message
     */
    eProsima_user_DllExport const std::string& second_message() const
    {
        return m_second_message;
    }

    /*!
     * @brief This function returns a reference to member second_message
     * @return Reference to member second_message
     */
    eProsima_user_DllExport std::string& second_message()
    {
        return m_second_message;
    }


    /*!
     * @brief This function copies the value in member some_values
     * @param _some_values New value to be copied in member some_values
     */
    eProsima_user_DllExport void some_values(
            const std::vector<int16_t>& _some_values)
    {
        m_some_values = _some_values;
    }

    /*!
     * @brief This function moves the value in member some_values
     * @param _some_values New value to be moved in member some_values
     */
    eProsima_user_DllExport void some_values(
            std::vector<int16_t>&& _some_values)
    {
        m_some_values = std::move(_some_values);
    }

    /*!
     * @brief This function returns a constant reference to member some_values
     * @return Constant reference to member some_values
     */
    eProsima_user_DllExport const std::vector<int16_t>& some_values() const
    {
        return m_some_values;
    }

    /*!
     * @brief This function returns a reference to member some_values
     * @return Reference to member some_values
     */
    eProsima_user_DllExport std::vector<int16_t>& some_values()
    {
        return m_some_values;
    }


    /*!
     * @brief This function sets a value in member is_it_not_true_that_true_is_not_true
     * @param _is_it_not_true_that_true_is_not_true New value for member is_it_not_true_that_true_is_not_true
     */
    eProsima_user_DllExport void is_it_not_true_that_true_is_not_true(
            bool _is_it_not_true_that_true_is_not_true)
    {
        m_is_it_not_true_that_true_is_not_true = _is_it_not_true_that_true_is_not_true;
    }

    /*!
     * @brief This function returns the value of member is_it_not_true_that_true_is_not_true
     * @return Value of member is_it_not_true_that_true_is_not_true
     */
    eProsima_user_DllExport bool is_it_not_true_that_true_is_not_true() const
    {
        return m_is_it_not_true_that_true_is_not_true;
    }

    /*!
     * @brief This function returns a reference to member is_it_not_true_that_true_is_not_true
     * @return Reference to member is_it_not_true_that_true_is_not_true
     */
    eProsima_user_DllExport bool& is_it_not_true_that_true_is_not_true()
    {
        return m_is_it_not_true_that_true_is_not_true;
    }



private:

    uint32_t m_index{0};
    std::string m_message;
    std::array<int32_t, 3> m_points{0};
    std::string m_second_message;
    std::vector<int16_t> m_some_values;
    bool m_is_it_not_true_that_true_is_not_true{false};

};

#endif // _FAST_DDS_GENERATED_SIMPLELARGE_HPP_


