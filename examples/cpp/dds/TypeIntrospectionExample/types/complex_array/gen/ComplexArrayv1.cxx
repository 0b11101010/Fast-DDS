// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ComplexArray.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ComplexArray.h"

#if FASTCDR_VERSION_MAJOR == 1

#include "ComplexArrayTypeObject.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

namespace helper { namespace internal {

enum class Size {
    UInt8,
    UInt16,
    UInt32,
    UInt64,
};

constexpr Size get_size(int s) {
    return (s <= 8 ) ? Size::UInt8:
           (s <= 16) ? Size::UInt16:
           (s <= 32) ? Size::UInt32: Size::UInt64;
}

template<Size s>
struct FindTypeH;

template<>
struct FindTypeH<Size::UInt8> {
    using type = std::uint8_t;
};

template<>
struct FindTypeH<Size::UInt16> {
    using type = std::uint16_t;
};

template<>
struct FindTypeH<Size::UInt32> {
    using type = std::uint32_t;
};

template<>
struct FindTypeH<Size::UInt64> {
    using type = std::uint64_t;
};
}

template<int S>
struct FindType {
    using type = typename internal::FindTypeH<internal::get_size(S)>::type;
};
}

#define ComplexArray_TypeIntrospectionExample_max_cdr_typesize 592ULL;
#define InternalArrayPoints_TypeIntrospectionExample_max_cdr_typesize 16ULL;
#define InternalArrayMessage_TypeIntrospectionExample_max_cdr_typesize 264ULL;




InternalArrayPoints_TypeIntrospectionExample::InternalArrayPoints_TypeIntrospectionExample()
{
    // long m_x_member
    m_x_member = 0;
    // long m_y_member
    m_y_member = 0;
    // long m_z_member
    m_z_member = 0;

    // Just to register all known types
    registerComplexArrayTypes();
}

InternalArrayPoints_TypeIntrospectionExample::~InternalArrayPoints_TypeIntrospectionExample()
{
}

InternalArrayPoints_TypeIntrospectionExample::InternalArrayPoints_TypeIntrospectionExample(
        const InternalArrayPoints_TypeIntrospectionExample& x)
{
    m_x_member = x.m_x_member;


    m_y_member = x.m_y_member;


    m_z_member = x.m_z_member;

}

InternalArrayPoints_TypeIntrospectionExample::InternalArrayPoints_TypeIntrospectionExample(
        InternalArrayPoints_TypeIntrospectionExample&& x) noexcept
{
    m_x_member = x.m_x_member;


    m_y_member = x.m_y_member;


    m_z_member = x.m_z_member;

}

InternalArrayPoints_TypeIntrospectionExample& InternalArrayPoints_TypeIntrospectionExample::operator =(
        const InternalArrayPoints_TypeIntrospectionExample& x)
{
    m_x_member = x.m_x_member;


    m_y_member = x.m_y_member;


    m_z_member = x.m_z_member;

    return *this;
}

InternalArrayPoints_TypeIntrospectionExample& InternalArrayPoints_TypeIntrospectionExample::operator =(
        InternalArrayPoints_TypeIntrospectionExample&& x) noexcept
{
    m_x_member = x.m_x_member;


    m_y_member = x.m_y_member;


    m_z_member = x.m_z_member;

    return *this;
}

bool InternalArrayPoints_TypeIntrospectionExample::operator ==(
        const InternalArrayPoints_TypeIntrospectionExample& x) const
{
    return (m_x_member == x.m_x_member &&
           m_y_member == x.m_y_member &&
           m_z_member == x.m_z_member);
}

bool InternalArrayPoints_TypeIntrospectionExample::operator !=(
        const InternalArrayPoints_TypeIntrospectionExample& x) const
{
    return !(*this == x);
}

size_t InternalArrayPoints_TypeIntrospectionExample::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return InternalArrayPoints_TypeIntrospectionExample_max_cdr_typesize;
}

size_t InternalArrayPoints_TypeIntrospectionExample::getCdrSerializedSize(
        const InternalArrayPoints_TypeIntrospectionExample& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}


void InternalArrayPoints_TypeIntrospectionExample::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_x_member;

    scdr << m_y_member;

    scdr << m_z_member;

}

void InternalArrayPoints_TypeIntrospectionExample::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_x_member;



    dcdr >> m_y_member;



    dcdr >> m_z_member;


}


bool InternalArrayPoints_TypeIntrospectionExample::isKeyDefined()
{
    return false;
}

void InternalArrayPoints_TypeIntrospectionExample::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

/*!
 * @brief This function sets a value in member x_member
 * @param _x_member New value for member x_member
 */
void InternalArrayPoints_TypeIntrospectionExample::x_member(
        int32_t _x_member)
{
    m_x_member = _x_member;
}

/*!
 * @brief This function returns the value of member x_member
 * @return Value of member x_member
 */
int32_t InternalArrayPoints_TypeIntrospectionExample::x_member() const
{
    return m_x_member;
}

/*!
 * @brief This function returns a reference to member x_member
 * @return Reference to member x_member
 */
int32_t& InternalArrayPoints_TypeIntrospectionExample::x_member()
{
    return m_x_member;
}


/*!
 * @brief This function sets a value in member y_member
 * @param _y_member New value for member y_member
 */
void InternalArrayPoints_TypeIntrospectionExample::y_member(
        int32_t _y_member)
{
    m_y_member = _y_member;
}

/*!
 * @brief This function returns the value of member y_member
 * @return Value of member y_member
 */
int32_t InternalArrayPoints_TypeIntrospectionExample::y_member() const
{
    return m_y_member;
}

/*!
 * @brief This function returns a reference to member y_member
 * @return Reference to member y_member
 */
int32_t& InternalArrayPoints_TypeIntrospectionExample::y_member()
{
    return m_y_member;
}


/*!
 * @brief This function sets a value in member z_member
 * @param _z_member New value for member z_member
 */
void InternalArrayPoints_TypeIntrospectionExample::z_member(
        int32_t _z_member)
{
    m_z_member = _z_member;
}

/*!
 * @brief This function returns the value of member z_member
 * @return Value of member z_member
 */
int32_t InternalArrayPoints_TypeIntrospectionExample::z_member() const
{
    return m_z_member;
}

/*!
 * @brief This function returns a reference to member z_member
 * @return Reference to member z_member
 */
int32_t& InternalArrayPoints_TypeIntrospectionExample::z_member()
{
    return m_z_member;
}





InternalArrayMessage_TypeIntrospectionExample::InternalArrayMessage_TypeIntrospectionExample()
{
    // /type_d() m_message


    // Just to register all known types
    registerComplexArrayTypes();
}

InternalArrayMessage_TypeIntrospectionExample::~InternalArrayMessage_TypeIntrospectionExample()
{
}

InternalArrayMessage_TypeIntrospectionExample::InternalArrayMessage_TypeIntrospectionExample(
        const InternalArrayMessage_TypeIntrospectionExample& x)
{
    m_message = x.m_message;

}

InternalArrayMessage_TypeIntrospectionExample::InternalArrayMessage_TypeIntrospectionExample(
        InternalArrayMessage_TypeIntrospectionExample&& x) noexcept
{
    m_message = std::move(x.m_message);

}

InternalArrayMessage_TypeIntrospectionExample& InternalArrayMessage_TypeIntrospectionExample::operator =(
        const InternalArrayMessage_TypeIntrospectionExample& x)
{
    m_message = x.m_message;

    return *this;
}

InternalArrayMessage_TypeIntrospectionExample& InternalArrayMessage_TypeIntrospectionExample::operator =(
        InternalArrayMessage_TypeIntrospectionExample&& x) noexcept
{
    m_message = std::move(x.m_message);

    return *this;
}

bool InternalArrayMessage_TypeIntrospectionExample::operator ==(
        const InternalArrayMessage_TypeIntrospectionExample& x) const
{
    return (m_message == x.m_message);
}

bool InternalArrayMessage_TypeIntrospectionExample::operator !=(
        const InternalArrayMessage_TypeIntrospectionExample& x) const
{
    return !(*this == x);
}

size_t InternalArrayMessage_TypeIntrospectionExample::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return InternalArrayMessage_TypeIntrospectionExample_max_cdr_typesize;
}

size_t InternalArrayMessage_TypeIntrospectionExample::getCdrSerializedSize(
        const InternalArrayMessage_TypeIntrospectionExample& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;


    return current_alignment - initial_alignment;
}


void InternalArrayMessage_TypeIntrospectionExample::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_message.c_str();

}

void InternalArrayMessage_TypeIntrospectionExample::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_message;


}


bool InternalArrayMessage_TypeIntrospectionExample::isKeyDefined()
{
    return false;
}

void InternalArrayMessage_TypeIntrospectionExample::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void InternalArrayMessage_TypeIntrospectionExample::message(
        const std::string& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void InternalArrayMessage_TypeIntrospectionExample::message(
        std::string&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::string& InternalArrayMessage_TypeIntrospectionExample::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::string& InternalArrayMessage_TypeIntrospectionExample::message()
{
    return m_message;
}





ComplexArray_TypeIntrospectionExample::ComplexArray_TypeIntrospectionExample()
{
    // unsigned long m_index
    m_index = 0;
    // InternalArrayPoints_TypeIntrospectionExample m_internal_data

    // InternalArrayMessage_TypeIntrospectionExample m_messages


    // Just to register all known types
    registerComplexArrayTypes();
}

ComplexArray_TypeIntrospectionExample::~ComplexArray_TypeIntrospectionExample()
{
}

ComplexArray_TypeIntrospectionExample::ComplexArray_TypeIntrospectionExample(
        const ComplexArray_TypeIntrospectionExample& x)
{
    m_index = x.m_index;


    m_internal_data = x.m_internal_data;


    m_messages = x.m_messages;

}

ComplexArray_TypeIntrospectionExample::ComplexArray_TypeIntrospectionExample(
        ComplexArray_TypeIntrospectionExample&& x) noexcept
{
    m_index = x.m_index;


    m_internal_data = std::move(x.m_internal_data);


    m_messages = std::move(x.m_messages);

}

ComplexArray_TypeIntrospectionExample& ComplexArray_TypeIntrospectionExample::operator =(
        const ComplexArray_TypeIntrospectionExample& x)
{
    m_index = x.m_index;


    m_internal_data = x.m_internal_data;


    m_messages = x.m_messages;

    return *this;
}

ComplexArray_TypeIntrospectionExample& ComplexArray_TypeIntrospectionExample::operator =(
        ComplexArray_TypeIntrospectionExample&& x) noexcept
{
    m_index = x.m_index;


    m_internal_data = std::move(x.m_internal_data);


    m_messages = std::move(x.m_messages);

    return *this;
}

bool ComplexArray_TypeIntrospectionExample::operator ==(
        const ComplexArray_TypeIntrospectionExample& x) const
{
    return (m_index == x.m_index &&
           m_internal_data == x.m_internal_data &&
           m_messages == x.m_messages);
}

bool ComplexArray_TypeIntrospectionExample::operator !=(
        const ComplexArray_TypeIntrospectionExample& x) const
{
    return !(*this == x);
}

size_t ComplexArray_TypeIntrospectionExample::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return ComplexArray_TypeIntrospectionExample_max_cdr_typesize;
}

size_t ComplexArray_TypeIntrospectionExample::getCdrSerializedSize(
        const ComplexArray_TypeIntrospectionExample& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    for(size_t a = 0; a < data.internal_data().size(); ++a)
    {
            current_alignment += InternalArrayPoints_TypeIntrospectionExample::getCdrSerializedSize(data.internal_data().at(a), current_alignment);

    }




    for(size_t a = 0; a < data.messages().size(); ++a)
    {
            current_alignment += InternalArrayMessage_TypeIntrospectionExample::getCdrSerializedSize(data.messages().at(a), current_alignment);

    }



    return current_alignment - initial_alignment;
}


void ComplexArray_TypeIntrospectionExample::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_index;

    scdr << m_internal_data;


    scdr << m_messages;


}

void ComplexArray_TypeIntrospectionExample::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_index;



    dcdr >> m_internal_data;



    dcdr >> m_messages;


}


bool ComplexArray_TypeIntrospectionExample::isKeyDefined()
{
    return false;
}

void ComplexArray_TypeIntrospectionExample::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void ComplexArray_TypeIntrospectionExample::index(
        uint32_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint32_t ComplexArray_TypeIntrospectionExample::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint32_t& ComplexArray_TypeIntrospectionExample::index()
{
    return m_index;
}


/*!
 * @brief This function copies the value in member internal_data
 * @param _internal_data New value to be copied in member internal_data
 */
void ComplexArray_TypeIntrospectionExample::internal_data(
        const std::array<InternalArrayPoints_TypeIntrospectionExample, 3>& _internal_data)
{
    m_internal_data = _internal_data;
}

/*!
 * @brief This function moves the value in member internal_data
 * @param _internal_data New value to be moved in member internal_data
 */
void ComplexArray_TypeIntrospectionExample::internal_data(
        std::array<InternalArrayPoints_TypeIntrospectionExample, 3>&& _internal_data)
{
    m_internal_data = std::move(_internal_data);
}

/*!
 * @brief This function returns a constant reference to member internal_data
 * @return Constant reference to member internal_data
 */
const std::array<InternalArrayPoints_TypeIntrospectionExample, 3>& ComplexArray_TypeIntrospectionExample::internal_data() const
{
    return m_internal_data;
}

/*!
 * @brief This function returns a reference to member internal_data
 * @return Reference to member internal_data
 */
std::array<InternalArrayPoints_TypeIntrospectionExample, 3>& ComplexArray_TypeIntrospectionExample::internal_data()
{
    return m_internal_data;
}


/*!
 * @brief This function copies the value in member messages
 * @param _messages New value to be copied in member messages
 */
void ComplexArray_TypeIntrospectionExample::messages(
        const std::array<InternalArrayMessage_TypeIntrospectionExample, 2>& _messages)
{
    m_messages = _messages;
}

/*!
 * @brief This function moves the value in member messages
 * @param _messages New value to be moved in member messages
 */
void ComplexArray_TypeIntrospectionExample::messages(
        std::array<InternalArrayMessage_TypeIntrospectionExample, 2>&& _messages)
{
    m_messages = std::move(_messages);
}

/*!
 * @brief This function returns a constant reference to member messages
 * @return Constant reference to member messages
 */
const std::array<InternalArrayMessage_TypeIntrospectionExample, 2>& ComplexArray_TypeIntrospectionExample::messages() const
{
    return m_messages;
}

/*!
 * @brief This function returns a reference to member messages
 * @return Reference to member messages
 */
std::array<InternalArrayMessage_TypeIntrospectionExample, 2>& ComplexArray_TypeIntrospectionExample::messages()
{
    return m_messages;
}




#endif // FASTCDR_VERSION_MAJOR == 1
