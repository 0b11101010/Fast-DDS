// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DataTestTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "DataTestTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "DataTest.hpp"


using namespace eprosima::fastdds::dds::xtypes;

void register_DataTest_type_objects()
{
    static std::once_flag once_flag;
    std::call_once(once_flag, []()
            {
                register_PrimitivesStruct_TypeIntrospectionExample_type_identifier();

                register_AllStruct_TypeIntrospectionExample_type_identifier();

                register_DataTest_TypeIntrospectionExample_type_identifier();

            });
}

void register_PrimitivesStruct_TypeIntrospectionExample_type_identifier()
{
    {
        StructTypeFlag struct_flags_PrimitivesStruct_TypeIntrospectionExample = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_PrimitivesStruct_TypeIntrospectionExample;
        TypeIdentifierPair type_ids_PrimitivesStruct_TypeIntrospectionExample;
        QualifiedTypeName type_name_PrimitivesStruct_TypeIntrospectionExample = "PrimitivesStruct_TypeIntrospectionExample";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_PrimitivesStruct_TypeIntrospectionExample;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_PrimitivesStruct_TypeIntrospectionExample;
        CompleteTypeDetail detail_PrimitivesStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_PrimitivesStruct_TypeIntrospectionExample, ann_custom_PrimitivesStruct_TypeIntrospectionExample, type_name_PrimitivesStruct_TypeIntrospectionExample.to_string());
        CompleteStructHeader header_PrimitivesStruct_TypeIntrospectionExample;
        header_PrimitivesStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_PrimitivesStruct_TypeIntrospectionExample);
        CompleteStructMemberSeq member_seq_PrimitivesStruct_TypeIntrospectionExample;
        {
            return_code_PrimitivesStruct_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_PrimitivesStruct_TypeIntrospectionExample);

            if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_bool = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_bool;
            MemberId member_id_my_bool = 0x00000000;
            if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_bool = TypeObjectUtils::build_common_struct_member(member_id_my_bool, member_flags_my_bool, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_bool = TypeObjectUtils::build_common_struct_member(member_id_my_bool, member_flags_my_bool, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_bool member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_bool = "my_bool";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_bool;
            ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_my_bool = TypeObjectUtils::build_complete_member_detail(name_my_bool, member_ann_builtin_my_bool, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
            CompleteStructMember member_my_bool = TypeObjectUtils::build_complete_struct_member(common_my_bool, detail_my_bool);
            TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_bool);
        }
        {
            return_code_PrimitivesStruct_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_byte", type_ids_PrimitivesStruct_TypeIntrospectionExample);

            if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_octet = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_octet;
            MemberId member_id_my_octet = 0x00000001;
            if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_octet = TypeObjectUtils::build_common_struct_member(member_id_my_octet, member_flags_my_octet, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_octet = TypeObjectUtils::build_common_struct_member(member_id_my_octet, member_flags_my_octet, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_octet member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_octet = "my_octet";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_octet;
            ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_my_octet = TypeObjectUtils::build_complete_member_detail(name_my_octet, member_ann_builtin_my_octet, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
            CompleteStructMember member_my_octet = TypeObjectUtils::build_complete_struct_member(common_my_octet, detail_my_octet);
            TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_octet);
        }
        {
            return_code_PrimitivesStruct_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_char", type_ids_PrimitivesStruct_TypeIntrospectionExample);

            if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_char Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_char = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_char;
            MemberId member_id_my_char = 0x00000002;
            if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_char = TypeObjectUtils::build_common_struct_member(member_id_my_char, member_flags_my_char, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_char = TypeObjectUtils::build_common_struct_member(member_id_my_char, member_flags_my_char, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_char member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_char = "my_char";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_char;
            ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_my_char = TypeObjectUtils::build_complete_member_detail(name_my_char, member_ann_builtin_my_char, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
            CompleteStructMember member_my_char = TypeObjectUtils::build_complete_struct_member(common_my_char, detail_my_char);
            TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_char);
        }
        {
            return_code_PrimitivesStruct_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_wchar_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

            if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_wchar Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_wchar = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_wchar;
            MemberId member_id_my_wchar = 0x00000003;
            if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_wchar = TypeObjectUtils::build_common_struct_member(member_id_my_wchar, member_flags_my_wchar, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_wchar = TypeObjectUtils::build_common_struct_member(member_id_my_wchar, member_flags_my_wchar, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_wchar member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_wchar = "my_wchar";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_wchar;
            ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_my_wchar = TypeObjectUtils::build_complete_member_detail(name_my_wchar, member_ann_builtin_my_wchar, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
            CompleteStructMember member_my_wchar = TypeObjectUtils::build_complete_struct_member(common_my_wchar, detail_my_wchar);
            TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_wchar);
        }
        {
            return_code_PrimitivesStruct_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

            if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_long Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_long = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_long;
            MemberId member_id_my_long = 0x00000004;
            if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_long = TypeObjectUtils::build_common_struct_member(member_id_my_long, member_flags_my_long, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_long = TypeObjectUtils::build_common_struct_member(member_id_my_long, member_flags_my_long, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_long member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_long = "my_long";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_long;
            ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_my_long = TypeObjectUtils::build_complete_member_detail(name_my_long, member_ann_builtin_my_long, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
            CompleteStructMember member_my_long = TypeObjectUtils::build_complete_struct_member(common_my_long, detail_my_long);
            TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_long);
        }
        {
            return_code_PrimitivesStruct_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

            if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_ulong Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_ulong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_ulong;
            MemberId member_id_my_ulong = 0x00000005;
            if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_ulong = TypeObjectUtils::build_common_struct_member(member_id_my_ulong, member_flags_my_ulong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_ulong = TypeObjectUtils::build_common_struct_member(member_id_my_ulong, member_flags_my_ulong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_ulong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_ulong = "my_ulong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_ulong;
            ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_my_ulong = TypeObjectUtils::build_complete_member_detail(name_my_ulong, member_ann_builtin_my_ulong, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
            CompleteStructMember member_my_ulong = TypeObjectUtils::build_complete_struct_member(common_my_ulong, detail_my_ulong);
            TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_ulong);
        }
        {
            return_code_PrimitivesStruct_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int8_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

            if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_int8 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_int8 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_int8;
            MemberId member_id_my_int8 = 0x00000006;
            if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_int8 = TypeObjectUtils::build_common_struct_member(member_id_my_int8, member_flags_my_int8, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_int8 = TypeObjectUtils::build_common_struct_member(member_id_my_int8, member_flags_my_int8, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_int8 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_int8 = "my_int8";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_int8;
            ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_my_int8 = TypeObjectUtils::build_complete_member_detail(name_my_int8, member_ann_builtin_my_int8, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
            CompleteStructMember member_my_int8 = TypeObjectUtils::build_complete_struct_member(common_my_int8, detail_my_int8);
            TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_int8);
        }
        {
            return_code_PrimitivesStruct_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint8_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

            if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_uint8 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_uint8 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_uint8;
            MemberId member_id_my_uint8 = 0x00000007;
            if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_uint8 = TypeObjectUtils::build_common_struct_member(member_id_my_uint8, member_flags_my_uint8, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_uint8 = TypeObjectUtils::build_common_struct_member(member_id_my_uint8, member_flags_my_uint8, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_uint8 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_uint8 = "my_uint8";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_uint8;
            ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_my_uint8 = TypeObjectUtils::build_complete_member_detail(name_my_uint8, member_ann_builtin_my_uint8, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
            CompleteStructMember member_my_uint8 = TypeObjectUtils::build_complete_struct_member(common_my_uint8, detail_my_uint8);
            TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_uint8);
        }
        {
            return_code_PrimitivesStruct_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int16_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

            if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_short Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_short = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_short;
            MemberId member_id_my_short = 0x00000008;
            if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_short = TypeObjectUtils::build_common_struct_member(member_id_my_short, member_flags_my_short, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_short = TypeObjectUtils::build_common_struct_member(member_id_my_short, member_flags_my_short, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_short member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_short = "my_short";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_short;
            ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_my_short = TypeObjectUtils::build_complete_member_detail(name_my_short, member_ann_builtin_my_short, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
            CompleteStructMember member_my_short = TypeObjectUtils::build_complete_struct_member(common_my_short, detail_my_short);
            TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_short);
        }
        {
            return_code_PrimitivesStruct_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint16_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

            if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_ushort Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_ushort = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_ushort;
            MemberId member_id_my_ushort = 0x00000009;
            if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_ushort = TypeObjectUtils::build_common_struct_member(member_id_my_ushort, member_flags_my_ushort, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_ushort = TypeObjectUtils::build_common_struct_member(member_id_my_ushort, member_flags_my_ushort, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_ushort member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_ushort = "my_ushort";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_ushort;
            ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_my_ushort = TypeObjectUtils::build_complete_member_detail(name_my_ushort, member_ann_builtin_my_ushort, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
            CompleteStructMember member_my_ushort = TypeObjectUtils::build_complete_struct_member(common_my_ushort, detail_my_ushort);
            TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_ushort);
        }
        {
            return_code_PrimitivesStruct_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int64_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

            if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_longlong Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_longlong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_longlong;
            MemberId member_id_my_longlong = 0x0000000a;
            if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_longlong = TypeObjectUtils::build_common_struct_member(member_id_my_longlong, member_flags_my_longlong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_longlong = TypeObjectUtils::build_common_struct_member(member_id_my_longlong, member_flags_my_longlong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_longlong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_longlong = "my_longlong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_longlong;
            ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_my_longlong = TypeObjectUtils::build_complete_member_detail(name_my_longlong, member_ann_builtin_my_longlong, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
            CompleteStructMember member_my_longlong = TypeObjectUtils::build_complete_struct_member(common_my_longlong, detail_my_longlong);
            TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_longlong);
        }
        {
            return_code_PrimitivesStruct_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

            if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_ulonglong Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_ulonglong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_ulonglong;
            MemberId member_id_my_ulonglong = 0x0000000b;
            if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_ulonglong = TypeObjectUtils::build_common_struct_member(member_id_my_ulonglong, member_flags_my_ulonglong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_ulonglong = TypeObjectUtils::build_common_struct_member(member_id_my_ulonglong, member_flags_my_ulonglong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_ulonglong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_ulonglong = "my_ulonglong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_ulonglong;
            ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_my_ulonglong = TypeObjectUtils::build_complete_member_detail(name_my_ulonglong, member_ann_builtin_my_ulonglong, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
            CompleteStructMember member_my_ulonglong = TypeObjectUtils::build_complete_struct_member(common_my_ulonglong, detail_my_ulonglong);
            TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_ulonglong);
        }
        {
            return_code_PrimitivesStruct_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_PrimitivesStruct_TypeIntrospectionExample);

            if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_float Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_float = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_float;
            MemberId member_id_my_float = 0x0000000c;
            if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_float = TypeObjectUtils::build_common_struct_member(member_id_my_float, member_flags_my_float, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_float = TypeObjectUtils::build_common_struct_member(member_id_my_float, member_flags_my_float, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_float member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_float = "my_float";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_float;
            ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_my_float = TypeObjectUtils::build_complete_member_detail(name_my_float, member_ann_builtin_my_float, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
            CompleteStructMember member_my_float = TypeObjectUtils::build_complete_struct_member(common_my_float, detail_my_float);
            TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_float);
        }
        {
            return_code_PrimitivesStruct_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_PrimitivesStruct_TypeIntrospectionExample);

            if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_double Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_double = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_double;
            MemberId member_id_my_double = 0x0000000d;
            if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_double = TypeObjectUtils::build_common_struct_member(member_id_my_double, member_flags_my_double, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_double = TypeObjectUtils::build_common_struct_member(member_id_my_double, member_flags_my_double, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_double member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_double = "my_double";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_double;
            ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_my_double = TypeObjectUtils::build_complete_member_detail(name_my_double, member_ann_builtin_my_double, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
            CompleteStructMember member_my_double = TypeObjectUtils::build_complete_struct_member(common_my_double, detail_my_double);
            TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_double);
        }
        {
            return_code_PrimitivesStruct_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_longdouble", type_ids_PrimitivesStruct_TypeIntrospectionExample);

            if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_longdouble Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_longdouble = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_longdouble;
            MemberId member_id_my_longdouble = 0x0000000e;
            if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_longdouble = TypeObjectUtils::build_common_struct_member(member_id_my_longdouble, member_flags_my_longdouble, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_longdouble = TypeObjectUtils::build_common_struct_member(member_id_my_longdouble, member_flags_my_longdouble, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_longdouble member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_longdouble = "my_longdouble";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_longdouble;
            ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_my_longdouble = TypeObjectUtils::build_complete_member_detail(name_my_longdouble, member_ann_builtin_my_longdouble, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
            CompleteStructMember member_my_longdouble = TypeObjectUtils::build_complete_struct_member(common_my_longdouble, detail_my_longdouble);
            TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_longdouble);
        }
        CompleteStructType struct_type_PrimitivesStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_type(struct_flags_PrimitivesStruct_TypeIntrospectionExample, header_PrimitivesStruct_TypeIntrospectionExample, member_seq_PrimitivesStruct_TypeIntrospectionExample);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_PrimitivesStruct_TypeIntrospectionExample, type_name_PrimitivesStruct_TypeIntrospectionExample.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "PrimitivesStruct_TypeIntrospectionExample already registered in TypeObjectRegistry for a different type.");
        }
        return_code_PrimitivesStruct_TypeIntrospectionExample =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "PrimitivesStruct_TypeIntrospectionExample", type_ids_PrimitivesStruct_TypeIntrospectionExample);
        if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "PrimitivesStruct_TypeIntrospectionExample: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_AllStruct_TypeIntrospectionExample_type_identifier()
{
    {
        StructTypeFlag struct_flags_AllStruct_TypeIntrospectionExample = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_AllStruct_TypeIntrospectionExample;
        TypeIdentifierPair type_ids_AllStruct_TypeIntrospectionExample;
        return_code_AllStruct_TypeIntrospectionExample =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "PrimitivesStruct_TypeIntrospectionExample", type_ids_AllStruct_TypeIntrospectionExample);

        if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
        {
            {
                StructTypeFlag struct_flags_PrimitivesStruct_TypeIntrospectionExample = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                        false, false);
                ReturnCode_t return_code_PrimitivesStruct_TypeIntrospectionExample;
                TypeIdentifierPair type_ids_PrimitivesStruct_TypeIntrospectionExample;
                QualifiedTypeName type_name_PrimitivesStruct_TypeIntrospectionExample = "PrimitivesStruct_TypeIntrospectionExample";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_PrimitivesStruct_TypeIntrospectionExample;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_PrimitivesStruct_TypeIntrospectionExample;
                CompleteTypeDetail detail_PrimitivesStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_PrimitivesStruct_TypeIntrospectionExample, ann_custom_PrimitivesStruct_TypeIntrospectionExample, type_name_PrimitivesStruct_TypeIntrospectionExample.to_string());
                CompleteStructHeader header_PrimitivesStruct_TypeIntrospectionExample;
                header_PrimitivesStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_PrimitivesStruct_TypeIntrospectionExample);
                CompleteStructMemberSeq member_seq_PrimitivesStruct_TypeIntrospectionExample;
                {
                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_bool", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    StructMemberFlag member_flags_my_bool = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    CommonStructMember common_my_bool;
                    MemberId member_id_my_bool = 0x00000000;
                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_bool = TypeObjectUtils::build_common_struct_member(member_id_my_bool, member_flags_my_bool, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_bool = TypeObjectUtils::build_common_struct_member(member_id_my_bool, member_flags_my_bool, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure my_bool member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name_my_bool = "my_bool";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_bool;
                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                    CompleteMemberDetail detail_my_bool = TypeObjectUtils::build_complete_member_detail(name_my_bool, member_ann_builtin_my_bool, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                    CompleteStructMember member_my_bool = TypeObjectUtils::build_complete_struct_member(common_my_bool, detail_my_bool);
                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_bool);
                }
                {
                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_byte", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "my_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    StructMemberFlag member_flags_my_octet = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    CommonStructMember common_my_octet;
                    MemberId member_id_my_octet = 0x00000001;
                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_octet = TypeObjectUtils::build_common_struct_member(member_id_my_octet, member_flags_my_octet, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_octet = TypeObjectUtils::build_common_struct_member(member_id_my_octet, member_flags_my_octet, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure my_octet member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name_my_octet = "my_octet";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_octet;
                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                    CompleteMemberDetail detail_my_octet = TypeObjectUtils::build_complete_member_detail(name_my_octet, member_ann_builtin_my_octet, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                    CompleteStructMember member_my_octet = TypeObjectUtils::build_complete_struct_member(common_my_octet, detail_my_octet);
                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_octet);
                }
                {
                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_char", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "my_char Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    StructMemberFlag member_flags_my_char = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    CommonStructMember common_my_char;
                    MemberId member_id_my_char = 0x00000002;
                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_char = TypeObjectUtils::build_common_struct_member(member_id_my_char, member_flags_my_char, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_char = TypeObjectUtils::build_common_struct_member(member_id_my_char, member_flags_my_char, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure my_char member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name_my_char = "my_char";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_char;
                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                    CompleteMemberDetail detail_my_char = TypeObjectUtils::build_complete_member_detail(name_my_char, member_ann_builtin_my_char, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                    CompleteStructMember member_my_char = TypeObjectUtils::build_complete_struct_member(common_my_char, detail_my_char);
                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_char);
                }
                {
                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_wchar_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "my_wchar Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    StructMemberFlag member_flags_my_wchar = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    CommonStructMember common_my_wchar;
                    MemberId member_id_my_wchar = 0x00000003;
                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_wchar = TypeObjectUtils::build_common_struct_member(member_id_my_wchar, member_flags_my_wchar, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_wchar = TypeObjectUtils::build_common_struct_member(member_id_my_wchar, member_flags_my_wchar, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure my_wchar member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name_my_wchar = "my_wchar";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_wchar;
                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                    CompleteMemberDetail detail_my_wchar = TypeObjectUtils::build_complete_member_detail(name_my_wchar, member_ann_builtin_my_wchar, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                    CompleteStructMember member_my_wchar = TypeObjectUtils::build_complete_struct_member(common_my_wchar, detail_my_wchar);
                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_wchar);
                }
                {
                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int32_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "my_long Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    StructMemberFlag member_flags_my_long = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    CommonStructMember common_my_long;
                    MemberId member_id_my_long = 0x00000004;
                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_long = TypeObjectUtils::build_common_struct_member(member_id_my_long, member_flags_my_long, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_long = TypeObjectUtils::build_common_struct_member(member_id_my_long, member_flags_my_long, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure my_long member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name_my_long = "my_long";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_long;
                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                    CompleteMemberDetail detail_my_long = TypeObjectUtils::build_complete_member_detail(name_my_long, member_ann_builtin_my_long, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                    CompleteStructMember member_my_long = TypeObjectUtils::build_complete_struct_member(common_my_long, detail_my_long);
                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_long);
                }
                {
                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_uint32_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "my_ulong Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    StructMemberFlag member_flags_my_ulong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    CommonStructMember common_my_ulong;
                    MemberId member_id_my_ulong = 0x00000005;
                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_ulong = TypeObjectUtils::build_common_struct_member(member_id_my_ulong, member_flags_my_ulong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_ulong = TypeObjectUtils::build_common_struct_member(member_id_my_ulong, member_flags_my_ulong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure my_ulong member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name_my_ulong = "my_ulong";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_ulong;
                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                    CompleteMemberDetail detail_my_ulong = TypeObjectUtils::build_complete_member_detail(name_my_ulong, member_ann_builtin_my_ulong, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                    CompleteStructMember member_my_ulong = TypeObjectUtils::build_complete_struct_member(common_my_ulong, detail_my_ulong);
                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_ulong);
                }
                {
                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int8_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "my_int8 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    StructMemberFlag member_flags_my_int8 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    CommonStructMember common_my_int8;
                    MemberId member_id_my_int8 = 0x00000006;
                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_int8 = TypeObjectUtils::build_common_struct_member(member_id_my_int8, member_flags_my_int8, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_int8 = TypeObjectUtils::build_common_struct_member(member_id_my_int8, member_flags_my_int8, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure my_int8 member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name_my_int8 = "my_int8";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_int8;
                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                    CompleteMemberDetail detail_my_int8 = TypeObjectUtils::build_complete_member_detail(name_my_int8, member_ann_builtin_my_int8, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                    CompleteStructMember member_my_int8 = TypeObjectUtils::build_complete_struct_member(common_my_int8, detail_my_int8);
                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_int8);
                }
                {
                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_uint8_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "my_uint8 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    StructMemberFlag member_flags_my_uint8 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    CommonStructMember common_my_uint8;
                    MemberId member_id_my_uint8 = 0x00000007;
                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_uint8 = TypeObjectUtils::build_common_struct_member(member_id_my_uint8, member_flags_my_uint8, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_uint8 = TypeObjectUtils::build_common_struct_member(member_id_my_uint8, member_flags_my_uint8, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure my_uint8 member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name_my_uint8 = "my_uint8";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_uint8;
                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                    CompleteMemberDetail detail_my_uint8 = TypeObjectUtils::build_complete_member_detail(name_my_uint8, member_ann_builtin_my_uint8, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                    CompleteStructMember member_my_uint8 = TypeObjectUtils::build_complete_struct_member(common_my_uint8, detail_my_uint8);
                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_uint8);
                }
                {
                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int16_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "my_short Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    StructMemberFlag member_flags_my_short = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    CommonStructMember common_my_short;
                    MemberId member_id_my_short = 0x00000008;
                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_short = TypeObjectUtils::build_common_struct_member(member_id_my_short, member_flags_my_short, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_short = TypeObjectUtils::build_common_struct_member(member_id_my_short, member_flags_my_short, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure my_short member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name_my_short = "my_short";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_short;
                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                    CompleteMemberDetail detail_my_short = TypeObjectUtils::build_complete_member_detail(name_my_short, member_ann_builtin_my_short, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                    CompleteStructMember member_my_short = TypeObjectUtils::build_complete_struct_member(common_my_short, detail_my_short);
                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_short);
                }
                {
                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_uint16_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "my_ushort Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    StructMemberFlag member_flags_my_ushort = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    CommonStructMember common_my_ushort;
                    MemberId member_id_my_ushort = 0x00000009;
                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_ushort = TypeObjectUtils::build_common_struct_member(member_id_my_ushort, member_flags_my_ushort, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_ushort = TypeObjectUtils::build_common_struct_member(member_id_my_ushort, member_flags_my_ushort, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure my_ushort member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name_my_ushort = "my_ushort";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_ushort;
                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                    CompleteMemberDetail detail_my_ushort = TypeObjectUtils::build_complete_member_detail(name_my_ushort, member_ann_builtin_my_ushort, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                    CompleteStructMember member_my_ushort = TypeObjectUtils::build_complete_struct_member(common_my_ushort, detail_my_ushort);
                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_ushort);
                }
                {
                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int64_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "my_longlong Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    StructMemberFlag member_flags_my_longlong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    CommonStructMember common_my_longlong;
                    MemberId member_id_my_longlong = 0x0000000a;
                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_longlong = TypeObjectUtils::build_common_struct_member(member_id_my_longlong, member_flags_my_longlong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_longlong = TypeObjectUtils::build_common_struct_member(member_id_my_longlong, member_flags_my_longlong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure my_longlong member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name_my_longlong = "my_longlong";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_longlong;
                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                    CompleteMemberDetail detail_my_longlong = TypeObjectUtils::build_complete_member_detail(name_my_longlong, member_ann_builtin_my_longlong, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                    CompleteStructMember member_my_longlong = TypeObjectUtils::build_complete_struct_member(common_my_longlong, detail_my_longlong);
                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_longlong);
                }
                {
                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_uint64_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "my_ulonglong Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    StructMemberFlag member_flags_my_ulonglong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    CommonStructMember common_my_ulonglong;
                    MemberId member_id_my_ulonglong = 0x0000000b;
                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_ulonglong = TypeObjectUtils::build_common_struct_member(member_id_my_ulonglong, member_flags_my_ulonglong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_ulonglong = TypeObjectUtils::build_common_struct_member(member_id_my_ulonglong, member_flags_my_ulonglong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure my_ulonglong member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name_my_ulonglong = "my_ulonglong";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_ulonglong;
                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                    CompleteMemberDetail detail_my_ulonglong = TypeObjectUtils::build_complete_member_detail(name_my_ulonglong, member_ann_builtin_my_ulonglong, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                    CompleteStructMember member_my_ulonglong = TypeObjectUtils::build_complete_struct_member(common_my_ulonglong, detail_my_ulonglong);
                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_ulonglong);
                }
                {
                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_float", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "my_float Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    StructMemberFlag member_flags_my_float = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    CommonStructMember common_my_float;
                    MemberId member_id_my_float = 0x0000000c;
                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_float = TypeObjectUtils::build_common_struct_member(member_id_my_float, member_flags_my_float, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_float = TypeObjectUtils::build_common_struct_member(member_id_my_float, member_flags_my_float, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure my_float member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name_my_float = "my_float";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_float;
                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                    CompleteMemberDetail detail_my_float = TypeObjectUtils::build_complete_member_detail(name_my_float, member_ann_builtin_my_float, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                    CompleteStructMember member_my_float = TypeObjectUtils::build_complete_struct_member(common_my_float, detail_my_float);
                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_float);
                }
                {
                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_double", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "my_double Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    StructMemberFlag member_flags_my_double = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    CommonStructMember common_my_double;
                    MemberId member_id_my_double = 0x0000000d;
                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_double = TypeObjectUtils::build_common_struct_member(member_id_my_double, member_flags_my_double, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_double = TypeObjectUtils::build_common_struct_member(member_id_my_double, member_flags_my_double, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure my_double member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name_my_double = "my_double";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_double;
                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                    CompleteMemberDetail detail_my_double = TypeObjectUtils::build_complete_member_detail(name_my_double, member_ann_builtin_my_double, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                    CompleteStructMember member_my_double = TypeObjectUtils::build_complete_struct_member(common_my_double, detail_my_double);
                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_double);
                }
                {
                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_longdouble", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "my_longdouble Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    StructMemberFlag member_flags_my_longdouble = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    CommonStructMember common_my_longdouble;
                    MemberId member_id_my_longdouble = 0x0000000e;
                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_longdouble = TypeObjectUtils::build_common_struct_member(member_id_my_longdouble, member_flags_my_longdouble, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_my_longdouble = TypeObjectUtils::build_common_struct_member(member_id_my_longdouble, member_flags_my_longdouble, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure my_longdouble member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name_my_longdouble = "my_longdouble";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_longdouble;
                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                    CompleteMemberDetail detail_my_longdouble = TypeObjectUtils::build_complete_member_detail(name_my_longdouble, member_ann_builtin_my_longdouble, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                    CompleteStructMember member_my_longdouble = TypeObjectUtils::build_complete_struct_member(common_my_longdouble, detail_my_longdouble);
                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_longdouble);
                }
                CompleteStructType struct_type_PrimitivesStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_type(struct_flags_PrimitivesStruct_TypeIntrospectionExample, header_PrimitivesStruct_TypeIntrospectionExample, member_seq_PrimitivesStruct_TypeIntrospectionExample);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_struct_type_object(struct_type_PrimitivesStruct_TypeIntrospectionExample, type_name_PrimitivesStruct_TypeIntrospectionExample.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "PrimitivesStruct_TypeIntrospectionExample already registered in TypeObjectRegistry for a different type.");
                }
                return_code_PrimitivesStruct_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "PrimitivesStruct_TypeIntrospectionExample", type_ids_PrimitivesStruct_TypeIntrospectionExample);
                if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "PrimitivesStruct_TypeIntrospectionExample: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
        }
        QualifiedTypeName type_name_AllStruct_TypeIntrospectionExample = "AllStruct_TypeIntrospectionExample";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_AllStruct_TypeIntrospectionExample;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_AllStruct_TypeIntrospectionExample;
        CompleteTypeDetail detail_AllStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_AllStruct_TypeIntrospectionExample, ann_custom_AllStruct_TypeIntrospectionExample, type_name_AllStruct_TypeIntrospectionExample.to_string());
        CompleteStructHeader header_AllStruct_TypeIntrospectionExample;
        if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d())
        {
            header_AllStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_header(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1(), detail_AllStruct_TypeIntrospectionExample);
        }
        else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d())
        {
            header_AllStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_header(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2(), detail_AllStruct_TypeIntrospectionExample);
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "AllStruct_TypeIntrospectionExample Structure: base_type TypeIdentifier registered in TypeObjectRegistry is inconsistent.");
            return;
        }
        CompleteStructMemberSeq member_seq_AllStruct_TypeIntrospectionExample;
        {
            return_code_AllStruct_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Unknown String kind.");
                    return;
                }
                return_code_AllStruct_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_string;
            MemberId member_id_my_string = 0x0000000f;
            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_string = TypeObjectUtils::build_common_struct_member(member_id_my_string, member_flags_my_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_string = TypeObjectUtils::build_common_struct_member(member_id_my_string, member_flags_my_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_string = "my_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_string;
            ann_custom_AllStruct_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_my_string = TypeObjectUtils::build_complete_member_detail(name_my_string, member_ann_builtin_my_string, ann_custom_AllStruct_TypeIntrospectionExample);
            CompleteStructMember member_my_string = TypeObjectUtils::build_complete_struct_member(common_my_string, detail_my_string);
            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_string);
        }
        {
            return_code_AllStruct_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_wstring_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_wstring_unbounded("TI_STRING16_SMALL");
                if (type_id_kind_anonymous_wstring_unbounded == "TI_STRING16_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_wstring_unbounded", true))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_wstring_unbounded == "TI_STRING16_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_wstring_unbounded", true))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded: Unknown WString kind.");
                    return;
                }
                return_code_AllStruct_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded: Given WString TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_wstring;
            MemberId member_id_my_wstring = 0x00000010;
            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_wstring = TypeObjectUtils::build_common_struct_member(member_id_my_wstring, member_flags_my_wstring, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_wstring = TypeObjectUtils::build_common_struct_member(member_id_my_wstring, member_flags_my_wstring, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_wstring member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_wstring = "my_wstring";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_wstring;
            ann_custom_AllStruct_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_my_wstring = TypeObjectUtils::build_complete_member_detail(name_my_wstring, member_ann_builtin_my_wstring, ann_custom_AllStruct_TypeIntrospectionExample);
            CompleteStructMember member_my_wstring = TypeObjectUtils::build_complete_struct_member(common_my_wstring, detail_my_wstring);
            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_wstring);
        }
        {
            return_code_AllStruct_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_41925", type_ids_AllStruct_TypeIntrospectionExample);

            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_string_41925("TI_STRING8_LARGE");
                if (type_id_kind_anonymous_string_41925 == "TI_STRING8_SMALL")
                {
                    SBound bound = static_cast<SBound>(41925);
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_41925"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_41925 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_string_41925 == "TI_STRING8_LARGE")
                {
                    LBound bound = 41925;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_41925"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_41925 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_41925: Unknown String kind.");
                    return;
                }
                return_code_AllStruct_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_41925", type_ids_AllStruct_TypeIntrospectionExample);
                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_41925: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_bounded_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_bounded_string;
            MemberId member_id_my_bounded_string = 0x00000011;
            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_bounded_string = TypeObjectUtils::build_common_struct_member(member_id_my_bounded_string, member_flags_my_bounded_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_bounded_string = TypeObjectUtils::build_common_struct_member(member_id_my_bounded_string, member_flags_my_bounded_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_bounded_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_bounded_string = "my_bounded_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_bounded_string;
            ann_custom_AllStruct_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_my_bounded_string = TypeObjectUtils::build_complete_member_detail(name_my_bounded_string, member_ann_builtin_my_bounded_string, ann_custom_AllStruct_TypeIntrospectionExample);
            CompleteStructMember member_my_bounded_string = TypeObjectUtils::build_complete_struct_member(common_my_bounded_string, detail_my_bounded_string);
            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_bounded_string);
        }
        {
            return_code_AllStruct_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_wstring_20925", type_ids_AllStruct_TypeIntrospectionExample);

            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_wstring_20925("TI_STRING16_LARGE");
                if (type_id_kind_anonymous_wstring_20925 == "TI_STRING16_SMALL")
                {
                    SBound bound = static_cast<SBound>(20925);
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_wstring_20925", true))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_wstring_20925 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_wstring_20925 == "TI_STRING16_LARGE")
                {
                    LBound bound = 20925;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_wstring_20925", true))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_wstring_20925 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_20925: Unknown WString kind.");
                    return;
                }
                return_code_AllStruct_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_20925", type_ids_AllStruct_TypeIntrospectionExample);
                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_20925: Given WString TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_bounded_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_bounded_wstring;
            MemberId member_id_my_bounded_wstring = 0x00000012;
            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_bounded_wstring = TypeObjectUtils::build_common_struct_member(member_id_my_bounded_wstring, member_flags_my_bounded_wstring, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_bounded_wstring = TypeObjectUtils::build_common_struct_member(member_id_my_bounded_wstring, member_flags_my_bounded_wstring, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_bounded_wstring member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_bounded_wstring = "my_bounded_wstring";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_bounded_wstring;
            ann_custom_AllStruct_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_my_bounded_wstring = TypeObjectUtils::build_complete_member_detail(name_my_bounded_wstring, member_ann_builtin_my_bounded_wstring, ann_custom_AllStruct_TypeIntrospectionExample);
            CompleteStructMember member_my_bounded_wstring = TypeObjectUtils::build_complete_struct_member(common_my_bounded_wstring, detail_my_bounded_wstring);
            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_bounded_wstring);
        }
        {
            return_code_AllStruct_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);

            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                EnumTypeFlag enum_flags_MyEnum = 0;
                BitBound bit_bound_MyEnum = 32;
                CommonEnumeratedHeader common_MyEnum = TypeObjectUtils::build_common_enumerated_header(bit_bound_MyEnum);
                QualifiedTypeName type_name_MyEnum = "MyEnum";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyEnum;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyEnum;
                CompleteTypeDetail detail_MyEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyEnum, ann_custom_MyEnum, type_name_MyEnum.to_string());
                CompleteEnumeratedHeader header_MyEnum = TypeObjectUtils::build_complete_enumerated_header(common_MyEnum, detail_MyEnum);
                CompleteEnumeratedLiteralSeq literal_seq_MyEnum;
                {
                    EnumeratedLiteralFlag flags_A = TypeObjectUtils::build_enumerated_literal_flag(false);
                    CommonEnumeratedLiteral common_A = TypeObjectUtils::build_common_enumerated_literal(0, flags_A);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_A;
                    ann_custom_MyEnum.reset();
                    MemberName name_A = "A";
                    CompleteMemberDetail detail_A = TypeObjectUtils::build_complete_member_detail(name_A, member_ann_builtin_A, ann_custom_MyEnum);
                    CompleteEnumeratedLiteral literal_A = TypeObjectUtils::build_complete_enumerated_literal(common_A, detail_A);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_A);
                }
                {
                    EnumeratedLiteralFlag flags_B = TypeObjectUtils::build_enumerated_literal_flag(false);
                    CommonEnumeratedLiteral common_B = TypeObjectUtils::build_common_enumerated_literal(1, flags_B);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_B;
                    ann_custom_MyEnum.reset();
                    MemberName name_B = "B";
                    CompleteMemberDetail detail_B = TypeObjectUtils::build_complete_member_detail(name_B, member_ann_builtin_B, ann_custom_MyEnum);
                    CompleteEnumeratedLiteral literal_B = TypeObjectUtils::build_complete_enumerated_literal(common_B, detail_B);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_B);
                }
                {
                    EnumeratedLiteralFlag flags_C = TypeObjectUtils::build_enumerated_literal_flag(false);
                    CommonEnumeratedLiteral common_C = TypeObjectUtils::build_common_enumerated_literal(2, flags_C);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_C;
                    ann_custom_MyEnum.reset();
                    MemberName name_C = "C";
                    CompleteMemberDetail detail_C = TypeObjectUtils::build_complete_member_detail(name_C, member_ann_builtin_C, ann_custom_MyEnum);
                    CompleteEnumeratedLiteral literal_C = TypeObjectUtils::build_complete_enumerated_literal(common_C, detail_C);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_C);
                }
                CompleteEnumeratedType enumerated_type_MyEnum = TypeObjectUtils::build_complete_enumerated_type(enum_flags_MyEnum, header_MyEnum,
                        literal_seq_MyEnum);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_MyEnum, type_name_MyEnum.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MyEnum already registered in TypeObjectRegistry for a different type.");
                }
                return_code_AllStruct_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);
                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_enum = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_enum;
            MemberId member_id_my_enum = 0x00000013;
            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_enum = TypeObjectUtils::build_common_struct_member(member_id_my_enum, member_flags_my_enum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_enum = TypeObjectUtils::build_common_struct_member(member_id_my_enum, member_flags_my_enum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_enum member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_enum = "my_enum";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_enum;
            ann_custom_AllStruct_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_my_enum = TypeObjectUtils::build_complete_member_detail(name_my_enum, member_ann_builtin_my_enum, ann_custom_AllStruct_TypeIntrospectionExample);
            CompleteStructMember member_my_enum = TypeObjectUtils::build_complete_struct_member(common_my_enum, detail_my_enum);
            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_enum);
        }
        {
            return_code_AllStruct_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "MyAliasedEnum", type_ids_AllStruct_TypeIntrospectionExample);

            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                AliasTypeFlag alias_flags_MyAliasedEnum = 0;
                QualifiedTypeName type_name_MyAliasedEnum = "MyAliasedEnum";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyAliasedEnum;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyAliasedEnum;
                CompleteTypeDetail detail_MyAliasedEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyAliasedEnum, ann_custom_MyAliasedEnum, type_name_MyAliasedEnum.to_string());
                CompleteAliasHeader header_MyAliasedEnum = TypeObjectUtils::build_complete_alias_header(detail_MyAliasedEnum);
                AliasMemberFlag related_flags_MyAliasedEnum = 0;
                return_code_AllStruct_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);

                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EnumTypeFlag enum_flags_MyEnum = 0;
                    BitBound bit_bound_MyEnum = 32;
                    CommonEnumeratedHeader common_MyEnum = TypeObjectUtils::build_common_enumerated_header(bit_bound_MyEnum);
                    QualifiedTypeName type_name_MyEnum = "MyEnum";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyEnum;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyEnum;
                    CompleteTypeDetail detail_MyEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyEnum, ann_custom_MyEnum, type_name_MyEnum.to_string());
                    CompleteEnumeratedHeader header_MyEnum = TypeObjectUtils::build_complete_enumerated_header(common_MyEnum, detail_MyEnum);
                    CompleteEnumeratedLiteralSeq literal_seq_MyEnum;
                    {
                        EnumeratedLiteralFlag flags_A = TypeObjectUtils::build_enumerated_literal_flag(false);
                        CommonEnumeratedLiteral common_A = TypeObjectUtils::build_common_enumerated_literal(0, flags_A);
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_A;
                        ann_custom_MyEnum.reset();
                        MemberName name_A = "A";
                        CompleteMemberDetail detail_A = TypeObjectUtils::build_complete_member_detail(name_A, member_ann_builtin_A, ann_custom_MyEnum);
                        CompleteEnumeratedLiteral literal_A = TypeObjectUtils::build_complete_enumerated_literal(common_A, detail_A);
                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_A);
                    }
                    {
                        EnumeratedLiteralFlag flags_B = TypeObjectUtils::build_enumerated_literal_flag(false);
                        CommonEnumeratedLiteral common_B = TypeObjectUtils::build_common_enumerated_literal(1, flags_B);
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_B;
                        ann_custom_MyEnum.reset();
                        MemberName name_B = "B";
                        CompleteMemberDetail detail_B = TypeObjectUtils::build_complete_member_detail(name_B, member_ann_builtin_B, ann_custom_MyEnum);
                        CompleteEnumeratedLiteral literal_B = TypeObjectUtils::build_complete_enumerated_literal(common_B, detail_B);
                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_B);
                    }
                    {
                        EnumeratedLiteralFlag flags_C = TypeObjectUtils::build_enumerated_literal_flag(false);
                        CommonEnumeratedLiteral common_C = TypeObjectUtils::build_common_enumerated_literal(2, flags_C);
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_C;
                        ann_custom_MyEnum.reset();
                        MemberName name_C = "C";
                        CompleteMemberDetail detail_C = TypeObjectUtils::build_complete_member_detail(name_C, member_ann_builtin_C, ann_custom_MyEnum);
                        CompleteEnumeratedLiteral literal_C = TypeObjectUtils::build_complete_enumerated_literal(common_C, detail_C);
                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_C);
                    }
                    CompleteEnumeratedType enumerated_type_MyEnum = TypeObjectUtils::build_complete_enumerated_type(enum_flags_MyEnum, header_MyEnum,
                            literal_seq_MyEnum);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_MyEnum, type_name_MyEnum.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "MyEnum already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_AllStruct_TypeIntrospectionExample =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);
                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                CommonAliasBody common_MyAliasedEnum;
                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    common_MyAliasedEnum = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedEnum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    common_MyAliasedEnum = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedEnum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "MyAliasedEnum related TypeIdentifier inconsistent.");
                    return;
                }
                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyAliasedEnum;
                ann_custom_MyAliasedEnum.reset();
                CompleteAliasBody body_MyAliasedEnum = TypeObjectUtils::build_complete_alias_body(common_MyAliasedEnum, member_ann_builtin_MyAliasedEnum, ann_custom_MyAliasedEnum);
                CompleteAliasType alias_type_MyAliasedEnum = TypeObjectUtils::build_complete_alias_type(alias_flags_MyAliasedEnum, header_MyAliasedEnum, body_MyAliasedEnum);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyAliasedEnum, type_name_MyAliasedEnum.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MyAliasedEnum already registered in TypeObjectRegistry for a different type.");
                }
                return_code_AllStruct_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "MyAliasedEnum", type_ids_AllStruct_TypeIntrospectionExample);
                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyAliasedEnum: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_aliased_enum = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_aliased_enum;
            MemberId member_id_my_aliased_enum = 0x00000014;
            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_aliased_enum = TypeObjectUtils::build_common_struct_member(member_id_my_aliased_enum, member_flags_my_aliased_enum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_aliased_enum = TypeObjectUtils::build_common_struct_member(member_id_my_aliased_enum, member_flags_my_aliased_enum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_aliased_enum member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_aliased_enum = "my_aliased_enum";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_aliased_enum;
            ann_custom_AllStruct_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_my_aliased_enum = TypeObjectUtils::build_complete_member_detail(name_my_aliased_enum, member_ann_builtin_my_aliased_enum, ann_custom_AllStruct_TypeIntrospectionExample);
            CompleteStructMember member_my_aliased_enum = TypeObjectUtils::build_complete_struct_member(common_my_aliased_enum, detail_my_aliased_enum);
            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_aliased_enum);
        }
        {
            return_code_AllStruct_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "MyAliasedBoundedString", type_ids_AllStruct_TypeIntrospectionExample);

            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                AliasTypeFlag alias_flags_MyAliasedBoundedString = 0;
                QualifiedTypeName type_name_MyAliasedBoundedString = "MyAliasedBoundedString";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyAliasedBoundedString;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyAliasedBoundedString;
                CompleteTypeDetail detail_MyAliasedBoundedString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyAliasedBoundedString, ann_custom_MyAliasedBoundedString, type_name_MyAliasedBoundedString.to_string());
                CompleteAliasHeader header_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_header(detail_MyAliasedBoundedString);
                AliasMemberFlag related_flags_MyAliasedBoundedString = 0;
                return_code_AllStruct_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_100", type_ids_AllStruct_TypeIntrospectionExample);

                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    std::string type_id_kind_anonymous_string_100("TI_STRING8_SMALL");
                    if (type_id_kind_anonymous_string_100 == "TI_STRING8_SMALL")
                    {
                        SBound bound = static_cast<SBound>(100);
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_100"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_100 already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else if (type_id_kind_anonymous_string_100 == "TI_STRING8_LARGE")
                    {
                        LBound bound = 100;
                        StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                "anonymous_string_100"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_100 already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_string_100: Unknown String kind.");
                        return;
                    }
                    return_code_AllStruct_TypeIntrospectionExample =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_string_100", type_ids_AllStruct_TypeIntrospectionExample);
                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_string_100: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                CommonAliasBody common_MyAliasedBoundedString;
                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    common_MyAliasedBoundedString = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedBoundedString, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    common_MyAliasedBoundedString = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedBoundedString, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "MyAliasedBoundedString related TypeIdentifier inconsistent.");
                    return;
                }
                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyAliasedBoundedString;
                ann_custom_MyAliasedBoundedString.reset();
                CompleteAliasBody body_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_body(common_MyAliasedBoundedString, member_ann_builtin_MyAliasedBoundedString, ann_custom_MyAliasedBoundedString);
                CompleteAliasType alias_type_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_type(alias_flags_MyAliasedBoundedString, header_MyAliasedBoundedString, body_MyAliasedBoundedString);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyAliasedBoundedString, type_name_MyAliasedBoundedString.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MyAliasedBoundedString already registered in TypeObjectRegistry for a different type.");
                }
                return_code_AllStruct_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "MyAliasedBoundedString", type_ids_AllStruct_TypeIntrospectionExample);
                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyAliasedBoundedString: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_aliased_bounded_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_aliased_bounded_string;
            MemberId member_id_my_aliased_bounded_string = 0x00000015;
            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_aliased_bounded_string = TypeObjectUtils::build_common_struct_member(member_id_my_aliased_bounded_string, member_flags_my_aliased_bounded_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_aliased_bounded_string = TypeObjectUtils::build_common_struct_member(member_id_my_aliased_bounded_string, member_flags_my_aliased_bounded_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_aliased_bounded_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_aliased_bounded_string = "my_aliased_bounded_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_aliased_bounded_string;
            ann_custom_AllStruct_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_my_aliased_bounded_string = TypeObjectUtils::build_complete_member_detail(name_my_aliased_bounded_string, member_ann_builtin_my_aliased_bounded_string, ann_custom_AllStruct_TypeIntrospectionExample);
            CompleteStructMember member_my_aliased_bounded_string = TypeObjectUtils::build_complete_struct_member(common_my_aliased_bounded_string, detail_my_aliased_bounded_string);
            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_aliased_bounded_string);
        }
        {
            return_code_AllStruct_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "MyRecursiveAlias", type_ids_AllStruct_TypeIntrospectionExample);

            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                AliasTypeFlag alias_flags_MyRecursiveAlias = 0;
                QualifiedTypeName type_name_MyRecursiveAlias = "MyRecursiveAlias";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyRecursiveAlias;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyRecursiveAlias;
                CompleteTypeDetail detail_MyRecursiveAlias = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyRecursiveAlias, ann_custom_MyRecursiveAlias, type_name_MyRecursiveAlias.to_string());
                CompleteAliasHeader header_MyRecursiveAlias = TypeObjectUtils::build_complete_alias_header(detail_MyRecursiveAlias);
                AliasMemberFlag related_flags_MyRecursiveAlias = 0;
                return_code_AllStruct_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "MyAliasedEnum", type_ids_AllStruct_TypeIntrospectionExample);

                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    AliasTypeFlag alias_flags_MyAliasedEnum = 0;
                    QualifiedTypeName type_name_MyAliasedEnum = "MyAliasedEnum";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyAliasedEnum;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyAliasedEnum;
                    CompleteTypeDetail detail_MyAliasedEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyAliasedEnum, ann_custom_MyAliasedEnum, type_name_MyAliasedEnum.to_string());
                    CompleteAliasHeader header_MyAliasedEnum = TypeObjectUtils::build_complete_alias_header(detail_MyAliasedEnum);
                    AliasMemberFlag related_flags_MyAliasedEnum = 0;
                    return_code_AllStruct_TypeIntrospectionExample =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);

                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EnumTypeFlag enum_flags_MyEnum = 0;
                        BitBound bit_bound_MyEnum = 32;
                        CommonEnumeratedHeader common_MyEnum = TypeObjectUtils::build_common_enumerated_header(bit_bound_MyEnum);
                        QualifiedTypeName type_name_MyEnum = "MyEnum";
                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyEnum;
                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyEnum;
                        CompleteTypeDetail detail_MyEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyEnum, ann_custom_MyEnum, type_name_MyEnum.to_string());
                        CompleteEnumeratedHeader header_MyEnum = TypeObjectUtils::build_complete_enumerated_header(common_MyEnum, detail_MyEnum);
                        CompleteEnumeratedLiteralSeq literal_seq_MyEnum;
                        {
                            EnumeratedLiteralFlag flags_A = TypeObjectUtils::build_enumerated_literal_flag(false);
                            CommonEnumeratedLiteral common_A = TypeObjectUtils::build_common_enumerated_literal(0, flags_A);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_A;
                            ann_custom_MyEnum.reset();
                            MemberName name_A = "A";
                            CompleteMemberDetail detail_A = TypeObjectUtils::build_complete_member_detail(name_A, member_ann_builtin_A, ann_custom_MyEnum);
                            CompleteEnumeratedLiteral literal_A = TypeObjectUtils::build_complete_enumerated_literal(common_A, detail_A);
                            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_A);
                        }
                        {
                            EnumeratedLiteralFlag flags_B = TypeObjectUtils::build_enumerated_literal_flag(false);
                            CommonEnumeratedLiteral common_B = TypeObjectUtils::build_common_enumerated_literal(1, flags_B);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_B;
                            ann_custom_MyEnum.reset();
                            MemberName name_B = "B";
                            CompleteMemberDetail detail_B = TypeObjectUtils::build_complete_member_detail(name_B, member_ann_builtin_B, ann_custom_MyEnum);
                            CompleteEnumeratedLiteral literal_B = TypeObjectUtils::build_complete_enumerated_literal(common_B, detail_B);
                            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_B);
                        }
                        {
                            EnumeratedLiteralFlag flags_C = TypeObjectUtils::build_enumerated_literal_flag(false);
                            CommonEnumeratedLiteral common_C = TypeObjectUtils::build_common_enumerated_literal(2, flags_C);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_C;
                            ann_custom_MyEnum.reset();
                            MemberName name_C = "C";
                            CompleteMemberDetail detail_C = TypeObjectUtils::build_complete_member_detail(name_C, member_ann_builtin_C, ann_custom_MyEnum);
                            CompleteEnumeratedLiteral literal_C = TypeObjectUtils::build_complete_enumerated_literal(common_C, detail_C);
                            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_C);
                        }
                        CompleteEnumeratedType enumerated_type_MyEnum = TypeObjectUtils::build_complete_enumerated_type(enum_flags_MyEnum, header_MyEnum,
                                literal_seq_MyEnum);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_MyEnum, type_name_MyEnum.to_string()))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyEnum already registered in TypeObjectRegistry for a different type.");
                        }
                        return_code_AllStruct_TypeIntrospectionExample =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);
                        if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                    CommonAliasBody common_MyAliasedEnum;
                    if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_MyAliasedEnum = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedEnum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_MyAliasedEnum = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedEnum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyAliasedEnum related TypeIdentifier inconsistent.");
                        return;
                    }
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyAliasedEnum;
                    ann_custom_MyAliasedEnum.reset();
                    CompleteAliasBody body_MyAliasedEnum = TypeObjectUtils::build_complete_alias_body(common_MyAliasedEnum, member_ann_builtin_MyAliasedEnum, ann_custom_MyAliasedEnum);
                    CompleteAliasType alias_type_MyAliasedEnum = TypeObjectUtils::build_complete_alias_type(alias_flags_MyAliasedEnum, header_MyAliasedEnum, body_MyAliasedEnum);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyAliasedEnum, type_name_MyAliasedEnum.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "MyAliasedEnum already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_AllStruct_TypeIntrospectionExample =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "MyAliasedEnum", type_ids_AllStruct_TypeIntrospectionExample);
                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "MyAliasedEnum: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                CommonAliasBody common_MyRecursiveAlias;
                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    common_MyRecursiveAlias = TypeObjectUtils::build_common_alias_body(related_flags_MyRecursiveAlias, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    common_MyRecursiveAlias = TypeObjectUtils::build_common_alias_body(related_flags_MyRecursiveAlias, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "MyRecursiveAlias related TypeIdentifier inconsistent.");
                    return;
                }
                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyRecursiveAlias;
                ann_custom_MyRecursiveAlias.reset();
                CompleteAliasBody body_MyRecursiveAlias = TypeObjectUtils::build_complete_alias_body(common_MyRecursiveAlias, member_ann_builtin_MyRecursiveAlias, ann_custom_MyRecursiveAlias);
                CompleteAliasType alias_type_MyRecursiveAlias = TypeObjectUtils::build_complete_alias_type(alias_flags_MyRecursiveAlias, header_MyRecursiveAlias, body_MyRecursiveAlias);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyRecursiveAlias, type_name_MyRecursiveAlias.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MyRecursiveAlias already registered in TypeObjectRegistry for a different type.");
                }
                return_code_AllStruct_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "MyRecursiveAlias", type_ids_AllStruct_TypeIntrospectionExample);
                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyRecursiveAlias: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_recursive_alias = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_recursive_alias;
            MemberId member_id_my_recursive_alias = 0x00000016;
            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_recursive_alias = TypeObjectUtils::build_common_struct_member(member_id_my_recursive_alias, member_flags_my_recursive_alias, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_recursive_alias = TypeObjectUtils::build_common_struct_member(member_id_my_recursive_alias, member_flags_my_recursive_alias, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_recursive_alias member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_recursive_alias = "my_recursive_alias";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_recursive_alias;
            ann_custom_AllStruct_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_my_recursive_alias = TypeObjectUtils::build_complete_member_detail(name_my_recursive_alias, member_ann_builtin_my_recursive_alias, ann_custom_AllStruct_TypeIntrospectionExample);
            CompleteStructMember member_my_recursive_alias = TypeObjectUtils::build_complete_struct_member(common_my_recursive_alias, detail_my_recursive_alias);
            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_recursive_alias);
        }
        {
            return_code_AllStruct_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_int16_t_5", type_ids_AllStruct_TypeIntrospectionExample);

            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_AllStruct_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_AllStruct_TypeIntrospectionExample);

                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_sequence_int16_t_5 {nullptr};
                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_int16_t_5 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_int16_t_5 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_int16_t_5 = EK_COMPLETE;
                if (TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_int16_t_5 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_int16_t_5 = 0;
                PlainCollectionHeader header_anonymous_sequence_int16_t_5 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_int16_t_5, element_flags_anonymous_sequence_int16_t_5);
                std::string type_id_kind_anonymous_sequence_int16_t_5("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_int16_t_5 == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = static_cast<SBound>(5);
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_int16_t_5, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int16_t_5));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_int16_t_5"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_int16_t_5 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 5;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_int16_t_5, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int16_t_5));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_int16_t_5"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_int16_t_5 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_AllStruct_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_int16_t_5", type_ids_AllStruct_TypeIntrospectionExample);
                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_int16_t_5: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_short_sequence = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_short_sequence;
            MemberId member_id_short_sequence = 0x00000017;
            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_short_sequence = TypeObjectUtils::build_common_struct_member(member_id_short_sequence, member_flags_short_sequence, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_short_sequence = TypeObjectUtils::build_common_struct_member(member_id_short_sequence, member_flags_short_sequence, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure short_sequence member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_short_sequence = "short_sequence";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_short_sequence;
            ann_custom_AllStruct_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_short_sequence = TypeObjectUtils::build_complete_member_detail(name_short_sequence, member_ann_builtin_short_sequence, ann_custom_AllStruct_TypeIntrospectionExample);
            CompleteStructMember member_short_sequence = TypeObjectUtils::build_complete_struct_member(common_short_sequence, detail_short_sequence);
            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_short_sequence);
        }
        {
            return_code_AllStruct_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_int32_t_2_3_4", type_ids_AllStruct_TypeIntrospectionExample);

            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_AllStruct_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_AllStruct_TypeIntrospectionExample);

                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_array_int32_t_2_3_4 {nullptr};
                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_array_int32_t_2_3_4 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_array_int32_t_2_3_4 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_int32_t_2_3_4 = EK_COMPLETE;
                if (TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_int32_t_2_3_4 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_int32_t_2_3_4 = 0;
                PlainCollectionHeader header_anonymous_array_int32_t_2_3_4 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_int32_t_2_3_4, element_flags_anonymous_array_int32_t_2_3_4);
                std::string type_id_kind_anonymous_array_int32_t_2_3_4("TI_PLAIN_ARRAY_SMALL");
                if (type_id_kind_anonymous_array_int32_t_2_3_4 == "TI_PLAIN_ARRAY_SMALL")
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(2));

                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(3));

                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_int32_t_2_3_4, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int32_t_2_3_4));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_int32_t_2_3_4"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_int32_t_2_3_4 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(2));

                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(3));

                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(4));

                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header_anonymous_array_int32_t_2_3_4, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int32_t_2_3_4));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_int32_t_2_3_4"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_int32_t_2_3_4 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_AllStruct_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_array_int32_t_2_3_4", type_ids_AllStruct_TypeIntrospectionExample);
                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_array_int32_t_2_3_4: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_long_array = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_long_array;
            MemberId member_id_long_array = 0x00000018;
            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_long_array = TypeObjectUtils::build_common_struct_member(member_id_long_array, member_flags_long_array, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_long_array = TypeObjectUtils::build_common_struct_member(member_id_long_array, member_flags_long_array, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure long_array member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_long_array = "long_array";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_long_array;
            ann_custom_AllStruct_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_long_array = TypeObjectUtils::build_complete_member_detail(name_long_array, member_ann_builtin_long_array, ann_custom_AllStruct_TypeIntrospectionExample);
            CompleteStructMember member_long_array = TypeObjectUtils::build_complete_struct_member(common_long_array, detail_long_array);
            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_long_array);
        }
        {
            return_code_AllStruct_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_AllStruct_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                    if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                    {
                        LBound bound = 255;
                        StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                "anonymous_string_unbounded"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_string_unbounded: Unknown String kind.");
                        return;
                    }
                    return_code_AllStruct_TypeIntrospectionExample =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_AllStruct_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                    if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                    {
                        LBound bound = 255;
                        StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                "anonymous_string_unbounded"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_string_unbounded: Unknown String kind.");
                        return;
                    }
                    return_code_AllStruct_TypeIntrospectionExample =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded);
                std::string type_id_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded("TI_PLAIN_MAP_SMALL");
                if (type_id_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded == "TI_PLAIN_MAP_SMALL")
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_AllStruct_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_string_unbounded_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_string_unbounded_map;
            MemberId member_id_string_unbounded_map = 0x00000019;
            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_string_unbounded_map = TypeObjectUtils::build_common_struct_member(member_id_string_unbounded_map, member_flags_string_unbounded_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_string_unbounded_map = TypeObjectUtils::build_common_struct_member(member_id_string_unbounded_map, member_flags_string_unbounded_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure string_unbounded_map member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_string_unbounded_map = "string_unbounded_map";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_string_unbounded_map;
            ann_custom_AllStruct_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_string_unbounded_map = TypeObjectUtils::build_complete_member_detail(name_string_unbounded_map, member_ann_builtin_string_unbounded_map, ann_custom_AllStruct_TypeIntrospectionExample);
            CompleteStructMember member_string_unbounded_map = TypeObjectUtils::build_complete_struct_member(common_string_unbounded_map, detail_string_unbounded_map);
            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_string_unbounded_map);
        }
        {
            return_code_AllStruct_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_AllStruct_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "MyAliasedBoundedString", type_ids_AllStruct_TypeIntrospectionExample);

                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    AliasTypeFlag alias_flags_MyAliasedBoundedString = 0;
                    QualifiedTypeName type_name_MyAliasedBoundedString = "MyAliasedBoundedString";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyAliasedBoundedString;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyAliasedBoundedString;
                    CompleteTypeDetail detail_MyAliasedBoundedString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyAliasedBoundedString, ann_custom_MyAliasedBoundedString, type_name_MyAliasedBoundedString.to_string());
                    CompleteAliasHeader header_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_header(detail_MyAliasedBoundedString);
                    AliasMemberFlag related_flags_MyAliasedBoundedString = 0;
                    return_code_AllStruct_TypeIntrospectionExample =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_string_100", type_ids_AllStruct_TypeIntrospectionExample);

                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        std::string type_id_kind_anonymous_string_100("TI_STRING8_SMALL");
                        if (type_id_kind_anonymous_string_100 == "TI_STRING8_SMALL")
                        {
                            SBound bound = static_cast<SBound>(100);
                            StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                    "anonymous_string_100"))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_string_100 already registered in TypeObjectRegistry for a different type.");
                            }
                        }
                        else if (type_id_kind_anonymous_string_100 == "TI_STRING8_LARGE")
                        {
                            LBound bound = 100;
                            StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                    "anonymous_string_100"))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_string_100 already registered in TypeObjectRegistry for a different type.");
                            }
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_100: Unknown String kind.");
                            return;
                        }
                        return_code_AllStruct_TypeIntrospectionExample =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_string_100", type_ids_AllStruct_TypeIntrospectionExample);
                        if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_100: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                    CommonAliasBody common_MyAliasedBoundedString;
                    if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_MyAliasedBoundedString = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedBoundedString, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_MyAliasedBoundedString = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedBoundedString, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyAliasedBoundedString related TypeIdentifier inconsistent.");
                        return;
                    }
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyAliasedBoundedString;
                    ann_custom_MyAliasedBoundedString.reset();
                    CompleteAliasBody body_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_body(common_MyAliasedBoundedString, member_ann_builtin_MyAliasedBoundedString, ann_custom_MyAliasedBoundedString);
                    CompleteAliasType alias_type_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_type(alias_flags_MyAliasedBoundedString, header_MyAliasedBoundedString, body_MyAliasedBoundedString);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyAliasedBoundedString, type_name_MyAliasedBoundedString.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "MyAliasedBoundedString already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_AllStruct_TypeIntrospectionExample =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "MyAliasedBoundedString", type_ids_AllStruct_TypeIntrospectionExample);
                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "MyAliasedBoundedString: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_AllStruct_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                    if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                    {
                        SBound bound = 0;
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_unbounded"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                    {
                        LBound bound = 255;
                        StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                "anonymous_string_unbounded"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_string_unbounded: Unknown String kind.");
                        return;
                    }
                    return_code_AllStruct_TypeIntrospectionExample =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded);
                std::string type_id_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded("TI_PLAIN_MAP_SMALL");
                if (type_id_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded == "TI_PLAIN_MAP_SMALL")
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_AllStruct_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_string_alias_unbounded_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_string_alias_unbounded_map;
            MemberId member_id_string_alias_unbounded_map = 0x0000001a;
            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_string_alias_unbounded_map = TypeObjectUtils::build_common_struct_member(member_id_string_alias_unbounded_map, member_flags_string_alias_unbounded_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_string_alias_unbounded_map = TypeObjectUtils::build_common_struct_member(member_id_string_alias_unbounded_map, member_flags_string_alias_unbounded_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure string_alias_unbounded_map member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_string_alias_unbounded_map = "string_alias_unbounded_map";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_string_alias_unbounded_map;
            ann_custom_AllStruct_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_string_alias_unbounded_map = TypeObjectUtils::build_complete_member_detail(name_string_alias_unbounded_map, member_ann_builtin_string_alias_unbounded_map, ann_custom_AllStruct_TypeIntrospectionExample);
            CompleteStructMember member_string_alias_unbounded_map = TypeObjectUtils::build_complete_struct_member(common_string_alias_unbounded_map, detail_string_alias_unbounded_map);
            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_string_alias_unbounded_map);
        }
        {
            return_code_AllStruct_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int16_t_int32_t_2", type_ids_AllStruct_TypeIntrospectionExample);

            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_AllStruct_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_AllStruct_TypeIntrospectionExample);

                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_map_int16_t_int32_t_2 {nullptr};
                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_map_int16_t_int32_t_2 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_map_int16_t_int32_t_2 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_int32_t_2 inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_AllStruct_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_AllStruct_TypeIntrospectionExample);

                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* key_identifier_anonymous_map_int16_t_int32_t_2 {nullptr};
                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    key_identifier_anonymous_map_int16_t_int32_t_2 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    key_identifier_anonymous_map_int16_t_int32_t_2 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_int32_t_2 inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int16_t_int32_t_2 = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_int32_t_2->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int16_t_int32_t_2 = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int16_t_int32_t_2 = 0;
                CollectionElementFlag key_flags_anonymous_map_int16_t_int32_t_2 = 0;
                PlainCollectionHeader header_anonymous_map_int16_t_int32_t_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_int32_t_2, element_flags_anonymous_map_int16_t_int32_t_2);
                std::string type_id_kind_anonymous_map_int16_t_int32_t_2("TI_PLAIN_MAP_SMALL");
                if (type_id_kind_anonymous_map_int16_t_int32_t_2 == "TI_PLAIN_MAP_SMALL")
                {
                    SBound bound = static_cast<SBound>(2);
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_int32_t_2, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_int32_t_2), key_flags_anonymous_map_int16_t_int32_t_2,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_int32_t_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_int32_t_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 2;
                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_int16_t_int32_t_2, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_int32_t_2), key_flags_anonymous_map_int16_t_int32_t_2,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_int32_t_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int16_t_int32_t_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_AllStruct_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_map_int16_t_int32_t_2", type_ids_AllStruct_TypeIntrospectionExample);
                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_map_int16_t_int32_t_2: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_short_long_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_short_long_map;
            MemberId member_id_short_long_map = 0x0000001b;
            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_short_long_map = TypeObjectUtils::build_common_struct_member(member_id_short_long_map, member_flags_short_long_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_short_long_map = TypeObjectUtils::build_common_struct_member(member_id_short_long_map, member_flags_short_long_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure short_long_map member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_short_long_map = "short_long_map";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_short_long_map;
            ann_custom_AllStruct_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_short_long_map = TypeObjectUtils::build_complete_member_detail(name_short_long_map, member_ann_builtin_short_long_map, ann_custom_AllStruct_TypeIntrospectionExample);
            CompleteStructMember member_short_long_map = TypeObjectUtils::build_complete_struct_member(common_short_long_map, detail_short_long_map);
            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_short_long_map);
        }
        CompleteStructType struct_type_AllStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_type(struct_flags_AllStruct_TypeIntrospectionExample, header_AllStruct_TypeIntrospectionExample, member_seq_AllStruct_TypeIntrospectionExample);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_AllStruct_TypeIntrospectionExample, type_name_AllStruct_TypeIntrospectionExample.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "AllStruct_TypeIntrospectionExample already registered in TypeObjectRegistry for a different type.");
        }
        return_code_AllStruct_TypeIntrospectionExample =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "AllStruct_TypeIntrospectionExample", type_ids_AllStruct_TypeIntrospectionExample);
        if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "AllStruct_TypeIntrospectionExample: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_DataTest_TypeIntrospectionExample_type_identifier()
{
    {
        StructTypeFlag struct_flags_DataTest_TypeIntrospectionExample = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_DataTest_TypeIntrospectionExample;
        TypeIdentifierPair type_ids_DataTest_TypeIntrospectionExample;
        QualifiedTypeName type_name_DataTest_TypeIntrospectionExample = "DataTest_TypeIntrospectionExample";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_DataTest_TypeIntrospectionExample;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_DataTest_TypeIntrospectionExample;
        CompleteTypeDetail detail_DataTest_TypeIntrospectionExample = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_DataTest_TypeIntrospectionExample, ann_custom_DataTest_TypeIntrospectionExample, type_name_DataTest_TypeIntrospectionExample.to_string());
        CompleteStructHeader header_DataTest_TypeIntrospectionExample;
        header_DataTest_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_DataTest_TypeIntrospectionExample);
        CompleteStructMemberSeq member_seq_DataTest_TypeIntrospectionExample;
        {
            return_code_DataTest_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids_DataTest_TypeIntrospectionExample);

            if (return_code_DataTest_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "index Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_index = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_index;
            MemberId member_id_index = 0x00000000;
            if (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_index = TypeObjectUtils::build_common_struct_member(member_id_index, member_flags_index, type_ids_DataTest_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_index = TypeObjectUtils::build_common_struct_member(member_id_index, member_flags_index, type_ids_DataTest_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure index member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_index = "index";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_index;
            ann_custom_DataTest_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_index = TypeObjectUtils::build_complete_member_detail(name_index, member_ann_builtin_index, ann_custom_DataTest_TypeIntrospectionExample);
            CompleteStructMember member_index = TypeObjectUtils::build_complete_struct_member(common_index, detail_index);
            TypeObjectUtils::add_complete_struct_member(member_seq_DataTest_TypeIntrospectionExample, member_index);
        }
        {
            return_code_DataTest_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "AllStruct_TypeIntrospectionExample", type_ids_DataTest_TypeIntrospectionExample);

            if (return_code_DataTest_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_AllStruct_TypeIntrospectionExample = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_AllStruct_TypeIntrospectionExample;
                    TypeIdentifierPair type_ids_AllStruct_TypeIntrospectionExample;
                    return_code_AllStruct_TypeIntrospectionExample =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "PrimitivesStruct_TypeIntrospectionExample", type_ids_AllStruct_TypeIntrospectionExample);

                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        {
                            StructTypeFlag struct_flags_PrimitivesStruct_TypeIntrospectionExample = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                    false, false);
                            ReturnCode_t return_code_PrimitivesStruct_TypeIntrospectionExample;
                            TypeIdentifierPair type_ids_PrimitivesStruct_TypeIntrospectionExample;
                            QualifiedTypeName type_name_PrimitivesStruct_TypeIntrospectionExample = "PrimitivesStruct_TypeIntrospectionExample";
                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_PrimitivesStruct_TypeIntrospectionExample;
                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_PrimitivesStruct_TypeIntrospectionExample;
                            CompleteTypeDetail detail_PrimitivesStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_PrimitivesStruct_TypeIntrospectionExample, ann_custom_PrimitivesStruct_TypeIntrospectionExample, type_name_PrimitivesStruct_TypeIntrospectionExample.to_string());
                            CompleteStructHeader header_PrimitivesStruct_TypeIntrospectionExample;
                            header_PrimitivesStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_PrimitivesStruct_TypeIntrospectionExample);
                            CompleteStructMemberSeq member_seq_PrimitivesStruct_TypeIntrospectionExample;
                            {
                                return_code_PrimitivesStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_bool", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                StructMemberFlag member_flags_my_bool = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                        false, false, false, false);
                                CommonStructMember common_my_bool;
                                MemberId member_id_my_bool = 0x00000000;
                                if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_bool = TypeObjectUtils::build_common_struct_member(member_id_my_bool, member_flags_my_bool, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_bool = TypeObjectUtils::build_common_struct_member(member_id_my_bool, member_flags_my_bool, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Structure my_bool member TypeIdentifier inconsistent.");
                                    return;
                                }
                                MemberName name_my_bool = "my_bool";
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_bool;
                                ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                CompleteMemberDetail detail_my_bool = TypeObjectUtils::build_complete_member_detail(name_my_bool, member_ann_builtin_my_bool, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                CompleteStructMember member_my_bool = TypeObjectUtils::build_complete_struct_member(common_my_bool, detail_my_bool);
                                TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_bool);
                            }
                            {
                                return_code_PrimitivesStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_byte", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "my_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                StructMemberFlag member_flags_my_octet = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                        false, false, false, false);
                                CommonStructMember common_my_octet;
                                MemberId member_id_my_octet = 0x00000001;
                                if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_octet = TypeObjectUtils::build_common_struct_member(member_id_my_octet, member_flags_my_octet, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_octet = TypeObjectUtils::build_common_struct_member(member_id_my_octet, member_flags_my_octet, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Structure my_octet member TypeIdentifier inconsistent.");
                                    return;
                                }
                                MemberName name_my_octet = "my_octet";
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_octet;
                                ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                CompleteMemberDetail detail_my_octet = TypeObjectUtils::build_complete_member_detail(name_my_octet, member_ann_builtin_my_octet, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                CompleteStructMember member_my_octet = TypeObjectUtils::build_complete_struct_member(common_my_octet, detail_my_octet);
                                TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_octet);
                            }
                            {
                                return_code_PrimitivesStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_char", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "my_char Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                StructMemberFlag member_flags_my_char = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                        false, false, false, false);
                                CommonStructMember common_my_char;
                                MemberId member_id_my_char = 0x00000002;
                                if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_char = TypeObjectUtils::build_common_struct_member(member_id_my_char, member_flags_my_char, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_char = TypeObjectUtils::build_common_struct_member(member_id_my_char, member_flags_my_char, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Structure my_char member TypeIdentifier inconsistent.");
                                    return;
                                }
                                MemberName name_my_char = "my_char";
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_char;
                                ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                CompleteMemberDetail detail_my_char = TypeObjectUtils::build_complete_member_detail(name_my_char, member_ann_builtin_my_char, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                CompleteStructMember member_my_char = TypeObjectUtils::build_complete_struct_member(common_my_char, detail_my_char);
                                TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_char);
                            }
                            {
                                return_code_PrimitivesStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_wchar_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "my_wchar Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                StructMemberFlag member_flags_my_wchar = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                        false, false, false, false);
                                CommonStructMember common_my_wchar;
                                MemberId member_id_my_wchar = 0x00000003;
                                if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_wchar = TypeObjectUtils::build_common_struct_member(member_id_my_wchar, member_flags_my_wchar, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_wchar = TypeObjectUtils::build_common_struct_member(member_id_my_wchar, member_flags_my_wchar, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Structure my_wchar member TypeIdentifier inconsistent.");
                                    return;
                                }
                                MemberName name_my_wchar = "my_wchar";
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_wchar;
                                ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                CompleteMemberDetail detail_my_wchar = TypeObjectUtils::build_complete_member_detail(name_my_wchar, member_ann_builtin_my_wchar, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                CompleteStructMember member_my_wchar = TypeObjectUtils::build_complete_struct_member(common_my_wchar, detail_my_wchar);
                                TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_wchar);
                            }
                            {
                                return_code_PrimitivesStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_int32_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "my_long Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                StructMemberFlag member_flags_my_long = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                        false, false, false, false);
                                CommonStructMember common_my_long;
                                MemberId member_id_my_long = 0x00000004;
                                if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_long = TypeObjectUtils::build_common_struct_member(member_id_my_long, member_flags_my_long, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_long = TypeObjectUtils::build_common_struct_member(member_id_my_long, member_flags_my_long, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Structure my_long member TypeIdentifier inconsistent.");
                                    return;
                                }
                                MemberName name_my_long = "my_long";
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_long;
                                ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                CompleteMemberDetail detail_my_long = TypeObjectUtils::build_complete_member_detail(name_my_long, member_ann_builtin_my_long, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                CompleteStructMember member_my_long = TypeObjectUtils::build_complete_struct_member(common_my_long, detail_my_long);
                                TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_long);
                            }
                            {
                                return_code_PrimitivesStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_uint32_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "my_ulong Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                StructMemberFlag member_flags_my_ulong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                        false, false, false, false);
                                CommonStructMember common_my_ulong;
                                MemberId member_id_my_ulong = 0x00000005;
                                if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_ulong = TypeObjectUtils::build_common_struct_member(member_id_my_ulong, member_flags_my_ulong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_ulong = TypeObjectUtils::build_common_struct_member(member_id_my_ulong, member_flags_my_ulong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Structure my_ulong member TypeIdentifier inconsistent.");
                                    return;
                                }
                                MemberName name_my_ulong = "my_ulong";
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_ulong;
                                ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                CompleteMemberDetail detail_my_ulong = TypeObjectUtils::build_complete_member_detail(name_my_ulong, member_ann_builtin_my_ulong, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                CompleteStructMember member_my_ulong = TypeObjectUtils::build_complete_struct_member(common_my_ulong, detail_my_ulong);
                                TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_ulong);
                            }
                            {
                                return_code_PrimitivesStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_int8_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "my_int8 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                StructMemberFlag member_flags_my_int8 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                        false, false, false, false);
                                CommonStructMember common_my_int8;
                                MemberId member_id_my_int8 = 0x00000006;
                                if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_int8 = TypeObjectUtils::build_common_struct_member(member_id_my_int8, member_flags_my_int8, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_int8 = TypeObjectUtils::build_common_struct_member(member_id_my_int8, member_flags_my_int8, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Structure my_int8 member TypeIdentifier inconsistent.");
                                    return;
                                }
                                MemberName name_my_int8 = "my_int8";
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_int8;
                                ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                CompleteMemberDetail detail_my_int8 = TypeObjectUtils::build_complete_member_detail(name_my_int8, member_ann_builtin_my_int8, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                CompleteStructMember member_my_int8 = TypeObjectUtils::build_complete_struct_member(common_my_int8, detail_my_int8);
                                TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_int8);
                            }
                            {
                                return_code_PrimitivesStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_uint8_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "my_uint8 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                StructMemberFlag member_flags_my_uint8 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                        false, false, false, false);
                                CommonStructMember common_my_uint8;
                                MemberId member_id_my_uint8 = 0x00000007;
                                if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_uint8 = TypeObjectUtils::build_common_struct_member(member_id_my_uint8, member_flags_my_uint8, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_uint8 = TypeObjectUtils::build_common_struct_member(member_id_my_uint8, member_flags_my_uint8, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Structure my_uint8 member TypeIdentifier inconsistent.");
                                    return;
                                }
                                MemberName name_my_uint8 = "my_uint8";
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_uint8;
                                ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                CompleteMemberDetail detail_my_uint8 = TypeObjectUtils::build_complete_member_detail(name_my_uint8, member_ann_builtin_my_uint8, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                CompleteStructMember member_my_uint8 = TypeObjectUtils::build_complete_struct_member(common_my_uint8, detail_my_uint8);
                                TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_uint8);
                            }
                            {
                                return_code_PrimitivesStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_int16_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "my_short Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                StructMemberFlag member_flags_my_short = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                        false, false, false, false);
                                CommonStructMember common_my_short;
                                MemberId member_id_my_short = 0x00000008;
                                if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_short = TypeObjectUtils::build_common_struct_member(member_id_my_short, member_flags_my_short, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_short = TypeObjectUtils::build_common_struct_member(member_id_my_short, member_flags_my_short, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Structure my_short member TypeIdentifier inconsistent.");
                                    return;
                                }
                                MemberName name_my_short = "my_short";
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_short;
                                ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                CompleteMemberDetail detail_my_short = TypeObjectUtils::build_complete_member_detail(name_my_short, member_ann_builtin_my_short, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                CompleteStructMember member_my_short = TypeObjectUtils::build_complete_struct_member(common_my_short, detail_my_short);
                                TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_short);
                            }
                            {
                                return_code_PrimitivesStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_uint16_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "my_ushort Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                StructMemberFlag member_flags_my_ushort = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                        false, false, false, false);
                                CommonStructMember common_my_ushort;
                                MemberId member_id_my_ushort = 0x00000009;
                                if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_ushort = TypeObjectUtils::build_common_struct_member(member_id_my_ushort, member_flags_my_ushort, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_ushort = TypeObjectUtils::build_common_struct_member(member_id_my_ushort, member_flags_my_ushort, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Structure my_ushort member TypeIdentifier inconsistent.");
                                    return;
                                }
                                MemberName name_my_ushort = "my_ushort";
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_ushort;
                                ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                CompleteMemberDetail detail_my_ushort = TypeObjectUtils::build_complete_member_detail(name_my_ushort, member_ann_builtin_my_ushort, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                CompleteStructMember member_my_ushort = TypeObjectUtils::build_complete_struct_member(common_my_ushort, detail_my_ushort);
                                TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_ushort);
                            }
                            {
                                return_code_PrimitivesStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_int64_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "my_longlong Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                StructMemberFlag member_flags_my_longlong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                        false, false, false, false);
                                CommonStructMember common_my_longlong;
                                MemberId member_id_my_longlong = 0x0000000a;
                                if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_longlong = TypeObjectUtils::build_common_struct_member(member_id_my_longlong, member_flags_my_longlong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_longlong = TypeObjectUtils::build_common_struct_member(member_id_my_longlong, member_flags_my_longlong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Structure my_longlong member TypeIdentifier inconsistent.");
                                    return;
                                }
                                MemberName name_my_longlong = "my_longlong";
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_longlong;
                                ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                CompleteMemberDetail detail_my_longlong = TypeObjectUtils::build_complete_member_detail(name_my_longlong, member_ann_builtin_my_longlong, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                CompleteStructMember member_my_longlong = TypeObjectUtils::build_complete_struct_member(common_my_longlong, detail_my_longlong);
                                TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_longlong);
                            }
                            {
                                return_code_PrimitivesStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_uint64_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "my_ulonglong Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                StructMemberFlag member_flags_my_ulonglong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                        false, false, false, false);
                                CommonStructMember common_my_ulonglong;
                                MemberId member_id_my_ulonglong = 0x0000000b;
                                if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_ulonglong = TypeObjectUtils::build_common_struct_member(member_id_my_ulonglong, member_flags_my_ulonglong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_ulonglong = TypeObjectUtils::build_common_struct_member(member_id_my_ulonglong, member_flags_my_ulonglong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Structure my_ulonglong member TypeIdentifier inconsistent.");
                                    return;
                                }
                                MemberName name_my_ulonglong = "my_ulonglong";
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_ulonglong;
                                ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                CompleteMemberDetail detail_my_ulonglong = TypeObjectUtils::build_complete_member_detail(name_my_ulonglong, member_ann_builtin_my_ulonglong, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                CompleteStructMember member_my_ulonglong = TypeObjectUtils::build_complete_struct_member(common_my_ulonglong, detail_my_ulonglong);
                                TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_ulonglong);
                            }
                            {
                                return_code_PrimitivesStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_float", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "my_float Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                StructMemberFlag member_flags_my_float = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                        false, false, false, false);
                                CommonStructMember common_my_float;
                                MemberId member_id_my_float = 0x0000000c;
                                if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_float = TypeObjectUtils::build_common_struct_member(member_id_my_float, member_flags_my_float, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_float = TypeObjectUtils::build_common_struct_member(member_id_my_float, member_flags_my_float, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Structure my_float member TypeIdentifier inconsistent.");
                                    return;
                                }
                                MemberName name_my_float = "my_float";
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_float;
                                ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                CompleteMemberDetail detail_my_float = TypeObjectUtils::build_complete_member_detail(name_my_float, member_ann_builtin_my_float, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                CompleteStructMember member_my_float = TypeObjectUtils::build_complete_struct_member(common_my_float, detail_my_float);
                                TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_float);
                            }
                            {
                                return_code_PrimitivesStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_double", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "my_double Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                StructMemberFlag member_flags_my_double = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                        false, false, false, false);
                                CommonStructMember common_my_double;
                                MemberId member_id_my_double = 0x0000000d;
                                if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_double = TypeObjectUtils::build_common_struct_member(member_id_my_double, member_flags_my_double, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_double = TypeObjectUtils::build_common_struct_member(member_id_my_double, member_flags_my_double, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Structure my_double member TypeIdentifier inconsistent.");
                                    return;
                                }
                                MemberName name_my_double = "my_double";
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_double;
                                ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                CompleteMemberDetail detail_my_double = TypeObjectUtils::build_complete_member_detail(name_my_double, member_ann_builtin_my_double, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                CompleteStructMember member_my_double = TypeObjectUtils::build_complete_struct_member(common_my_double, detail_my_double);
                                TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_double);
                            }
                            {
                                return_code_PrimitivesStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_longdouble", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "my_longdouble Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                StructMemberFlag member_flags_my_longdouble = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                        false, false, false, false);
                                CommonStructMember common_my_longdouble;
                                MemberId member_id_my_longdouble = 0x0000000e;
                                if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_longdouble = TypeObjectUtils::build_common_struct_member(member_id_my_longdouble, member_flags_my_longdouble, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_my_longdouble = TypeObjectUtils::build_common_struct_member(member_id_my_longdouble, member_flags_my_longdouble, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Structure my_longdouble member TypeIdentifier inconsistent.");
                                    return;
                                }
                                MemberName name_my_longdouble = "my_longdouble";
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_longdouble;
                                ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                CompleteMemberDetail detail_my_longdouble = TypeObjectUtils::build_complete_member_detail(name_my_longdouble, member_ann_builtin_my_longdouble, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                CompleteStructMember member_my_longdouble = TypeObjectUtils::build_complete_struct_member(common_my_longdouble, detail_my_longdouble);
                                TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_longdouble);
                            }
                            CompleteStructType struct_type_PrimitivesStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_type(struct_flags_PrimitivesStruct_TypeIntrospectionExample, header_PrimitivesStruct_TypeIntrospectionExample, member_seq_PrimitivesStruct_TypeIntrospectionExample);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_struct_type_object(struct_type_PrimitivesStruct_TypeIntrospectionExample, type_name_PrimitivesStruct_TypeIntrospectionExample.to_string()))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "PrimitivesStruct_TypeIntrospectionExample already registered in TypeObjectRegistry for a different type.");
                            }
                            return_code_PrimitivesStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "PrimitivesStruct_TypeIntrospectionExample", type_ids_PrimitivesStruct_TypeIntrospectionExample);
                            if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "PrimitivesStruct_TypeIntrospectionExample: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                    }
                    QualifiedTypeName type_name_AllStruct_TypeIntrospectionExample = "AllStruct_TypeIntrospectionExample";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_AllStruct_TypeIntrospectionExample;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_AllStruct_TypeIntrospectionExample;
                    CompleteTypeDetail detail_AllStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_AllStruct_TypeIntrospectionExample, ann_custom_AllStruct_TypeIntrospectionExample, type_name_AllStruct_TypeIntrospectionExample.to_string());
                    CompleteStructHeader header_AllStruct_TypeIntrospectionExample;
                    if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d())
                    {
                        header_AllStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_header(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1(), detail_AllStruct_TypeIntrospectionExample);
                    }
                    else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d())
                    {
                        header_AllStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_header(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2(), detail_AllStruct_TypeIntrospectionExample);
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "AllStruct_TypeIntrospectionExample Structure: base_type TypeIdentifier registered in TypeObjectRegistry is inconsistent.");
                        return;
                    }
                    CompleteStructMemberSeq member_seq_AllStruct_TypeIntrospectionExample;
                    {
                        return_code_AllStruct_TypeIntrospectionExample =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                        if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                            if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                            {
                                SBound bound = 0;
                                StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                        "anonymous_string_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                            {
                                LBound bound = 255;
                                StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                        "anonymous_string_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded: Unknown String kind.");
                                return;
                            }
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        StructMemberFlag member_flags_my_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_my_string;
                        MemberId member_id_my_string = 0x0000000f;
                        if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_my_string = TypeObjectUtils::build_common_struct_member(member_id_my_string, member_flags_my_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_my_string = TypeObjectUtils::build_common_struct_member(member_id_my_string, member_flags_my_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_string member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_my_string = "my_string";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_string;
                        ann_custom_AllStruct_TypeIntrospectionExample.reset();
                        CompleteMemberDetail detail_my_string = TypeObjectUtils::build_complete_member_detail(name_my_string, member_ann_builtin_my_string, ann_custom_AllStruct_TypeIntrospectionExample);
                        CompleteStructMember member_my_string = TypeObjectUtils::build_complete_struct_member(common_my_string, detail_my_string);
                        TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_string);
                    }
                    {
                        return_code_AllStruct_TypeIntrospectionExample =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_wstring_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                        if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            std::string type_id_kind_anonymous_wstring_unbounded("TI_STRING16_SMALL");
                            if (type_id_kind_anonymous_wstring_unbounded == "TI_STRING16_SMALL")
                            {
                                SBound bound = 0;
                                StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                        "anonymous_wstring_unbounded", true))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else if (type_id_kind_anonymous_wstring_unbounded == "TI_STRING16_LARGE")
                            {
                                LBound bound = 255;
                                StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                        "anonymous_wstring_unbounded", true))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_wstring_unbounded: Unknown WString kind.");
                                return;
                            }
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_wstring_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_wstring_unbounded: Given WString TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        StructMemberFlag member_flags_my_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_my_wstring;
                        MemberId member_id_my_wstring = 0x00000010;
                        if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_my_wstring = TypeObjectUtils::build_common_struct_member(member_id_my_wstring, member_flags_my_wstring, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_my_wstring = TypeObjectUtils::build_common_struct_member(member_id_my_wstring, member_flags_my_wstring, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_wstring member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_my_wstring = "my_wstring";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_wstring;
                        ann_custom_AllStruct_TypeIntrospectionExample.reset();
                        CompleteMemberDetail detail_my_wstring = TypeObjectUtils::build_complete_member_detail(name_my_wstring, member_ann_builtin_my_wstring, ann_custom_AllStruct_TypeIntrospectionExample);
                        CompleteStructMember member_my_wstring = TypeObjectUtils::build_complete_struct_member(common_my_wstring, detail_my_wstring);
                        TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_wstring);
                    }
                    {
                        return_code_AllStruct_TypeIntrospectionExample =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_string_41925", type_ids_AllStruct_TypeIntrospectionExample);

                        if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            std::string type_id_kind_anonymous_string_41925("TI_STRING8_LARGE");
                            if (type_id_kind_anonymous_string_41925 == "TI_STRING8_SMALL")
                            {
                                SBound bound = static_cast<SBound>(41925);
                                StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                        "anonymous_string_41925"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_41925 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else if (type_id_kind_anonymous_string_41925 == "TI_STRING8_LARGE")
                            {
                                LBound bound = 41925;
                                StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                        "anonymous_string_41925"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_41925 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_41925: Unknown String kind.");
                                return;
                            }
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_41925", type_ids_AllStruct_TypeIntrospectionExample);
                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_41925: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        StructMemberFlag member_flags_my_bounded_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_my_bounded_string;
                        MemberId member_id_my_bounded_string = 0x00000011;
                        if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_my_bounded_string = TypeObjectUtils::build_common_struct_member(member_id_my_bounded_string, member_flags_my_bounded_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_my_bounded_string = TypeObjectUtils::build_common_struct_member(member_id_my_bounded_string, member_flags_my_bounded_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_bounded_string member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_my_bounded_string = "my_bounded_string";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_bounded_string;
                        ann_custom_AllStruct_TypeIntrospectionExample.reset();
                        CompleteMemberDetail detail_my_bounded_string = TypeObjectUtils::build_complete_member_detail(name_my_bounded_string, member_ann_builtin_my_bounded_string, ann_custom_AllStruct_TypeIntrospectionExample);
                        CompleteStructMember member_my_bounded_string = TypeObjectUtils::build_complete_struct_member(common_my_bounded_string, detail_my_bounded_string);
                        TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_bounded_string);
                    }
                    {
                        return_code_AllStruct_TypeIntrospectionExample =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_wstring_20925", type_ids_AllStruct_TypeIntrospectionExample);

                        if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            std::string type_id_kind_anonymous_wstring_20925("TI_STRING16_LARGE");
                            if (type_id_kind_anonymous_wstring_20925 == "TI_STRING16_SMALL")
                            {
                                SBound bound = static_cast<SBound>(20925);
                                StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                        "anonymous_wstring_20925", true))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_wstring_20925 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else if (type_id_kind_anonymous_wstring_20925 == "TI_STRING16_LARGE")
                            {
                                LBound bound = 20925;
                                StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                        "anonymous_wstring_20925", true))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_wstring_20925 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_wstring_20925: Unknown WString kind.");
                                return;
                            }
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_wstring_20925", type_ids_AllStruct_TypeIntrospectionExample);
                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_wstring_20925: Given WString TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        StructMemberFlag member_flags_my_bounded_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_my_bounded_wstring;
                        MemberId member_id_my_bounded_wstring = 0x00000012;
                        if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_my_bounded_wstring = TypeObjectUtils::build_common_struct_member(member_id_my_bounded_wstring, member_flags_my_bounded_wstring, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_my_bounded_wstring = TypeObjectUtils::build_common_struct_member(member_id_my_bounded_wstring, member_flags_my_bounded_wstring, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_bounded_wstring member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_my_bounded_wstring = "my_bounded_wstring";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_bounded_wstring;
                        ann_custom_AllStruct_TypeIntrospectionExample.reset();
                        CompleteMemberDetail detail_my_bounded_wstring = TypeObjectUtils::build_complete_member_detail(name_my_bounded_wstring, member_ann_builtin_my_bounded_wstring, ann_custom_AllStruct_TypeIntrospectionExample);
                        CompleteStructMember member_my_bounded_wstring = TypeObjectUtils::build_complete_struct_member(common_my_bounded_wstring, detail_my_bounded_wstring);
                        TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_bounded_wstring);
                    }
                    {
                        return_code_AllStruct_TypeIntrospectionExample =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);

                        if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EnumTypeFlag enum_flags_MyEnum = 0;
                            BitBound bit_bound_MyEnum = 32;
                            CommonEnumeratedHeader common_MyEnum = TypeObjectUtils::build_common_enumerated_header(bit_bound_MyEnum);
                            QualifiedTypeName type_name_MyEnum = "MyEnum";
                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyEnum;
                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyEnum;
                            CompleteTypeDetail detail_MyEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyEnum, ann_custom_MyEnum, type_name_MyEnum.to_string());
                            CompleteEnumeratedHeader header_MyEnum = TypeObjectUtils::build_complete_enumerated_header(common_MyEnum, detail_MyEnum);
                            CompleteEnumeratedLiteralSeq literal_seq_MyEnum;
                            {
                                EnumeratedLiteralFlag flags_A = TypeObjectUtils::build_enumerated_literal_flag(false);
                                CommonEnumeratedLiteral common_A = TypeObjectUtils::build_common_enumerated_literal(0, flags_A);
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_A;
                                ann_custom_MyEnum.reset();
                                MemberName name_A = "A";
                                CompleteMemberDetail detail_A = TypeObjectUtils::build_complete_member_detail(name_A, member_ann_builtin_A, ann_custom_MyEnum);
                                CompleteEnumeratedLiteral literal_A = TypeObjectUtils::build_complete_enumerated_literal(common_A, detail_A);
                                TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_A);
                            }
                            {
                                EnumeratedLiteralFlag flags_B = TypeObjectUtils::build_enumerated_literal_flag(false);
                                CommonEnumeratedLiteral common_B = TypeObjectUtils::build_common_enumerated_literal(1, flags_B);
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_B;
                                ann_custom_MyEnum.reset();
                                MemberName name_B = "B";
                                CompleteMemberDetail detail_B = TypeObjectUtils::build_complete_member_detail(name_B, member_ann_builtin_B, ann_custom_MyEnum);
                                CompleteEnumeratedLiteral literal_B = TypeObjectUtils::build_complete_enumerated_literal(common_B, detail_B);
                                TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_B);
                            }
                            {
                                EnumeratedLiteralFlag flags_C = TypeObjectUtils::build_enumerated_literal_flag(false);
                                CommonEnumeratedLiteral common_C = TypeObjectUtils::build_common_enumerated_literal(2, flags_C);
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_C;
                                ann_custom_MyEnum.reset();
                                MemberName name_C = "C";
                                CompleteMemberDetail detail_C = TypeObjectUtils::build_complete_member_detail(name_C, member_ann_builtin_C, ann_custom_MyEnum);
                                CompleteEnumeratedLiteral literal_C = TypeObjectUtils::build_complete_enumerated_literal(common_C, detail_C);
                                TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_C);
                            }
                            CompleteEnumeratedType enumerated_type_MyEnum = TypeObjectUtils::build_complete_enumerated_type(enum_flags_MyEnum, header_MyEnum,
                                    literal_seq_MyEnum);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_MyEnum, type_name_MyEnum.to_string()))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "MyEnum already registered in TypeObjectRegistry for a different type.");
                            }
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);
                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        StructMemberFlag member_flags_my_enum = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_my_enum;
                        MemberId member_id_my_enum = 0x00000013;
                        if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_my_enum = TypeObjectUtils::build_common_struct_member(member_id_my_enum, member_flags_my_enum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_my_enum = TypeObjectUtils::build_common_struct_member(member_id_my_enum, member_flags_my_enum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_enum member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_my_enum = "my_enum";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_enum;
                        ann_custom_AllStruct_TypeIntrospectionExample.reset();
                        CompleteMemberDetail detail_my_enum = TypeObjectUtils::build_complete_member_detail(name_my_enum, member_ann_builtin_my_enum, ann_custom_AllStruct_TypeIntrospectionExample);
                        CompleteStructMember member_my_enum = TypeObjectUtils::build_complete_struct_member(common_my_enum, detail_my_enum);
                        TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_enum);
                    }
                    {
                        return_code_AllStruct_TypeIntrospectionExample =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "MyAliasedEnum", type_ids_AllStruct_TypeIntrospectionExample);

                        if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            AliasTypeFlag alias_flags_MyAliasedEnum = 0;
                            QualifiedTypeName type_name_MyAliasedEnum = "MyAliasedEnum";
                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyAliasedEnum;
                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyAliasedEnum;
                            CompleteTypeDetail detail_MyAliasedEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyAliasedEnum, ann_custom_MyAliasedEnum, type_name_MyAliasedEnum.to_string());
                            CompleteAliasHeader header_MyAliasedEnum = TypeObjectUtils::build_complete_alias_header(detail_MyAliasedEnum);
                            AliasMemberFlag related_flags_MyAliasedEnum = 0;
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EnumTypeFlag enum_flags_MyEnum = 0;
                                BitBound bit_bound_MyEnum = 32;
                                CommonEnumeratedHeader common_MyEnum = TypeObjectUtils::build_common_enumerated_header(bit_bound_MyEnum);
                                QualifiedTypeName type_name_MyEnum = "MyEnum";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyEnum;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyEnum;
                                CompleteTypeDetail detail_MyEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyEnum, ann_custom_MyEnum, type_name_MyEnum.to_string());
                                CompleteEnumeratedHeader header_MyEnum = TypeObjectUtils::build_complete_enumerated_header(common_MyEnum, detail_MyEnum);
                                CompleteEnumeratedLiteralSeq literal_seq_MyEnum;
                                {
                                    EnumeratedLiteralFlag flags_A = TypeObjectUtils::build_enumerated_literal_flag(false);
                                    CommonEnumeratedLiteral common_A = TypeObjectUtils::build_common_enumerated_literal(0, flags_A);
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_A;
                                    ann_custom_MyEnum.reset();
                                    MemberName name_A = "A";
                                    CompleteMemberDetail detail_A = TypeObjectUtils::build_complete_member_detail(name_A, member_ann_builtin_A, ann_custom_MyEnum);
                                    CompleteEnumeratedLiteral literal_A = TypeObjectUtils::build_complete_enumerated_literal(common_A, detail_A);
                                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_A);
                                }
                                {
                                    EnumeratedLiteralFlag flags_B = TypeObjectUtils::build_enumerated_literal_flag(false);
                                    CommonEnumeratedLiteral common_B = TypeObjectUtils::build_common_enumerated_literal(1, flags_B);
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_B;
                                    ann_custom_MyEnum.reset();
                                    MemberName name_B = "B";
                                    CompleteMemberDetail detail_B = TypeObjectUtils::build_complete_member_detail(name_B, member_ann_builtin_B, ann_custom_MyEnum);
                                    CompleteEnumeratedLiteral literal_B = TypeObjectUtils::build_complete_enumerated_literal(common_B, detail_B);
                                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_B);
                                }
                                {
                                    EnumeratedLiteralFlag flags_C = TypeObjectUtils::build_enumerated_literal_flag(false);
                                    CommonEnumeratedLiteral common_C = TypeObjectUtils::build_common_enumerated_literal(2, flags_C);
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_C;
                                    ann_custom_MyEnum.reset();
                                    MemberName name_C = "C";
                                    CompleteMemberDetail detail_C = TypeObjectUtils::build_complete_member_detail(name_C, member_ann_builtin_C, ann_custom_MyEnum);
                                    CompleteEnumeratedLiteral literal_C = TypeObjectUtils::build_complete_enumerated_literal(common_C, detail_C);
                                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_C);
                                }
                                CompleteEnumeratedType enumerated_type_MyEnum = TypeObjectUtils::build_complete_enumerated_type(enum_flags_MyEnum, header_MyEnum,
                                        literal_seq_MyEnum);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_MyEnum, type_name_MyEnum.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyEnum already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            CommonAliasBody common_MyAliasedEnum;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_MyAliasedEnum = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedEnum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_MyAliasedEnum = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedEnum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyAliasedEnum related TypeIdentifier inconsistent.");
                                return;
                            }
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyAliasedEnum;
                            ann_custom_MyAliasedEnum.reset();
                            CompleteAliasBody body_MyAliasedEnum = TypeObjectUtils::build_complete_alias_body(common_MyAliasedEnum, member_ann_builtin_MyAliasedEnum, ann_custom_MyAliasedEnum);
                            CompleteAliasType alias_type_MyAliasedEnum = TypeObjectUtils::build_complete_alias_type(alias_flags_MyAliasedEnum, header_MyAliasedEnum, body_MyAliasedEnum);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyAliasedEnum, type_name_MyAliasedEnum.to_string()))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "MyAliasedEnum already registered in TypeObjectRegistry for a different type.");
                            }
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MyAliasedEnum", type_ids_AllStruct_TypeIntrospectionExample);
                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyAliasedEnum: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        StructMemberFlag member_flags_my_aliased_enum = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_my_aliased_enum;
                        MemberId member_id_my_aliased_enum = 0x00000014;
                        if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_my_aliased_enum = TypeObjectUtils::build_common_struct_member(member_id_my_aliased_enum, member_flags_my_aliased_enum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_my_aliased_enum = TypeObjectUtils::build_common_struct_member(member_id_my_aliased_enum, member_flags_my_aliased_enum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_aliased_enum member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_my_aliased_enum = "my_aliased_enum";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_aliased_enum;
                        ann_custom_AllStruct_TypeIntrospectionExample.reset();
                        CompleteMemberDetail detail_my_aliased_enum = TypeObjectUtils::build_complete_member_detail(name_my_aliased_enum, member_ann_builtin_my_aliased_enum, ann_custom_AllStruct_TypeIntrospectionExample);
                        CompleteStructMember member_my_aliased_enum = TypeObjectUtils::build_complete_struct_member(common_my_aliased_enum, detail_my_aliased_enum);
                        TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_aliased_enum);
                    }
                    {
                        return_code_AllStruct_TypeIntrospectionExample =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "MyAliasedBoundedString", type_ids_AllStruct_TypeIntrospectionExample);

                        if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            AliasTypeFlag alias_flags_MyAliasedBoundedString = 0;
                            QualifiedTypeName type_name_MyAliasedBoundedString = "MyAliasedBoundedString";
                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyAliasedBoundedString;
                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyAliasedBoundedString;
                            CompleteTypeDetail detail_MyAliasedBoundedString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyAliasedBoundedString, ann_custom_MyAliasedBoundedString, type_name_MyAliasedBoundedString.to_string());
                            CompleteAliasHeader header_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_header(detail_MyAliasedBoundedString);
                            AliasMemberFlag related_flags_MyAliasedBoundedString = 0;
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_100", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                std::string type_id_kind_anonymous_string_100("TI_STRING8_SMALL");
                                if (type_id_kind_anonymous_string_100 == "TI_STRING8_SMALL")
                                {
                                    SBound bound = static_cast<SBound>(100);
                                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                            "anonymous_string_100"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_100 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else if (type_id_kind_anonymous_string_100 == "TI_STRING8_LARGE")
                                {
                                    LBound bound = 100;
                                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                            "anonymous_string_100"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_100 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_100: Unknown String kind.");
                                    return;
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_string_100", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_100: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            CommonAliasBody common_MyAliasedBoundedString;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_MyAliasedBoundedString = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedBoundedString, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_MyAliasedBoundedString = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedBoundedString, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyAliasedBoundedString related TypeIdentifier inconsistent.");
                                return;
                            }
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyAliasedBoundedString;
                            ann_custom_MyAliasedBoundedString.reset();
                            CompleteAliasBody body_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_body(common_MyAliasedBoundedString, member_ann_builtin_MyAliasedBoundedString, ann_custom_MyAliasedBoundedString);
                            CompleteAliasType alias_type_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_type(alias_flags_MyAliasedBoundedString, header_MyAliasedBoundedString, body_MyAliasedBoundedString);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyAliasedBoundedString, type_name_MyAliasedBoundedString.to_string()))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "MyAliasedBoundedString already registered in TypeObjectRegistry for a different type.");
                            }
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MyAliasedBoundedString", type_ids_AllStruct_TypeIntrospectionExample);
                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyAliasedBoundedString: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        StructMemberFlag member_flags_my_aliased_bounded_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_my_aliased_bounded_string;
                        MemberId member_id_my_aliased_bounded_string = 0x00000015;
                        if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_my_aliased_bounded_string = TypeObjectUtils::build_common_struct_member(member_id_my_aliased_bounded_string, member_flags_my_aliased_bounded_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_my_aliased_bounded_string = TypeObjectUtils::build_common_struct_member(member_id_my_aliased_bounded_string, member_flags_my_aliased_bounded_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_aliased_bounded_string member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_my_aliased_bounded_string = "my_aliased_bounded_string";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_aliased_bounded_string;
                        ann_custom_AllStruct_TypeIntrospectionExample.reset();
                        CompleteMemberDetail detail_my_aliased_bounded_string = TypeObjectUtils::build_complete_member_detail(name_my_aliased_bounded_string, member_ann_builtin_my_aliased_bounded_string, ann_custom_AllStruct_TypeIntrospectionExample);
                        CompleteStructMember member_my_aliased_bounded_string = TypeObjectUtils::build_complete_struct_member(common_my_aliased_bounded_string, detail_my_aliased_bounded_string);
                        TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_aliased_bounded_string);
                    }
                    {
                        return_code_AllStruct_TypeIntrospectionExample =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "MyRecursiveAlias", type_ids_AllStruct_TypeIntrospectionExample);

                        if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            AliasTypeFlag alias_flags_MyRecursiveAlias = 0;
                            QualifiedTypeName type_name_MyRecursiveAlias = "MyRecursiveAlias";
                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyRecursiveAlias;
                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyRecursiveAlias;
                            CompleteTypeDetail detail_MyRecursiveAlias = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyRecursiveAlias, ann_custom_MyRecursiveAlias, type_name_MyRecursiveAlias.to_string());
                            CompleteAliasHeader header_MyRecursiveAlias = TypeObjectUtils::build_complete_alias_header(detail_MyRecursiveAlias);
                            AliasMemberFlag related_flags_MyRecursiveAlias = 0;
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MyAliasedEnum", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                AliasTypeFlag alias_flags_MyAliasedEnum = 0;
                                QualifiedTypeName type_name_MyAliasedEnum = "MyAliasedEnum";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyAliasedEnum;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyAliasedEnum;
                                CompleteTypeDetail detail_MyAliasedEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyAliasedEnum, ann_custom_MyAliasedEnum, type_name_MyAliasedEnum.to_string());
                                CompleteAliasHeader header_MyAliasedEnum = TypeObjectUtils::build_complete_alias_header(detail_MyAliasedEnum);
                                AliasMemberFlag related_flags_MyAliasedEnum = 0;
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EnumTypeFlag enum_flags_MyEnum = 0;
                                    BitBound bit_bound_MyEnum = 32;
                                    CommonEnumeratedHeader common_MyEnum = TypeObjectUtils::build_common_enumerated_header(bit_bound_MyEnum);
                                    QualifiedTypeName type_name_MyEnum = "MyEnum";
                                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyEnum;
                                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyEnum;
                                    CompleteTypeDetail detail_MyEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyEnum, ann_custom_MyEnum, type_name_MyEnum.to_string());
                                    CompleteEnumeratedHeader header_MyEnum = TypeObjectUtils::build_complete_enumerated_header(common_MyEnum, detail_MyEnum);
                                    CompleteEnumeratedLiteralSeq literal_seq_MyEnum;
                                    {
                                        EnumeratedLiteralFlag flags_A = TypeObjectUtils::build_enumerated_literal_flag(false);
                                        CommonEnumeratedLiteral common_A = TypeObjectUtils::build_common_enumerated_literal(0, flags_A);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_A;
                                        ann_custom_MyEnum.reset();
                                        MemberName name_A = "A";
                                        CompleteMemberDetail detail_A = TypeObjectUtils::build_complete_member_detail(name_A, member_ann_builtin_A, ann_custom_MyEnum);
                                        CompleteEnumeratedLiteral literal_A = TypeObjectUtils::build_complete_enumerated_literal(common_A, detail_A);
                                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_A);
                                    }
                                    {
                                        EnumeratedLiteralFlag flags_B = TypeObjectUtils::build_enumerated_literal_flag(false);
                                        CommonEnumeratedLiteral common_B = TypeObjectUtils::build_common_enumerated_literal(1, flags_B);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_B;
                                        ann_custom_MyEnum.reset();
                                        MemberName name_B = "B";
                                        CompleteMemberDetail detail_B = TypeObjectUtils::build_complete_member_detail(name_B, member_ann_builtin_B, ann_custom_MyEnum);
                                        CompleteEnumeratedLiteral literal_B = TypeObjectUtils::build_complete_enumerated_literal(common_B, detail_B);
                                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_B);
                                    }
                                    {
                                        EnumeratedLiteralFlag flags_C = TypeObjectUtils::build_enumerated_literal_flag(false);
                                        CommonEnumeratedLiteral common_C = TypeObjectUtils::build_common_enumerated_literal(2, flags_C);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_C;
                                        ann_custom_MyEnum.reset();
                                        MemberName name_C = "C";
                                        CompleteMemberDetail detail_C = TypeObjectUtils::build_complete_member_detail(name_C, member_ann_builtin_C, ann_custom_MyEnum);
                                        CompleteEnumeratedLiteral literal_C = TypeObjectUtils::build_complete_enumerated_literal(common_C, detail_C);
                                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_C);
                                    }
                                    CompleteEnumeratedType enumerated_type_MyEnum = TypeObjectUtils::build_complete_enumerated_type(enum_flags_MyEnum, header_MyEnum,
                                            literal_seq_MyEnum);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_MyEnum, type_name_MyEnum.to_string()))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyEnum already registered in TypeObjectRegistry for a different type.");
                                    }
                                    return_code_AllStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);
                                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                CommonAliasBody common_MyAliasedEnum;
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_MyAliasedEnum = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedEnum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_MyAliasedEnum = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedEnum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyAliasedEnum related TypeIdentifier inconsistent.");
                                    return;
                                }
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyAliasedEnum;
                                ann_custom_MyAliasedEnum.reset();
                                CompleteAliasBody body_MyAliasedEnum = TypeObjectUtils::build_complete_alias_body(common_MyAliasedEnum, member_ann_builtin_MyAliasedEnum, ann_custom_MyAliasedEnum);
                                CompleteAliasType alias_type_MyAliasedEnum = TypeObjectUtils::build_complete_alias_type(alias_flags_MyAliasedEnum, header_MyAliasedEnum, body_MyAliasedEnum);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyAliasedEnum, type_name_MyAliasedEnum.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyAliasedEnum already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyAliasedEnum", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyAliasedEnum: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            CommonAliasBody common_MyRecursiveAlias;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_MyRecursiveAlias = TypeObjectUtils::build_common_alias_body(related_flags_MyRecursiveAlias, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_MyRecursiveAlias = TypeObjectUtils::build_common_alias_body(related_flags_MyRecursiveAlias, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyRecursiveAlias related TypeIdentifier inconsistent.");
                                return;
                            }
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyRecursiveAlias;
                            ann_custom_MyRecursiveAlias.reset();
                            CompleteAliasBody body_MyRecursiveAlias = TypeObjectUtils::build_complete_alias_body(common_MyRecursiveAlias, member_ann_builtin_MyRecursiveAlias, ann_custom_MyRecursiveAlias);
                            CompleteAliasType alias_type_MyRecursiveAlias = TypeObjectUtils::build_complete_alias_type(alias_flags_MyRecursiveAlias, header_MyRecursiveAlias, body_MyRecursiveAlias);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyRecursiveAlias, type_name_MyRecursiveAlias.to_string()))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "MyRecursiveAlias already registered in TypeObjectRegistry for a different type.");
                            }
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MyRecursiveAlias", type_ids_AllStruct_TypeIntrospectionExample);
                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyRecursiveAlias: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        StructMemberFlag member_flags_my_recursive_alias = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_my_recursive_alias;
                        MemberId member_id_my_recursive_alias = 0x00000016;
                        if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_my_recursive_alias = TypeObjectUtils::build_common_struct_member(member_id_my_recursive_alias, member_flags_my_recursive_alias, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_my_recursive_alias = TypeObjectUtils::build_common_struct_member(member_id_my_recursive_alias, member_flags_my_recursive_alias, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_recursive_alias member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_my_recursive_alias = "my_recursive_alias";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_recursive_alias;
                        ann_custom_AllStruct_TypeIntrospectionExample.reset();
                        CompleteMemberDetail detail_my_recursive_alias = TypeObjectUtils::build_complete_member_detail(name_my_recursive_alias, member_ann_builtin_my_recursive_alias, ann_custom_AllStruct_TypeIntrospectionExample);
                        CompleteStructMember member_my_recursive_alias = TypeObjectUtils::build_complete_struct_member(common_my_recursive_alias, detail_my_recursive_alias);
                        TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_recursive_alias);
                    }
                    {
                        return_code_AllStruct_TypeIntrospectionExample =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_sequence_int16_t_5", type_ids_AllStruct_TypeIntrospectionExample);

                        if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_int16_t", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            TypeIdentifier* element_identifier_anonymous_sequence_int16_t_5 {nullptr};
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                element_identifier_anonymous_sequence_int16_t_5 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                element_identifier_anonymous_sequence_int16_t_5 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Sequence element TypeIdentifier inconsistent.");
                                return;
                            }
                            EquivalenceKind equiv_kind_anonymous_sequence_int16_t_5 = EK_COMPLETE;
                            if (TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d())
                            {
                                equiv_kind_anonymous_sequence_int16_t_5 = EK_BOTH;
                            }
                            CollectionElementFlag element_flags_anonymous_sequence_int16_t_5 = 0;
                            PlainCollectionHeader header_anonymous_sequence_int16_t_5 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_int16_t_5, element_flags_anonymous_sequence_int16_t_5);
                            std::string type_id_kind_anonymous_sequence_int16_t_5("TI_PLAIN_SEQUENCE_SMALL");
                            if (type_id_kind_anonymous_sequence_int16_t_5 == "TI_PLAIN_SEQUENCE_SMALL")
                            {
                                SBound bound = static_cast<SBound>(5);
                                PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_int16_t_5, bound,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int16_t_5));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_int16_t_5"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_sequence_int16_t_5 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                LBound bound = 5;
                                PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_int16_t_5, bound,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int16_t_5));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_int16_t_5"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_sequence_int16_t_5 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_sequence_int16_t_5", type_ids_AllStruct_TypeIntrospectionExample);
                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_sequence_int16_t_5: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        StructMemberFlag member_flags_short_sequence = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_short_sequence;
                        MemberId member_id_short_sequence = 0x00000017;
                        if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_short_sequence = TypeObjectUtils::build_common_struct_member(member_id_short_sequence, member_flags_short_sequence, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_short_sequence = TypeObjectUtils::build_common_struct_member(member_id_short_sequence, member_flags_short_sequence, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure short_sequence member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_short_sequence = "short_sequence";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_short_sequence;
                        ann_custom_AllStruct_TypeIntrospectionExample.reset();
                        CompleteMemberDetail detail_short_sequence = TypeObjectUtils::build_complete_member_detail(name_short_sequence, member_ann_builtin_short_sequence, ann_custom_AllStruct_TypeIntrospectionExample);
                        CompleteStructMember member_short_sequence = TypeObjectUtils::build_complete_struct_member(common_short_sequence, detail_short_sequence);
                        TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_short_sequence);
                    }
                    {
                        return_code_AllStruct_TypeIntrospectionExample =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_array_int32_t_2_3_4", type_ids_AllStruct_TypeIntrospectionExample);

                        if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_int32_t", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            TypeIdentifier* element_identifier_anonymous_array_int32_t_2_3_4 {nullptr};
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                element_identifier_anonymous_array_int32_t_2_3_4 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                element_identifier_anonymous_array_int32_t_2_3_4 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Array element TypeIdentifier inconsistent.");
                                return;
                            }
                            EquivalenceKind equiv_kind_anonymous_array_int32_t_2_3_4 = EK_COMPLETE;
                            if (TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d())
                            {
                                equiv_kind_anonymous_array_int32_t_2_3_4 = EK_BOTH;
                            }
                            CollectionElementFlag element_flags_anonymous_array_int32_t_2_3_4 = 0;
                            PlainCollectionHeader header_anonymous_array_int32_t_2_3_4 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_int32_t_2_3_4, element_flags_anonymous_array_int32_t_2_3_4);
                            std::string type_id_kind_anonymous_array_int32_t_2_3_4("TI_PLAIN_ARRAY_SMALL");
                            if (type_id_kind_anonymous_array_int32_t_2_3_4 == "TI_PLAIN_ARRAY_SMALL")
                            {
                                SBoundSeq array_bound_seq;
                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(2));

                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(3));

                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                                PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_int32_t_2_3_4, array_bound_seq,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int32_t_2_3_4));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_int32_t_2_3_4"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_int32_t_2_3_4 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                LBoundSeq array_bound_seq;
                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(2));

                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(3));

                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(4));

                                PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header_anonymous_array_int32_t_2_3_4, array_bound_seq,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int32_t_2_3_4));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_int32_t_2_3_4"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_int32_t_2_3_4 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_array_int32_t_2_3_4", type_ids_AllStruct_TypeIntrospectionExample);
                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_array_int32_t_2_3_4: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        StructMemberFlag member_flags_long_array = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_long_array;
                        MemberId member_id_long_array = 0x00000018;
                        if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_long_array = TypeObjectUtils::build_common_struct_member(member_id_long_array, member_flags_long_array, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_long_array = TypeObjectUtils::build_common_struct_member(member_id_long_array, member_flags_long_array, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure long_array member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_long_array = "long_array";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_long_array;
                        ann_custom_AllStruct_TypeIntrospectionExample.reset();
                        CompleteMemberDetail detail_long_array = TypeObjectUtils::build_complete_member_detail(name_long_array, member_ann_builtin_long_array, ann_custom_AllStruct_TypeIntrospectionExample);
                        CompleteStructMember member_long_array = TypeObjectUtils::build_complete_struct_member(common_long_array, detail_long_array);
                        TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_long_array);
                    }
                    {
                        return_code_AllStruct_TypeIntrospectionExample =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                        if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                                if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                                {
                                    SBound bound = 0;
                                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                            "anonymous_string_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                                {
                                    LBound bound = 255;
                                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                            "anonymous_string_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded: Unknown String kind.");
                                    return;
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded {nullptr};
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded inconsistent element TypeIdentifier.");
                                return;
                            }
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                                if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                                {
                                    SBound bound = 0;
                                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                            "anonymous_string_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                                {
                                    LBound bound = 255;
                                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                            "anonymous_string_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded: Unknown String kind.");
                                    return;
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded {nullptr};
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded inconsistent key TypeIdentifier.");
                                return;
                            }
                            EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = EK_BOTH;
                            if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d()) ||
                                    (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                                    (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                            {
                                equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = EK_COMPLETE;
                            }
                            CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = 0;
                            CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = 0;
                            PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded);
                            std::string type_id_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded("TI_PLAIN_MAP_SMALL");
                            if (type_id_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded == "TI_PLAIN_MAP_SMALL")
                            {
                                SBound bound = 0;
                                PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded, bound,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded,
                                            eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                LBound bound = 0;
                                PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded, bound,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded,
                                            eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        StructMemberFlag member_flags_string_unbounded_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_string_unbounded_map;
                        MemberId member_id_string_unbounded_map = 0x00000019;
                        if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_string_unbounded_map = TypeObjectUtils::build_common_struct_member(member_id_string_unbounded_map, member_flags_string_unbounded_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_string_unbounded_map = TypeObjectUtils::build_common_struct_member(member_id_string_unbounded_map, member_flags_string_unbounded_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure string_unbounded_map member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_string_unbounded_map = "string_unbounded_map";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_string_unbounded_map;
                        ann_custom_AllStruct_TypeIntrospectionExample.reset();
                        CompleteMemberDetail detail_string_unbounded_map = TypeObjectUtils::build_complete_member_detail(name_string_unbounded_map, member_ann_builtin_string_unbounded_map, ann_custom_AllStruct_TypeIntrospectionExample);
                        CompleteStructMember member_string_unbounded_map = TypeObjectUtils::build_complete_struct_member(common_string_unbounded_map, detail_string_unbounded_map);
                        TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_string_unbounded_map);
                    }
                    {
                        return_code_AllStruct_TypeIntrospectionExample =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                        if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MyAliasedBoundedString", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                AliasTypeFlag alias_flags_MyAliasedBoundedString = 0;
                                QualifiedTypeName type_name_MyAliasedBoundedString = "MyAliasedBoundedString";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyAliasedBoundedString;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyAliasedBoundedString;
                                CompleteTypeDetail detail_MyAliasedBoundedString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyAliasedBoundedString, ann_custom_MyAliasedBoundedString, type_name_MyAliasedBoundedString.to_string());
                                CompleteAliasHeader header_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_header(detail_MyAliasedBoundedString);
                                AliasMemberFlag related_flags_MyAliasedBoundedString = 0;
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_string_100", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    std::string type_id_kind_anonymous_string_100("TI_STRING8_SMALL");
                                    if (type_id_kind_anonymous_string_100 == "TI_STRING8_SMALL")
                                    {
                                        SBound bound = static_cast<SBound>(100);
                                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                "anonymous_string_100"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_100 already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else if (type_id_kind_anonymous_string_100 == "TI_STRING8_LARGE")
                                    {
                                        LBound bound = 100;
                                        StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                "anonymous_string_100"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_100 already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_100: Unknown String kind.");
                                        return;
                                    }
                                    return_code_AllStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_string_100", type_ids_AllStruct_TypeIntrospectionExample);
                                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_100: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                CommonAliasBody common_MyAliasedBoundedString;
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_MyAliasedBoundedString = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedBoundedString, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_MyAliasedBoundedString = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedBoundedString, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyAliasedBoundedString related TypeIdentifier inconsistent.");
                                    return;
                                }
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyAliasedBoundedString;
                                ann_custom_MyAliasedBoundedString.reset();
                                CompleteAliasBody body_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_body(common_MyAliasedBoundedString, member_ann_builtin_MyAliasedBoundedString, ann_custom_MyAliasedBoundedString);
                                CompleteAliasType alias_type_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_type(alias_flags_MyAliasedBoundedString, header_MyAliasedBoundedString, body_MyAliasedBoundedString);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyAliasedBoundedString, type_name_MyAliasedBoundedString.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyAliasedBoundedString already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyAliasedBoundedString", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyAliasedBoundedString: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded {nullptr};
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded inconsistent element TypeIdentifier.");
                                return;
                            }
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                                if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                                {
                                    SBound bound = 0;
                                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                            "anonymous_string_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                                {
                                    LBound bound = 255;
                                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                            "anonymous_string_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded: Unknown String kind.");
                                    return;
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded {nullptr};
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded inconsistent key TypeIdentifier.");
                                return;
                            }
                            EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = EK_BOTH;
                            if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d()) ||
                                    (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->map_sdefn().header().equiv_kind())) ||
                                    (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->map_ldefn().header().equiv_kind())))
                            {
                                equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = EK_COMPLETE;
                            }
                            CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = 0;
                            CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = 0;
                            PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded);
                            std::string type_id_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded("TI_PLAIN_MAP_SMALL");
                            if (type_id_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded == "TI_PLAIN_MAP_SMALL")
                            {
                                SBound bound = 0;
                                PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded, bound,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded,
                                            eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                LBound bound = 0;
                                PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded, bound,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded,
                                            eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        StructMemberFlag member_flags_string_alias_unbounded_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_string_alias_unbounded_map;
                        MemberId member_id_string_alias_unbounded_map = 0x0000001a;
                        if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_string_alias_unbounded_map = TypeObjectUtils::build_common_struct_member(member_id_string_alias_unbounded_map, member_flags_string_alias_unbounded_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_string_alias_unbounded_map = TypeObjectUtils::build_common_struct_member(member_id_string_alias_unbounded_map, member_flags_string_alias_unbounded_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure string_alias_unbounded_map member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_string_alias_unbounded_map = "string_alias_unbounded_map";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_string_alias_unbounded_map;
                        ann_custom_AllStruct_TypeIntrospectionExample.reset();
                        CompleteMemberDetail detail_string_alias_unbounded_map = TypeObjectUtils::build_complete_member_detail(name_string_alias_unbounded_map, member_ann_builtin_string_alias_unbounded_map, ann_custom_AllStruct_TypeIntrospectionExample);
                        CompleteStructMember member_string_alias_unbounded_map = TypeObjectUtils::build_complete_struct_member(common_string_alias_unbounded_map, detail_string_alias_unbounded_map);
                        TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_string_alias_unbounded_map);
                    }
                    {
                        return_code_AllStruct_TypeIntrospectionExample =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_map_int16_t_int32_t_2", type_ids_AllStruct_TypeIntrospectionExample);

                        if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_int32_t", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            TypeIdentifier* element_identifier_anonymous_map_int16_t_int32_t_2 {nullptr};
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                element_identifier_anonymous_map_int16_t_int32_t_2 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                element_identifier_anonymous_map_int16_t_int32_t_2 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_map_int16_t_int32_t_2 inconsistent element TypeIdentifier.");
                                return;
                            }
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_int16_t", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            TypeIdentifier* key_identifier_anonymous_map_int16_t_int32_t_2 {nullptr};
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                key_identifier_anonymous_map_int16_t_int32_t_2 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                key_identifier_anonymous_map_int16_t_int32_t_2 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_map_int16_t_int32_t_2 inconsistent key TypeIdentifier.");
                                return;
                            }
                            EquivalenceKind equiv_kind_anonymous_map_int16_t_int32_t_2 = EK_BOTH;
                            if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_int32_t_2->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->_d()) ||
                                    (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->map_sdefn().header().equiv_kind())) ||
                                    (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->map_ldefn().header().equiv_kind())))
                            {
                                equiv_kind_anonymous_map_int16_t_int32_t_2 = EK_COMPLETE;
                            }
                            CollectionElementFlag element_flags_anonymous_map_int16_t_int32_t_2 = 0;
                            CollectionElementFlag key_flags_anonymous_map_int16_t_int32_t_2 = 0;
                            PlainCollectionHeader header_anonymous_map_int16_t_int32_t_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_int32_t_2, element_flags_anonymous_map_int16_t_int32_t_2);
                            std::string type_id_kind_anonymous_map_int16_t_int32_t_2("TI_PLAIN_MAP_SMALL");
                            if (type_id_kind_anonymous_map_int16_t_int32_t_2 == "TI_PLAIN_MAP_SMALL")
                            {
                                SBound bound = static_cast<SBound>(2);
                                PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_int32_t_2, bound,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_int32_t_2), key_flags_anonymous_map_int16_t_int32_t_2,
                                            eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_int32_t_2));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_int32_t_2"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_int16_t_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                LBound bound = 2;
                                PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_int16_t_int32_t_2, bound,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_int32_t_2), key_flags_anonymous_map_int16_t_int32_t_2,
                                            eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_int32_t_2));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int16_t_int32_t_2"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_int16_t_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_map_int16_t_int32_t_2", type_ids_AllStruct_TypeIntrospectionExample);
                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_map_int16_t_int32_t_2: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        StructMemberFlag member_flags_short_long_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_short_long_map;
                        MemberId member_id_short_long_map = 0x0000001b;
                        if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_short_long_map = TypeObjectUtils::build_common_struct_member(member_id_short_long_map, member_flags_short_long_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_short_long_map = TypeObjectUtils::build_common_struct_member(member_id_short_long_map, member_flags_short_long_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure short_long_map member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_short_long_map = "short_long_map";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_short_long_map;
                        ann_custom_AllStruct_TypeIntrospectionExample.reset();
                        CompleteMemberDetail detail_short_long_map = TypeObjectUtils::build_complete_member_detail(name_short_long_map, member_ann_builtin_short_long_map, ann_custom_AllStruct_TypeIntrospectionExample);
                        CompleteStructMember member_short_long_map = TypeObjectUtils::build_complete_struct_member(common_short_long_map, detail_short_long_map);
                        TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_short_long_map);
                    }
                    CompleteStructType struct_type_AllStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_type(struct_flags_AllStruct_TypeIntrospectionExample, header_AllStruct_TypeIntrospectionExample, member_seq_AllStruct_TypeIntrospectionExample);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_AllStruct_TypeIntrospectionExample, type_name_AllStruct_TypeIntrospectionExample.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "AllStruct_TypeIntrospectionExample already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_AllStruct_TypeIntrospectionExample =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "AllStruct_TypeIntrospectionExample", type_ids_AllStruct_TypeIntrospectionExample);
                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "AllStruct_TypeIntrospectionExample: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_inner_struct = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_inner_struct;
            MemberId member_id_inner_struct = 0x00000001;
            if (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_inner_struct = TypeObjectUtils::build_common_struct_member(member_id_inner_struct, member_flags_inner_struct, type_ids_DataTest_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_inner_struct = TypeObjectUtils::build_common_struct_member(member_id_inner_struct, member_flags_inner_struct, type_ids_DataTest_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure inner_struct member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_inner_struct = "inner_struct";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_inner_struct;
            ann_custom_DataTest_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_inner_struct = TypeObjectUtils::build_complete_member_detail(name_inner_struct, member_ann_builtin_inner_struct, ann_custom_DataTest_TypeIntrospectionExample);
            CompleteStructMember member_inner_struct = TypeObjectUtils::build_complete_struct_member(common_inner_struct, detail_inner_struct);
            TypeObjectUtils::add_complete_struct_member(member_seq_DataTest_TypeIntrospectionExample, member_inner_struct);
        }
        {
            return_code_DataTest_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_AllStruct_TypeIntrospectionExample_unbounded", type_ids_DataTest_TypeIntrospectionExample);

            if (return_code_DataTest_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_DataTest_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "AllStruct_TypeIntrospectionExample", type_ids_DataTest_TypeIntrospectionExample);

                if (return_code_DataTest_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    {
                        StructTypeFlag struct_flags_AllStruct_TypeIntrospectionExample = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                false, false);
                        ReturnCode_t return_code_AllStruct_TypeIntrospectionExample;
                        TypeIdentifierPair type_ids_AllStruct_TypeIntrospectionExample;
                        return_code_AllStruct_TypeIntrospectionExample =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "PrimitivesStruct_TypeIntrospectionExample", type_ids_AllStruct_TypeIntrospectionExample);

                        if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags_PrimitivesStruct_TypeIntrospectionExample = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code_PrimitivesStruct_TypeIntrospectionExample;
                                TypeIdentifierPair type_ids_PrimitivesStruct_TypeIntrospectionExample;
                                QualifiedTypeName type_name_PrimitivesStruct_TypeIntrospectionExample = "PrimitivesStruct_TypeIntrospectionExample";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_PrimitivesStruct_TypeIntrospectionExample;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_PrimitivesStruct_TypeIntrospectionExample;
                                CompleteTypeDetail detail_PrimitivesStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_PrimitivesStruct_TypeIntrospectionExample, ann_custom_PrimitivesStruct_TypeIntrospectionExample, type_name_PrimitivesStruct_TypeIntrospectionExample.to_string());
                                CompleteStructHeader header_PrimitivesStruct_TypeIntrospectionExample;
                                header_PrimitivesStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_PrimitivesStruct_TypeIntrospectionExample);
                                CompleteStructMemberSeq member_seq_PrimitivesStruct_TypeIntrospectionExample;
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_bool", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_bool = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_bool;
                                    MemberId member_id_my_bool = 0x00000000;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_bool = TypeObjectUtils::build_common_struct_member(member_id_my_bool, member_flags_my_bool, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_bool = TypeObjectUtils::build_common_struct_member(member_id_my_bool, member_flags_my_bool, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_bool member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_bool = "my_bool";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_bool;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_bool = TypeObjectUtils::build_complete_member_detail(name_my_bool, member_ann_builtin_my_bool, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_bool = TypeObjectUtils::build_complete_struct_member(common_my_bool, detail_my_bool);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_bool);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_byte", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_octet = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_octet;
                                    MemberId member_id_my_octet = 0x00000001;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_octet = TypeObjectUtils::build_common_struct_member(member_id_my_octet, member_flags_my_octet, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_octet = TypeObjectUtils::build_common_struct_member(member_id_my_octet, member_flags_my_octet, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_octet member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_octet = "my_octet";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_octet;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_octet = TypeObjectUtils::build_complete_member_detail(name_my_octet, member_ann_builtin_my_octet, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_octet = TypeObjectUtils::build_complete_struct_member(common_my_octet, detail_my_octet);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_octet);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_char", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_char Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_char = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_char;
                                    MemberId member_id_my_char = 0x00000002;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_char = TypeObjectUtils::build_common_struct_member(member_id_my_char, member_flags_my_char, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_char = TypeObjectUtils::build_common_struct_member(member_id_my_char, member_flags_my_char, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_char member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_char = "my_char";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_char;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_char = TypeObjectUtils::build_complete_member_detail(name_my_char, member_ann_builtin_my_char, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_char = TypeObjectUtils::build_complete_struct_member(common_my_char, detail_my_char);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_char);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_wchar_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_wchar Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_wchar = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_wchar;
                                    MemberId member_id_my_wchar = 0x00000003;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_wchar = TypeObjectUtils::build_common_struct_member(member_id_my_wchar, member_flags_my_wchar, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_wchar = TypeObjectUtils::build_common_struct_member(member_id_my_wchar, member_flags_my_wchar, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_wchar member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_wchar = "my_wchar";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_wchar;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_wchar = TypeObjectUtils::build_complete_member_detail(name_my_wchar, member_ann_builtin_my_wchar, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_wchar = TypeObjectUtils::build_complete_struct_member(common_my_wchar, detail_my_wchar);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_wchar);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int32_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_long Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_long = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_long;
                                    MemberId member_id_my_long = 0x00000004;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_long = TypeObjectUtils::build_common_struct_member(member_id_my_long, member_flags_my_long, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_long = TypeObjectUtils::build_common_struct_member(member_id_my_long, member_flags_my_long, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_long member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_long = "my_long";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_long;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_long = TypeObjectUtils::build_complete_member_detail(name_my_long, member_ann_builtin_my_long, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_long = TypeObjectUtils::build_complete_struct_member(common_my_long, detail_my_long);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_long);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_uint32_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_ulong Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_ulong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_ulong;
                                    MemberId member_id_my_ulong = 0x00000005;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_ulong = TypeObjectUtils::build_common_struct_member(member_id_my_ulong, member_flags_my_ulong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_ulong = TypeObjectUtils::build_common_struct_member(member_id_my_ulong, member_flags_my_ulong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_ulong member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_ulong = "my_ulong";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_ulong;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_ulong = TypeObjectUtils::build_complete_member_detail(name_my_ulong, member_ann_builtin_my_ulong, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_ulong = TypeObjectUtils::build_complete_struct_member(common_my_ulong, detail_my_ulong);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_ulong);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int8_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_int8 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_int8 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_int8;
                                    MemberId member_id_my_int8 = 0x00000006;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_int8 = TypeObjectUtils::build_common_struct_member(member_id_my_int8, member_flags_my_int8, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_int8 = TypeObjectUtils::build_common_struct_member(member_id_my_int8, member_flags_my_int8, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_int8 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_int8 = "my_int8";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_int8;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_int8 = TypeObjectUtils::build_complete_member_detail(name_my_int8, member_ann_builtin_my_int8, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_int8 = TypeObjectUtils::build_complete_struct_member(common_my_int8, detail_my_int8);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_int8);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_uint8_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_uint8 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_uint8 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_uint8;
                                    MemberId member_id_my_uint8 = 0x00000007;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_uint8 = TypeObjectUtils::build_common_struct_member(member_id_my_uint8, member_flags_my_uint8, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_uint8 = TypeObjectUtils::build_common_struct_member(member_id_my_uint8, member_flags_my_uint8, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_uint8 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_uint8 = "my_uint8";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_uint8;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_uint8 = TypeObjectUtils::build_complete_member_detail(name_my_uint8, member_ann_builtin_my_uint8, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_uint8 = TypeObjectUtils::build_complete_struct_member(common_my_uint8, detail_my_uint8);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_uint8);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int16_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_short Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_short = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_short;
                                    MemberId member_id_my_short = 0x00000008;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_short = TypeObjectUtils::build_common_struct_member(member_id_my_short, member_flags_my_short, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_short = TypeObjectUtils::build_common_struct_member(member_id_my_short, member_flags_my_short, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_short member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_short = "my_short";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_short;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_short = TypeObjectUtils::build_complete_member_detail(name_my_short, member_ann_builtin_my_short, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_short = TypeObjectUtils::build_complete_struct_member(common_my_short, detail_my_short);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_short);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_uint16_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_ushort Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_ushort = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_ushort;
                                    MemberId member_id_my_ushort = 0x00000009;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_ushort = TypeObjectUtils::build_common_struct_member(member_id_my_ushort, member_flags_my_ushort, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_ushort = TypeObjectUtils::build_common_struct_member(member_id_my_ushort, member_flags_my_ushort, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_ushort member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_ushort = "my_ushort";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_ushort;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_ushort = TypeObjectUtils::build_complete_member_detail(name_my_ushort, member_ann_builtin_my_ushort, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_ushort = TypeObjectUtils::build_complete_struct_member(common_my_ushort, detail_my_ushort);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_ushort);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int64_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_longlong Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_longlong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_longlong;
                                    MemberId member_id_my_longlong = 0x0000000a;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_longlong = TypeObjectUtils::build_common_struct_member(member_id_my_longlong, member_flags_my_longlong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_longlong = TypeObjectUtils::build_common_struct_member(member_id_my_longlong, member_flags_my_longlong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_longlong member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_longlong = "my_longlong";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_longlong;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_longlong = TypeObjectUtils::build_complete_member_detail(name_my_longlong, member_ann_builtin_my_longlong, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_longlong = TypeObjectUtils::build_complete_struct_member(common_my_longlong, detail_my_longlong);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_longlong);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_uint64_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_ulonglong Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_ulonglong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_ulonglong;
                                    MemberId member_id_my_ulonglong = 0x0000000b;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_ulonglong = TypeObjectUtils::build_common_struct_member(member_id_my_ulonglong, member_flags_my_ulonglong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_ulonglong = TypeObjectUtils::build_common_struct_member(member_id_my_ulonglong, member_flags_my_ulonglong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_ulonglong member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_ulonglong = "my_ulonglong";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_ulonglong;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_ulonglong = TypeObjectUtils::build_complete_member_detail(name_my_ulonglong, member_ann_builtin_my_ulonglong, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_ulonglong = TypeObjectUtils::build_complete_struct_member(common_my_ulonglong, detail_my_ulonglong);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_ulonglong);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_float", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_float Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_float = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_float;
                                    MemberId member_id_my_float = 0x0000000c;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_float = TypeObjectUtils::build_common_struct_member(member_id_my_float, member_flags_my_float, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_float = TypeObjectUtils::build_common_struct_member(member_id_my_float, member_flags_my_float, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_float member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_float = "my_float";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_float;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_float = TypeObjectUtils::build_complete_member_detail(name_my_float, member_ann_builtin_my_float, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_float = TypeObjectUtils::build_complete_struct_member(common_my_float, detail_my_float);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_float);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_double", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_double Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_double = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_double;
                                    MemberId member_id_my_double = 0x0000000d;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_double = TypeObjectUtils::build_common_struct_member(member_id_my_double, member_flags_my_double, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_double = TypeObjectUtils::build_common_struct_member(member_id_my_double, member_flags_my_double, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_double member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_double = "my_double";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_double;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_double = TypeObjectUtils::build_complete_member_detail(name_my_double, member_ann_builtin_my_double, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_double = TypeObjectUtils::build_complete_struct_member(common_my_double, detail_my_double);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_double);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_longdouble", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_longdouble Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_longdouble = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_longdouble;
                                    MemberId member_id_my_longdouble = 0x0000000e;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_longdouble = TypeObjectUtils::build_common_struct_member(member_id_my_longdouble, member_flags_my_longdouble, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_longdouble = TypeObjectUtils::build_common_struct_member(member_id_my_longdouble, member_flags_my_longdouble, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_longdouble member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_longdouble = "my_longdouble";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_longdouble;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_longdouble = TypeObjectUtils::build_complete_member_detail(name_my_longdouble, member_ann_builtin_my_longdouble, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_longdouble = TypeObjectUtils::build_complete_struct_member(common_my_longdouble, detail_my_longdouble);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_longdouble);
                                }
                                CompleteStructType struct_type_PrimitivesStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_type(struct_flags_PrimitivesStruct_TypeIntrospectionExample, header_PrimitivesStruct_TypeIntrospectionExample, member_seq_PrimitivesStruct_TypeIntrospectionExample);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type_PrimitivesStruct_TypeIntrospectionExample, type_name_PrimitivesStruct_TypeIntrospectionExample.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "PrimitivesStruct_TypeIntrospectionExample already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code_PrimitivesStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "PrimitivesStruct_TypeIntrospectionExample", type_ids_PrimitivesStruct_TypeIntrospectionExample);
                                if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "PrimitivesStruct_TypeIntrospectionExample: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        QualifiedTypeName type_name_AllStruct_TypeIntrospectionExample = "AllStruct_TypeIntrospectionExample";
                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_AllStruct_TypeIntrospectionExample;
                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_AllStruct_TypeIntrospectionExample;
                        CompleteTypeDetail detail_AllStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_AllStruct_TypeIntrospectionExample, ann_custom_AllStruct_TypeIntrospectionExample, type_name_AllStruct_TypeIntrospectionExample.to_string());
                        CompleteStructHeader header_AllStruct_TypeIntrospectionExample;
                        if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d())
                        {
                            header_AllStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_header(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1(), detail_AllStruct_TypeIntrospectionExample);
                        }
                        else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d())
                        {
                            header_AllStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_header(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2(), detail_AllStruct_TypeIntrospectionExample);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "AllStruct_TypeIntrospectionExample Structure: base_type TypeIdentifier registered in TypeObjectRegistry is inconsistent.");
                            return;
                        }
                        CompleteStructMemberSeq member_seq_AllStruct_TypeIntrospectionExample;
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                                if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                                {
                                    SBound bound = 0;
                                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                            "anonymous_string_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                                {
                                    LBound bound = 255;
                                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                            "anonymous_string_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded: Unknown String kind.");
                                    return;
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_my_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_my_string;
                            MemberId member_id_my_string = 0x0000000f;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_string = TypeObjectUtils::build_common_struct_member(member_id_my_string, member_flags_my_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_string = TypeObjectUtils::build_common_struct_member(member_id_my_string, member_flags_my_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_string member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_my_string = "my_string";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_string;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_my_string = TypeObjectUtils::build_complete_member_detail(name_my_string, member_ann_builtin_my_string, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_my_string = TypeObjectUtils::build_complete_struct_member(common_my_string, detail_my_string);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_string);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_wstring_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                std::string type_id_kind_anonymous_wstring_unbounded("TI_STRING16_SMALL");
                                if (type_id_kind_anonymous_wstring_unbounded == "TI_STRING16_SMALL")
                                {
                                    SBound bound = 0;
                                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                            "anonymous_wstring_unbounded", true))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else if (type_id_kind_anonymous_wstring_unbounded == "TI_STRING16_LARGE")
                                {
                                    LBound bound = 255;
                                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                            "anonymous_wstring_unbounded", true))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_wstring_unbounded: Unknown WString kind.");
                                    return;
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_wstring_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_wstring_unbounded: Given WString TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_my_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_my_wstring;
                            MemberId member_id_my_wstring = 0x00000010;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_wstring = TypeObjectUtils::build_common_struct_member(member_id_my_wstring, member_flags_my_wstring, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_wstring = TypeObjectUtils::build_common_struct_member(member_id_my_wstring, member_flags_my_wstring, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_wstring member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_my_wstring = "my_wstring";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_wstring;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_my_wstring = TypeObjectUtils::build_complete_member_detail(name_my_wstring, member_ann_builtin_my_wstring, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_my_wstring = TypeObjectUtils::build_complete_struct_member(common_my_wstring, detail_my_wstring);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_wstring);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_41925", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                std::string type_id_kind_anonymous_string_41925("TI_STRING8_LARGE");
                                if (type_id_kind_anonymous_string_41925 == "TI_STRING8_SMALL")
                                {
                                    SBound bound = static_cast<SBound>(41925);
                                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                            "anonymous_string_41925"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_41925 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else if (type_id_kind_anonymous_string_41925 == "TI_STRING8_LARGE")
                                {
                                    LBound bound = 41925;
                                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                            "anonymous_string_41925"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_41925 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_41925: Unknown String kind.");
                                    return;
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_string_41925", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_41925: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_my_bounded_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_my_bounded_string;
                            MemberId member_id_my_bounded_string = 0x00000011;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_bounded_string = TypeObjectUtils::build_common_struct_member(member_id_my_bounded_string, member_flags_my_bounded_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_bounded_string = TypeObjectUtils::build_common_struct_member(member_id_my_bounded_string, member_flags_my_bounded_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_bounded_string member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_my_bounded_string = "my_bounded_string";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_bounded_string;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_my_bounded_string = TypeObjectUtils::build_complete_member_detail(name_my_bounded_string, member_ann_builtin_my_bounded_string, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_my_bounded_string = TypeObjectUtils::build_complete_struct_member(common_my_bounded_string, detail_my_bounded_string);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_bounded_string);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_wstring_20925", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                std::string type_id_kind_anonymous_wstring_20925("TI_STRING16_LARGE");
                                if (type_id_kind_anonymous_wstring_20925 == "TI_STRING16_SMALL")
                                {
                                    SBound bound = static_cast<SBound>(20925);
                                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                            "anonymous_wstring_20925", true))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_wstring_20925 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else if (type_id_kind_anonymous_wstring_20925 == "TI_STRING16_LARGE")
                                {
                                    LBound bound = 20925;
                                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                            "anonymous_wstring_20925", true))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_wstring_20925 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_wstring_20925: Unknown WString kind.");
                                    return;
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_wstring_20925", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_wstring_20925: Given WString TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_my_bounded_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_my_bounded_wstring;
                            MemberId member_id_my_bounded_wstring = 0x00000012;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_bounded_wstring = TypeObjectUtils::build_common_struct_member(member_id_my_bounded_wstring, member_flags_my_bounded_wstring, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_bounded_wstring = TypeObjectUtils::build_common_struct_member(member_id_my_bounded_wstring, member_flags_my_bounded_wstring, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_bounded_wstring member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_my_bounded_wstring = "my_bounded_wstring";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_bounded_wstring;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_my_bounded_wstring = TypeObjectUtils::build_complete_member_detail(name_my_bounded_wstring, member_ann_builtin_my_bounded_wstring, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_my_bounded_wstring = TypeObjectUtils::build_complete_struct_member(common_my_bounded_wstring, detail_my_bounded_wstring);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_bounded_wstring);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EnumTypeFlag enum_flags_MyEnum = 0;
                                BitBound bit_bound_MyEnum = 32;
                                CommonEnumeratedHeader common_MyEnum = TypeObjectUtils::build_common_enumerated_header(bit_bound_MyEnum);
                                QualifiedTypeName type_name_MyEnum = "MyEnum";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyEnum;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyEnum;
                                CompleteTypeDetail detail_MyEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyEnum, ann_custom_MyEnum, type_name_MyEnum.to_string());
                                CompleteEnumeratedHeader header_MyEnum = TypeObjectUtils::build_complete_enumerated_header(common_MyEnum, detail_MyEnum);
                                CompleteEnumeratedLiteralSeq literal_seq_MyEnum;
                                {
                                    EnumeratedLiteralFlag flags_A = TypeObjectUtils::build_enumerated_literal_flag(false);
                                    CommonEnumeratedLiteral common_A = TypeObjectUtils::build_common_enumerated_literal(0, flags_A);
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_A;
                                    ann_custom_MyEnum.reset();
                                    MemberName name_A = "A";
                                    CompleteMemberDetail detail_A = TypeObjectUtils::build_complete_member_detail(name_A, member_ann_builtin_A, ann_custom_MyEnum);
                                    CompleteEnumeratedLiteral literal_A = TypeObjectUtils::build_complete_enumerated_literal(common_A, detail_A);
                                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_A);
                                }
                                {
                                    EnumeratedLiteralFlag flags_B = TypeObjectUtils::build_enumerated_literal_flag(false);
                                    CommonEnumeratedLiteral common_B = TypeObjectUtils::build_common_enumerated_literal(1, flags_B);
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_B;
                                    ann_custom_MyEnum.reset();
                                    MemberName name_B = "B";
                                    CompleteMemberDetail detail_B = TypeObjectUtils::build_complete_member_detail(name_B, member_ann_builtin_B, ann_custom_MyEnum);
                                    CompleteEnumeratedLiteral literal_B = TypeObjectUtils::build_complete_enumerated_literal(common_B, detail_B);
                                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_B);
                                }
                                {
                                    EnumeratedLiteralFlag flags_C = TypeObjectUtils::build_enumerated_literal_flag(false);
                                    CommonEnumeratedLiteral common_C = TypeObjectUtils::build_common_enumerated_literal(2, flags_C);
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_C;
                                    ann_custom_MyEnum.reset();
                                    MemberName name_C = "C";
                                    CompleteMemberDetail detail_C = TypeObjectUtils::build_complete_member_detail(name_C, member_ann_builtin_C, ann_custom_MyEnum);
                                    CompleteEnumeratedLiteral literal_C = TypeObjectUtils::build_complete_enumerated_literal(common_C, detail_C);
                                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_C);
                                }
                                CompleteEnumeratedType enumerated_type_MyEnum = TypeObjectUtils::build_complete_enumerated_type(enum_flags_MyEnum, header_MyEnum,
                                        literal_seq_MyEnum);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_MyEnum, type_name_MyEnum.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyEnum already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_my_enum = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_my_enum;
                            MemberId member_id_my_enum = 0x00000013;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_enum = TypeObjectUtils::build_common_struct_member(member_id_my_enum, member_flags_my_enum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_enum = TypeObjectUtils::build_common_struct_member(member_id_my_enum, member_flags_my_enum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_enum member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_my_enum = "my_enum";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_enum;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_my_enum = TypeObjectUtils::build_complete_member_detail(name_my_enum, member_ann_builtin_my_enum, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_my_enum = TypeObjectUtils::build_complete_struct_member(common_my_enum, detail_my_enum);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_enum);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MyAliasedEnum", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                AliasTypeFlag alias_flags_MyAliasedEnum = 0;
                                QualifiedTypeName type_name_MyAliasedEnum = "MyAliasedEnum";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyAliasedEnum;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyAliasedEnum;
                                CompleteTypeDetail detail_MyAliasedEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyAliasedEnum, ann_custom_MyAliasedEnum, type_name_MyAliasedEnum.to_string());
                                CompleteAliasHeader header_MyAliasedEnum = TypeObjectUtils::build_complete_alias_header(detail_MyAliasedEnum);
                                AliasMemberFlag related_flags_MyAliasedEnum = 0;
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EnumTypeFlag enum_flags_MyEnum = 0;
                                    BitBound bit_bound_MyEnum = 32;
                                    CommonEnumeratedHeader common_MyEnum = TypeObjectUtils::build_common_enumerated_header(bit_bound_MyEnum);
                                    QualifiedTypeName type_name_MyEnum = "MyEnum";
                                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyEnum;
                                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyEnum;
                                    CompleteTypeDetail detail_MyEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyEnum, ann_custom_MyEnum, type_name_MyEnum.to_string());
                                    CompleteEnumeratedHeader header_MyEnum = TypeObjectUtils::build_complete_enumerated_header(common_MyEnum, detail_MyEnum);
                                    CompleteEnumeratedLiteralSeq literal_seq_MyEnum;
                                    {
                                        EnumeratedLiteralFlag flags_A = TypeObjectUtils::build_enumerated_literal_flag(false);
                                        CommonEnumeratedLiteral common_A = TypeObjectUtils::build_common_enumerated_literal(0, flags_A);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_A;
                                        ann_custom_MyEnum.reset();
                                        MemberName name_A = "A";
                                        CompleteMemberDetail detail_A = TypeObjectUtils::build_complete_member_detail(name_A, member_ann_builtin_A, ann_custom_MyEnum);
                                        CompleteEnumeratedLiteral literal_A = TypeObjectUtils::build_complete_enumerated_literal(common_A, detail_A);
                                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_A);
                                    }
                                    {
                                        EnumeratedLiteralFlag flags_B = TypeObjectUtils::build_enumerated_literal_flag(false);
                                        CommonEnumeratedLiteral common_B = TypeObjectUtils::build_common_enumerated_literal(1, flags_B);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_B;
                                        ann_custom_MyEnum.reset();
                                        MemberName name_B = "B";
                                        CompleteMemberDetail detail_B = TypeObjectUtils::build_complete_member_detail(name_B, member_ann_builtin_B, ann_custom_MyEnum);
                                        CompleteEnumeratedLiteral literal_B = TypeObjectUtils::build_complete_enumerated_literal(common_B, detail_B);
                                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_B);
                                    }
                                    {
                                        EnumeratedLiteralFlag flags_C = TypeObjectUtils::build_enumerated_literal_flag(false);
                                        CommonEnumeratedLiteral common_C = TypeObjectUtils::build_common_enumerated_literal(2, flags_C);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_C;
                                        ann_custom_MyEnum.reset();
                                        MemberName name_C = "C";
                                        CompleteMemberDetail detail_C = TypeObjectUtils::build_complete_member_detail(name_C, member_ann_builtin_C, ann_custom_MyEnum);
                                        CompleteEnumeratedLiteral literal_C = TypeObjectUtils::build_complete_enumerated_literal(common_C, detail_C);
                                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_C);
                                    }
                                    CompleteEnumeratedType enumerated_type_MyEnum = TypeObjectUtils::build_complete_enumerated_type(enum_flags_MyEnum, header_MyEnum,
                                            literal_seq_MyEnum);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_MyEnum, type_name_MyEnum.to_string()))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyEnum already registered in TypeObjectRegistry for a different type.");
                                    }
                                    return_code_AllStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);
                                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                CommonAliasBody common_MyAliasedEnum;
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_MyAliasedEnum = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedEnum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_MyAliasedEnum = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedEnum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyAliasedEnum related TypeIdentifier inconsistent.");
                                    return;
                                }
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyAliasedEnum;
                                ann_custom_MyAliasedEnum.reset();
                                CompleteAliasBody body_MyAliasedEnum = TypeObjectUtils::build_complete_alias_body(common_MyAliasedEnum, member_ann_builtin_MyAliasedEnum, ann_custom_MyAliasedEnum);
                                CompleteAliasType alias_type_MyAliasedEnum = TypeObjectUtils::build_complete_alias_type(alias_flags_MyAliasedEnum, header_MyAliasedEnum, body_MyAliasedEnum);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyAliasedEnum, type_name_MyAliasedEnum.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyAliasedEnum already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyAliasedEnum", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyAliasedEnum: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_my_aliased_enum = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_my_aliased_enum;
                            MemberId member_id_my_aliased_enum = 0x00000014;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_aliased_enum = TypeObjectUtils::build_common_struct_member(member_id_my_aliased_enum, member_flags_my_aliased_enum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_aliased_enum = TypeObjectUtils::build_common_struct_member(member_id_my_aliased_enum, member_flags_my_aliased_enum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_aliased_enum member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_my_aliased_enum = "my_aliased_enum";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_aliased_enum;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_my_aliased_enum = TypeObjectUtils::build_complete_member_detail(name_my_aliased_enum, member_ann_builtin_my_aliased_enum, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_my_aliased_enum = TypeObjectUtils::build_complete_struct_member(common_my_aliased_enum, detail_my_aliased_enum);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_aliased_enum);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MyAliasedBoundedString", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                AliasTypeFlag alias_flags_MyAliasedBoundedString = 0;
                                QualifiedTypeName type_name_MyAliasedBoundedString = "MyAliasedBoundedString";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyAliasedBoundedString;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyAliasedBoundedString;
                                CompleteTypeDetail detail_MyAliasedBoundedString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyAliasedBoundedString, ann_custom_MyAliasedBoundedString, type_name_MyAliasedBoundedString.to_string());
                                CompleteAliasHeader header_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_header(detail_MyAliasedBoundedString);
                                AliasMemberFlag related_flags_MyAliasedBoundedString = 0;
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_string_100", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    std::string type_id_kind_anonymous_string_100("TI_STRING8_SMALL");
                                    if (type_id_kind_anonymous_string_100 == "TI_STRING8_SMALL")
                                    {
                                        SBound bound = static_cast<SBound>(100);
                                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                "anonymous_string_100"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_100 already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else if (type_id_kind_anonymous_string_100 == "TI_STRING8_LARGE")
                                    {
                                        LBound bound = 100;
                                        StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                "anonymous_string_100"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_100 already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_100: Unknown String kind.");
                                        return;
                                    }
                                    return_code_AllStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_string_100", type_ids_AllStruct_TypeIntrospectionExample);
                                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_100: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                CommonAliasBody common_MyAliasedBoundedString;
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_MyAliasedBoundedString = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedBoundedString, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_MyAliasedBoundedString = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedBoundedString, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyAliasedBoundedString related TypeIdentifier inconsistent.");
                                    return;
                                }
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyAliasedBoundedString;
                                ann_custom_MyAliasedBoundedString.reset();
                                CompleteAliasBody body_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_body(common_MyAliasedBoundedString, member_ann_builtin_MyAliasedBoundedString, ann_custom_MyAliasedBoundedString);
                                CompleteAliasType alias_type_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_type(alias_flags_MyAliasedBoundedString, header_MyAliasedBoundedString, body_MyAliasedBoundedString);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyAliasedBoundedString, type_name_MyAliasedBoundedString.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyAliasedBoundedString already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyAliasedBoundedString", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyAliasedBoundedString: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_my_aliased_bounded_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_my_aliased_bounded_string;
                            MemberId member_id_my_aliased_bounded_string = 0x00000015;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_aliased_bounded_string = TypeObjectUtils::build_common_struct_member(member_id_my_aliased_bounded_string, member_flags_my_aliased_bounded_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_aliased_bounded_string = TypeObjectUtils::build_common_struct_member(member_id_my_aliased_bounded_string, member_flags_my_aliased_bounded_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_aliased_bounded_string member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_my_aliased_bounded_string = "my_aliased_bounded_string";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_aliased_bounded_string;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_my_aliased_bounded_string = TypeObjectUtils::build_complete_member_detail(name_my_aliased_bounded_string, member_ann_builtin_my_aliased_bounded_string, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_my_aliased_bounded_string = TypeObjectUtils::build_complete_struct_member(common_my_aliased_bounded_string, detail_my_aliased_bounded_string);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_aliased_bounded_string);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MyRecursiveAlias", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                AliasTypeFlag alias_flags_MyRecursiveAlias = 0;
                                QualifiedTypeName type_name_MyRecursiveAlias = "MyRecursiveAlias";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyRecursiveAlias;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyRecursiveAlias;
                                CompleteTypeDetail detail_MyRecursiveAlias = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyRecursiveAlias, ann_custom_MyRecursiveAlias, type_name_MyRecursiveAlias.to_string());
                                CompleteAliasHeader header_MyRecursiveAlias = TypeObjectUtils::build_complete_alias_header(detail_MyRecursiveAlias);
                                AliasMemberFlag related_flags_MyRecursiveAlias = 0;
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyAliasedEnum", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    AliasTypeFlag alias_flags_MyAliasedEnum = 0;
                                    QualifiedTypeName type_name_MyAliasedEnum = "MyAliasedEnum";
                                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyAliasedEnum;
                                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyAliasedEnum;
                                    CompleteTypeDetail detail_MyAliasedEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyAliasedEnum, ann_custom_MyAliasedEnum, type_name_MyAliasedEnum.to_string());
                                    CompleteAliasHeader header_MyAliasedEnum = TypeObjectUtils::build_complete_alias_header(detail_MyAliasedEnum);
                                    AliasMemberFlag related_flags_MyAliasedEnum = 0;
                                    return_code_AllStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);

                                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EnumTypeFlag enum_flags_MyEnum = 0;
                                        BitBound bit_bound_MyEnum = 32;
                                        CommonEnumeratedHeader common_MyEnum = TypeObjectUtils::build_common_enumerated_header(bit_bound_MyEnum);
                                        QualifiedTypeName type_name_MyEnum = "MyEnum";
                                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyEnum;
                                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyEnum;
                                        CompleteTypeDetail detail_MyEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyEnum, ann_custom_MyEnum, type_name_MyEnum.to_string());
                                        CompleteEnumeratedHeader header_MyEnum = TypeObjectUtils::build_complete_enumerated_header(common_MyEnum, detail_MyEnum);
                                        CompleteEnumeratedLiteralSeq literal_seq_MyEnum;
                                        {
                                            EnumeratedLiteralFlag flags_A = TypeObjectUtils::build_enumerated_literal_flag(false);
                                            CommonEnumeratedLiteral common_A = TypeObjectUtils::build_common_enumerated_literal(0, flags_A);
                                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_A;
                                            ann_custom_MyEnum.reset();
                                            MemberName name_A = "A";
                                            CompleteMemberDetail detail_A = TypeObjectUtils::build_complete_member_detail(name_A, member_ann_builtin_A, ann_custom_MyEnum);
                                            CompleteEnumeratedLiteral literal_A = TypeObjectUtils::build_complete_enumerated_literal(common_A, detail_A);
                                            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_A);
                                        }
                                        {
                                            EnumeratedLiteralFlag flags_B = TypeObjectUtils::build_enumerated_literal_flag(false);
                                            CommonEnumeratedLiteral common_B = TypeObjectUtils::build_common_enumerated_literal(1, flags_B);
                                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_B;
                                            ann_custom_MyEnum.reset();
                                            MemberName name_B = "B";
                                            CompleteMemberDetail detail_B = TypeObjectUtils::build_complete_member_detail(name_B, member_ann_builtin_B, ann_custom_MyEnum);
                                            CompleteEnumeratedLiteral literal_B = TypeObjectUtils::build_complete_enumerated_literal(common_B, detail_B);
                                            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_B);
                                        }
                                        {
                                            EnumeratedLiteralFlag flags_C = TypeObjectUtils::build_enumerated_literal_flag(false);
                                            CommonEnumeratedLiteral common_C = TypeObjectUtils::build_common_enumerated_literal(2, flags_C);
                                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_C;
                                            ann_custom_MyEnum.reset();
                                            MemberName name_C = "C";
                                            CompleteMemberDetail detail_C = TypeObjectUtils::build_complete_member_detail(name_C, member_ann_builtin_C, ann_custom_MyEnum);
                                            CompleteEnumeratedLiteral literal_C = TypeObjectUtils::build_complete_enumerated_literal(common_C, detail_C);
                                            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_C);
                                        }
                                        CompleteEnumeratedType enumerated_type_MyEnum = TypeObjectUtils::build_complete_enumerated_type(enum_flags_MyEnum, header_MyEnum,
                                                literal_seq_MyEnum);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_MyEnum, type_name_MyEnum.to_string()))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyEnum already registered in TypeObjectRegistry for a different type.");
                                        }
                                        return_code_AllStruct_TypeIntrospectionExample =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);
                                        if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonAliasBody common_MyAliasedEnum;
                                    if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_MyAliasedEnum = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedEnum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_MyAliasedEnum = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedEnum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyAliasedEnum related TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyAliasedEnum;
                                    ann_custom_MyAliasedEnum.reset();
                                    CompleteAliasBody body_MyAliasedEnum = TypeObjectUtils::build_complete_alias_body(common_MyAliasedEnum, member_ann_builtin_MyAliasedEnum, ann_custom_MyAliasedEnum);
                                    CompleteAliasType alias_type_MyAliasedEnum = TypeObjectUtils::build_complete_alias_type(alias_flags_MyAliasedEnum, header_MyAliasedEnum, body_MyAliasedEnum);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyAliasedEnum, type_name_MyAliasedEnum.to_string()))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyAliasedEnum already registered in TypeObjectRegistry for a different type.");
                                    }
                                    return_code_AllStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "MyAliasedEnum", type_ids_AllStruct_TypeIntrospectionExample);
                                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "MyAliasedEnum: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                CommonAliasBody common_MyRecursiveAlias;
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_MyRecursiveAlias = TypeObjectUtils::build_common_alias_body(related_flags_MyRecursiveAlias, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_MyRecursiveAlias = TypeObjectUtils::build_common_alias_body(related_flags_MyRecursiveAlias, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyRecursiveAlias related TypeIdentifier inconsistent.");
                                    return;
                                }
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyRecursiveAlias;
                                ann_custom_MyRecursiveAlias.reset();
                                CompleteAliasBody body_MyRecursiveAlias = TypeObjectUtils::build_complete_alias_body(common_MyRecursiveAlias, member_ann_builtin_MyRecursiveAlias, ann_custom_MyRecursiveAlias);
                                CompleteAliasType alias_type_MyRecursiveAlias = TypeObjectUtils::build_complete_alias_type(alias_flags_MyRecursiveAlias, header_MyRecursiveAlias, body_MyRecursiveAlias);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyRecursiveAlias, type_name_MyRecursiveAlias.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyRecursiveAlias already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyRecursiveAlias", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyRecursiveAlias: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_my_recursive_alias = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_my_recursive_alias;
                            MemberId member_id_my_recursive_alias = 0x00000016;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_recursive_alias = TypeObjectUtils::build_common_struct_member(member_id_my_recursive_alias, member_flags_my_recursive_alias, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_recursive_alias = TypeObjectUtils::build_common_struct_member(member_id_my_recursive_alias, member_flags_my_recursive_alias, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_recursive_alias member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_my_recursive_alias = "my_recursive_alias";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_recursive_alias;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_my_recursive_alias = TypeObjectUtils::build_complete_member_detail(name_my_recursive_alias, member_ann_builtin_my_recursive_alias, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_my_recursive_alias = TypeObjectUtils::build_complete_struct_member(common_my_recursive_alias, detail_my_recursive_alias);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_recursive_alias);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_sequence_int16_t_5", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_int16_t", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                TypeIdentifier* element_identifier_anonymous_sequence_int16_t_5 {nullptr};
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_sequence_int16_t_5 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_sequence_int16_t_5 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Sequence element TypeIdentifier inconsistent.");
                                    return;
                                }
                                EquivalenceKind equiv_kind_anonymous_sequence_int16_t_5 = EK_COMPLETE;
                                if (TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d())
                                {
                                    equiv_kind_anonymous_sequence_int16_t_5 = EK_BOTH;
                                }
                                CollectionElementFlag element_flags_anonymous_sequence_int16_t_5 = 0;
                                PlainCollectionHeader header_anonymous_sequence_int16_t_5 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_int16_t_5, element_flags_anonymous_sequence_int16_t_5);
                                std::string type_id_kind_anonymous_sequence_int16_t_5("TI_PLAIN_SEQUENCE_SMALL");
                                if (type_id_kind_anonymous_sequence_int16_t_5 == "TI_PLAIN_SEQUENCE_SMALL")
                                {
                                    SBound bound = static_cast<SBound>(5);
                                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_int16_t_5, bound,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int16_t_5));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_int16_t_5"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_sequence_int16_t_5 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    LBound bound = 5;
                                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_int16_t_5, bound,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int16_t_5));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_int16_t_5"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_sequence_int16_t_5 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_sequence_int16_t_5", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_sequence_int16_t_5: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_short_sequence = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_short_sequence;
                            MemberId member_id_short_sequence = 0x00000017;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_short_sequence = TypeObjectUtils::build_common_struct_member(member_id_short_sequence, member_flags_short_sequence, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_short_sequence = TypeObjectUtils::build_common_struct_member(member_id_short_sequence, member_flags_short_sequence, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure short_sequence member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_short_sequence = "short_sequence";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_short_sequence;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_short_sequence = TypeObjectUtils::build_complete_member_detail(name_short_sequence, member_ann_builtin_short_sequence, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_short_sequence = TypeObjectUtils::build_complete_struct_member(common_short_sequence, detail_short_sequence);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_short_sequence);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_array_int32_t_2_3_4", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_int32_t", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                TypeIdentifier* element_identifier_anonymous_array_int32_t_2_3_4 {nullptr};
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_array_int32_t_2_3_4 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_array_int32_t_2_3_4 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Array element TypeIdentifier inconsistent.");
                                    return;
                                }
                                EquivalenceKind equiv_kind_anonymous_array_int32_t_2_3_4 = EK_COMPLETE;
                                if (TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d())
                                {
                                    equiv_kind_anonymous_array_int32_t_2_3_4 = EK_BOTH;
                                }
                                CollectionElementFlag element_flags_anonymous_array_int32_t_2_3_4 = 0;
                                PlainCollectionHeader header_anonymous_array_int32_t_2_3_4 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_int32_t_2_3_4, element_flags_anonymous_array_int32_t_2_3_4);
                                std::string type_id_kind_anonymous_array_int32_t_2_3_4("TI_PLAIN_ARRAY_SMALL");
                                if (type_id_kind_anonymous_array_int32_t_2_3_4 == "TI_PLAIN_ARRAY_SMALL")
                                {
                                    SBoundSeq array_bound_seq;
                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(2));

                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(3));

                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_int32_t_2_3_4, array_bound_seq,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int32_t_2_3_4));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_int32_t_2_3_4"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_array_int32_t_2_3_4 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    LBoundSeq array_bound_seq;
                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(2));

                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(3));

                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(4));

                                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header_anonymous_array_int32_t_2_3_4, array_bound_seq,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int32_t_2_3_4));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_int32_t_2_3_4"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_array_int32_t_2_3_4 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_array_int32_t_2_3_4", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_array_int32_t_2_3_4: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_long_array = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_long_array;
                            MemberId member_id_long_array = 0x00000018;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_long_array = TypeObjectUtils::build_common_struct_member(member_id_long_array, member_flags_long_array, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_long_array = TypeObjectUtils::build_common_struct_member(member_id_long_array, member_flags_long_array, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure long_array member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_long_array = "long_array";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_long_array;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_long_array = TypeObjectUtils::build_complete_member_detail(name_long_array, member_ann_builtin_long_array, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_long_array = TypeObjectUtils::build_complete_struct_member(common_long_array, detail_long_array);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_long_array);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                                    if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                                    {
                                        SBound bound = 0;
                                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                "anonymous_string_unbounded"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                                    {
                                        LBound bound = 255;
                                        StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                "anonymous_string_unbounded"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_unbounded: Unknown String kind.");
                                        return;
                                    }
                                    return_code_AllStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded {nullptr};
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded inconsistent element TypeIdentifier.");
                                    return;
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                                    if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                                    {
                                        SBound bound = 0;
                                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                "anonymous_string_unbounded"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                                    {
                                        LBound bound = 255;
                                        StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                "anonymous_string_unbounded"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_unbounded: Unknown String kind.");
                                        return;
                                    }
                                    return_code_AllStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded {nullptr};
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded inconsistent key TypeIdentifier.");
                                    return;
                                }
                                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = EK_BOTH;
                                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d()) ||
                                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                                {
                                    equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = EK_COMPLETE;
                                }
                                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = 0;
                                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = 0;
                                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded);
                                std::string type_id_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded("TI_PLAIN_MAP_SMALL");
                                if (type_id_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded == "TI_PLAIN_MAP_SMALL")
                                {
                                    SBound bound = 0;
                                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded, bound,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded,
                                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    LBound bound = 0;
                                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded, bound,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded,
                                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_string_unbounded_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_string_unbounded_map;
                            MemberId member_id_string_unbounded_map = 0x00000019;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_string_unbounded_map = TypeObjectUtils::build_common_struct_member(member_id_string_unbounded_map, member_flags_string_unbounded_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_string_unbounded_map = TypeObjectUtils::build_common_struct_member(member_id_string_unbounded_map, member_flags_string_unbounded_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure string_unbounded_map member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_string_unbounded_map = "string_unbounded_map";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_string_unbounded_map;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_string_unbounded_map = TypeObjectUtils::build_complete_member_detail(name_string_unbounded_map, member_ann_builtin_string_unbounded_map, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_string_unbounded_map = TypeObjectUtils::build_complete_struct_member(common_string_unbounded_map, detail_string_unbounded_map);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_string_unbounded_map);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyAliasedBoundedString", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    AliasTypeFlag alias_flags_MyAliasedBoundedString = 0;
                                    QualifiedTypeName type_name_MyAliasedBoundedString = "MyAliasedBoundedString";
                                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyAliasedBoundedString;
                                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyAliasedBoundedString;
                                    CompleteTypeDetail detail_MyAliasedBoundedString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyAliasedBoundedString, ann_custom_MyAliasedBoundedString, type_name_MyAliasedBoundedString.to_string());
                                    CompleteAliasHeader header_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_header(detail_MyAliasedBoundedString);
                                    AliasMemberFlag related_flags_MyAliasedBoundedString = 0;
                                    return_code_AllStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_string_100", type_ids_AllStruct_TypeIntrospectionExample);

                                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        std::string type_id_kind_anonymous_string_100("TI_STRING8_SMALL");
                                        if (type_id_kind_anonymous_string_100 == "TI_STRING8_SMALL")
                                        {
                                            SBound bound = static_cast<SBound>(100);
                                            StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                    "anonymous_string_100"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_100 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else if (type_id_kind_anonymous_string_100 == "TI_STRING8_LARGE")
                                        {
                                            LBound bound = 100;
                                            StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                    "anonymous_string_100"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_100 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_string_100: Unknown String kind.");
                                            return;
                                        }
                                        return_code_AllStruct_TypeIntrospectionExample =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_string_100", type_ids_AllStruct_TypeIntrospectionExample);
                                        if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_string_100: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonAliasBody common_MyAliasedBoundedString;
                                    if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_MyAliasedBoundedString = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedBoundedString, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_MyAliasedBoundedString = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedBoundedString, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyAliasedBoundedString related TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyAliasedBoundedString;
                                    ann_custom_MyAliasedBoundedString.reset();
                                    CompleteAliasBody body_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_body(common_MyAliasedBoundedString, member_ann_builtin_MyAliasedBoundedString, ann_custom_MyAliasedBoundedString);
                                    CompleteAliasType alias_type_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_type(alias_flags_MyAliasedBoundedString, header_MyAliasedBoundedString, body_MyAliasedBoundedString);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyAliasedBoundedString, type_name_MyAliasedBoundedString.to_string()))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyAliasedBoundedString already registered in TypeObjectRegistry for a different type.");
                                    }
                                    return_code_AllStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "MyAliasedBoundedString", type_ids_AllStruct_TypeIntrospectionExample);
                                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "MyAliasedBoundedString: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded {nullptr};
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded inconsistent element TypeIdentifier.");
                                    return;
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                                    if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                                    {
                                        SBound bound = 0;
                                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                "anonymous_string_unbounded"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                                    {
                                        LBound bound = 255;
                                        StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                "anonymous_string_unbounded"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_unbounded: Unknown String kind.");
                                        return;
                                    }
                                    return_code_AllStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded {nullptr};
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded inconsistent key TypeIdentifier.");
                                    return;
                                }
                                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = EK_BOTH;
                                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d()) ||
                                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->map_sdefn().header().equiv_kind())) ||
                                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->map_ldefn().header().equiv_kind())))
                                {
                                    equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = EK_COMPLETE;
                                }
                                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = 0;
                                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = 0;
                                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded);
                                std::string type_id_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded("TI_PLAIN_MAP_SMALL");
                                if (type_id_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded == "TI_PLAIN_MAP_SMALL")
                                {
                                    SBound bound = 0;
                                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded, bound,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded,
                                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    LBound bound = 0;
                                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded, bound,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded,
                                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_string_alias_unbounded_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_string_alias_unbounded_map;
                            MemberId member_id_string_alias_unbounded_map = 0x0000001a;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_string_alias_unbounded_map = TypeObjectUtils::build_common_struct_member(member_id_string_alias_unbounded_map, member_flags_string_alias_unbounded_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_string_alias_unbounded_map = TypeObjectUtils::build_common_struct_member(member_id_string_alias_unbounded_map, member_flags_string_alias_unbounded_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure string_alias_unbounded_map member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_string_alias_unbounded_map = "string_alias_unbounded_map";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_string_alias_unbounded_map;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_string_alias_unbounded_map = TypeObjectUtils::build_complete_member_detail(name_string_alias_unbounded_map, member_ann_builtin_string_alias_unbounded_map, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_string_alias_unbounded_map = TypeObjectUtils::build_complete_struct_member(common_string_alias_unbounded_map, detail_string_alias_unbounded_map);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_string_alias_unbounded_map);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_map_int16_t_int32_t_2", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_int32_t", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                TypeIdentifier* element_identifier_anonymous_map_int16_t_int32_t_2 {nullptr};
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_map_int16_t_int32_t_2 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_map_int16_t_int32_t_2 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_int16_t_int32_t_2 inconsistent element TypeIdentifier.");
                                    return;
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_int16_t", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                TypeIdentifier* key_identifier_anonymous_map_int16_t_int32_t_2 {nullptr};
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    key_identifier_anonymous_map_int16_t_int32_t_2 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    key_identifier_anonymous_map_int16_t_int32_t_2 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_int16_t_int32_t_2 inconsistent key TypeIdentifier.");
                                    return;
                                }
                                EquivalenceKind equiv_kind_anonymous_map_int16_t_int32_t_2 = EK_BOTH;
                                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_int32_t_2->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->_d()) ||
                                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->map_sdefn().header().equiv_kind())) ||
                                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->map_ldefn().header().equiv_kind())))
                                {
                                    equiv_kind_anonymous_map_int16_t_int32_t_2 = EK_COMPLETE;
                                }
                                CollectionElementFlag element_flags_anonymous_map_int16_t_int32_t_2 = 0;
                                CollectionElementFlag key_flags_anonymous_map_int16_t_int32_t_2 = 0;
                                PlainCollectionHeader header_anonymous_map_int16_t_int32_t_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_int32_t_2, element_flags_anonymous_map_int16_t_int32_t_2);
                                std::string type_id_kind_anonymous_map_int16_t_int32_t_2("TI_PLAIN_MAP_SMALL");
                                if (type_id_kind_anonymous_map_int16_t_int32_t_2 == "TI_PLAIN_MAP_SMALL")
                                {
                                    SBound bound = static_cast<SBound>(2);
                                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_int32_t_2, bound,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_int32_t_2), key_flags_anonymous_map_int16_t_int32_t_2,
                                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_int32_t_2));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_int32_t_2"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_map_int16_t_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    LBound bound = 2;
                                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_int16_t_int32_t_2, bound,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_int32_t_2), key_flags_anonymous_map_int16_t_int32_t_2,
                                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_int32_t_2));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int16_t_int32_t_2"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_map_int16_t_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_map_int16_t_int32_t_2", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_map_int16_t_int32_t_2: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_short_long_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_short_long_map;
                            MemberId member_id_short_long_map = 0x0000001b;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_short_long_map = TypeObjectUtils::build_common_struct_member(member_id_short_long_map, member_flags_short_long_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_short_long_map = TypeObjectUtils::build_common_struct_member(member_id_short_long_map, member_flags_short_long_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure short_long_map member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_short_long_map = "short_long_map";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_short_long_map;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_short_long_map = TypeObjectUtils::build_complete_member_detail(name_short_long_map, member_ann_builtin_short_long_map, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_short_long_map = TypeObjectUtils::build_complete_struct_member(common_short_long_map, detail_short_long_map);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_short_long_map);
                        }
                        CompleteStructType struct_type_AllStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_type(struct_flags_AllStruct_TypeIntrospectionExample, header_AllStruct_TypeIntrospectionExample, member_seq_AllStruct_TypeIntrospectionExample);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_struct_type_object(struct_type_AllStruct_TypeIntrospectionExample, type_name_AllStruct_TypeIntrospectionExample.to_string()))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "AllStruct_TypeIntrospectionExample already registered in TypeObjectRegistry for a different type.");
                        }
                        return_code_AllStruct_TypeIntrospectionExample =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "AllStruct_TypeIntrospectionExample", type_ids_AllStruct_TypeIntrospectionExample);
                        if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "AllStruct_TypeIntrospectionExample: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                }
                TypeIdentifier* element_identifier_anonymous_sequence_AllStruct_TypeIntrospectionExample_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_AllStruct_TypeIntrospectionExample_unbounded = new TypeIdentifier(type_ids_DataTest_TypeIntrospectionExample.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_AllStruct_TypeIntrospectionExample_unbounded = new TypeIdentifier(type_ids_DataTest_TypeIntrospectionExample.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_AllStruct_TypeIntrospectionExample_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_AllStruct_TypeIntrospectionExample_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_AllStruct_TypeIntrospectionExample_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_AllStruct_TypeIntrospectionExample_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_AllStruct_TypeIntrospectionExample_unbounded, element_flags_anonymous_sequence_AllStruct_TypeIntrospectionExample_unbounded);
                std::string type_id_kind_anonymous_sequence_AllStruct_TypeIntrospectionExample_unbounded("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_AllStruct_TypeIntrospectionExample_unbounded == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_AllStruct_TypeIntrospectionExample_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_AllStruct_TypeIntrospectionExample_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_AllStruct_TypeIntrospectionExample_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_AllStruct_TypeIntrospectionExample_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_AllStruct_TypeIntrospectionExample_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_AllStruct_TypeIntrospectionExample_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_AllStruct_TypeIntrospectionExample_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_AllStruct_TypeIntrospectionExample_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_DataTest_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_AllStruct_TypeIntrospectionExample_unbounded", type_ids_DataTest_TypeIntrospectionExample);
                if (return_code_DataTest_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_AllStruct_TypeIntrospectionExample_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_complex_sequence = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_complex_sequence;
            MemberId member_id_complex_sequence = 0x00000002;
            if (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_complex_sequence = TypeObjectUtils::build_common_struct_member(member_id_complex_sequence, member_flags_complex_sequence, type_ids_DataTest_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_complex_sequence = TypeObjectUtils::build_common_struct_member(member_id_complex_sequence, member_flags_complex_sequence, type_ids_DataTest_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure complex_sequence member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_complex_sequence = "complex_sequence";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_complex_sequence;
            ann_custom_DataTest_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_complex_sequence = TypeObjectUtils::build_complete_member_detail(name_complex_sequence, member_ann_builtin_complex_sequence, ann_custom_DataTest_TypeIntrospectionExample);
            CompleteStructMember member_complex_sequence = TypeObjectUtils::build_complete_struct_member(common_complex_sequence, detail_complex_sequence);
            TypeObjectUtils::add_complete_struct_member(member_seq_DataTest_TypeIntrospectionExample, member_complex_sequence);
        }
        {
            return_code_DataTest_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_AllStruct_TypeIntrospectionExample_2", type_ids_DataTest_TypeIntrospectionExample);

            if (return_code_DataTest_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_DataTest_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "AllStruct_TypeIntrospectionExample", type_ids_DataTest_TypeIntrospectionExample);

                if (return_code_DataTest_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    {
                        StructTypeFlag struct_flags_AllStruct_TypeIntrospectionExample = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                false, false);
                        ReturnCode_t return_code_AllStruct_TypeIntrospectionExample;
                        TypeIdentifierPair type_ids_AllStruct_TypeIntrospectionExample;
                        return_code_AllStruct_TypeIntrospectionExample =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "PrimitivesStruct_TypeIntrospectionExample", type_ids_AllStruct_TypeIntrospectionExample);

                        if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags_PrimitivesStruct_TypeIntrospectionExample = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code_PrimitivesStruct_TypeIntrospectionExample;
                                TypeIdentifierPair type_ids_PrimitivesStruct_TypeIntrospectionExample;
                                QualifiedTypeName type_name_PrimitivesStruct_TypeIntrospectionExample = "PrimitivesStruct_TypeIntrospectionExample";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_PrimitivesStruct_TypeIntrospectionExample;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_PrimitivesStruct_TypeIntrospectionExample;
                                CompleteTypeDetail detail_PrimitivesStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_PrimitivesStruct_TypeIntrospectionExample, ann_custom_PrimitivesStruct_TypeIntrospectionExample, type_name_PrimitivesStruct_TypeIntrospectionExample.to_string());
                                CompleteStructHeader header_PrimitivesStruct_TypeIntrospectionExample;
                                header_PrimitivesStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_PrimitivesStruct_TypeIntrospectionExample);
                                CompleteStructMemberSeq member_seq_PrimitivesStruct_TypeIntrospectionExample;
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_bool", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_bool = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_bool;
                                    MemberId member_id_my_bool = 0x00000000;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_bool = TypeObjectUtils::build_common_struct_member(member_id_my_bool, member_flags_my_bool, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_bool = TypeObjectUtils::build_common_struct_member(member_id_my_bool, member_flags_my_bool, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_bool member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_bool = "my_bool";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_bool;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_bool = TypeObjectUtils::build_complete_member_detail(name_my_bool, member_ann_builtin_my_bool, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_bool = TypeObjectUtils::build_complete_struct_member(common_my_bool, detail_my_bool);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_bool);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_byte", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_octet = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_octet;
                                    MemberId member_id_my_octet = 0x00000001;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_octet = TypeObjectUtils::build_common_struct_member(member_id_my_octet, member_flags_my_octet, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_octet = TypeObjectUtils::build_common_struct_member(member_id_my_octet, member_flags_my_octet, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_octet member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_octet = "my_octet";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_octet;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_octet = TypeObjectUtils::build_complete_member_detail(name_my_octet, member_ann_builtin_my_octet, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_octet = TypeObjectUtils::build_complete_struct_member(common_my_octet, detail_my_octet);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_octet);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_char", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_char Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_char = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_char;
                                    MemberId member_id_my_char = 0x00000002;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_char = TypeObjectUtils::build_common_struct_member(member_id_my_char, member_flags_my_char, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_char = TypeObjectUtils::build_common_struct_member(member_id_my_char, member_flags_my_char, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_char member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_char = "my_char";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_char;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_char = TypeObjectUtils::build_complete_member_detail(name_my_char, member_ann_builtin_my_char, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_char = TypeObjectUtils::build_complete_struct_member(common_my_char, detail_my_char);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_char);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_wchar_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_wchar Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_wchar = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_wchar;
                                    MemberId member_id_my_wchar = 0x00000003;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_wchar = TypeObjectUtils::build_common_struct_member(member_id_my_wchar, member_flags_my_wchar, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_wchar = TypeObjectUtils::build_common_struct_member(member_id_my_wchar, member_flags_my_wchar, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_wchar member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_wchar = "my_wchar";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_wchar;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_wchar = TypeObjectUtils::build_complete_member_detail(name_my_wchar, member_ann_builtin_my_wchar, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_wchar = TypeObjectUtils::build_complete_struct_member(common_my_wchar, detail_my_wchar);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_wchar);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int32_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_long Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_long = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_long;
                                    MemberId member_id_my_long = 0x00000004;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_long = TypeObjectUtils::build_common_struct_member(member_id_my_long, member_flags_my_long, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_long = TypeObjectUtils::build_common_struct_member(member_id_my_long, member_flags_my_long, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_long member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_long = "my_long";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_long;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_long = TypeObjectUtils::build_complete_member_detail(name_my_long, member_ann_builtin_my_long, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_long = TypeObjectUtils::build_complete_struct_member(common_my_long, detail_my_long);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_long);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_uint32_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_ulong Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_ulong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_ulong;
                                    MemberId member_id_my_ulong = 0x00000005;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_ulong = TypeObjectUtils::build_common_struct_member(member_id_my_ulong, member_flags_my_ulong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_ulong = TypeObjectUtils::build_common_struct_member(member_id_my_ulong, member_flags_my_ulong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_ulong member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_ulong = "my_ulong";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_ulong;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_ulong = TypeObjectUtils::build_complete_member_detail(name_my_ulong, member_ann_builtin_my_ulong, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_ulong = TypeObjectUtils::build_complete_struct_member(common_my_ulong, detail_my_ulong);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_ulong);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int8_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_int8 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_int8 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_int8;
                                    MemberId member_id_my_int8 = 0x00000006;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_int8 = TypeObjectUtils::build_common_struct_member(member_id_my_int8, member_flags_my_int8, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_int8 = TypeObjectUtils::build_common_struct_member(member_id_my_int8, member_flags_my_int8, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_int8 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_int8 = "my_int8";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_int8;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_int8 = TypeObjectUtils::build_complete_member_detail(name_my_int8, member_ann_builtin_my_int8, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_int8 = TypeObjectUtils::build_complete_struct_member(common_my_int8, detail_my_int8);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_int8);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_uint8_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_uint8 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_uint8 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_uint8;
                                    MemberId member_id_my_uint8 = 0x00000007;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_uint8 = TypeObjectUtils::build_common_struct_member(member_id_my_uint8, member_flags_my_uint8, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_uint8 = TypeObjectUtils::build_common_struct_member(member_id_my_uint8, member_flags_my_uint8, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_uint8 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_uint8 = "my_uint8";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_uint8;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_uint8 = TypeObjectUtils::build_complete_member_detail(name_my_uint8, member_ann_builtin_my_uint8, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_uint8 = TypeObjectUtils::build_complete_struct_member(common_my_uint8, detail_my_uint8);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_uint8);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int16_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_short Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_short = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_short;
                                    MemberId member_id_my_short = 0x00000008;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_short = TypeObjectUtils::build_common_struct_member(member_id_my_short, member_flags_my_short, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_short = TypeObjectUtils::build_common_struct_member(member_id_my_short, member_flags_my_short, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_short member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_short = "my_short";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_short;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_short = TypeObjectUtils::build_complete_member_detail(name_my_short, member_ann_builtin_my_short, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_short = TypeObjectUtils::build_complete_struct_member(common_my_short, detail_my_short);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_short);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_uint16_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_ushort Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_ushort = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_ushort;
                                    MemberId member_id_my_ushort = 0x00000009;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_ushort = TypeObjectUtils::build_common_struct_member(member_id_my_ushort, member_flags_my_ushort, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_ushort = TypeObjectUtils::build_common_struct_member(member_id_my_ushort, member_flags_my_ushort, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_ushort member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_ushort = "my_ushort";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_ushort;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_ushort = TypeObjectUtils::build_complete_member_detail(name_my_ushort, member_ann_builtin_my_ushort, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_ushort = TypeObjectUtils::build_complete_struct_member(common_my_ushort, detail_my_ushort);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_ushort);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int64_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_longlong Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_longlong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_longlong;
                                    MemberId member_id_my_longlong = 0x0000000a;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_longlong = TypeObjectUtils::build_common_struct_member(member_id_my_longlong, member_flags_my_longlong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_longlong = TypeObjectUtils::build_common_struct_member(member_id_my_longlong, member_flags_my_longlong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_longlong member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_longlong = "my_longlong";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_longlong;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_longlong = TypeObjectUtils::build_complete_member_detail(name_my_longlong, member_ann_builtin_my_longlong, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_longlong = TypeObjectUtils::build_complete_struct_member(common_my_longlong, detail_my_longlong);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_longlong);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_uint64_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_ulonglong Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_ulonglong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_ulonglong;
                                    MemberId member_id_my_ulonglong = 0x0000000b;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_ulonglong = TypeObjectUtils::build_common_struct_member(member_id_my_ulonglong, member_flags_my_ulonglong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_ulonglong = TypeObjectUtils::build_common_struct_member(member_id_my_ulonglong, member_flags_my_ulonglong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_ulonglong member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_ulonglong = "my_ulonglong";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_ulonglong;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_ulonglong = TypeObjectUtils::build_complete_member_detail(name_my_ulonglong, member_ann_builtin_my_ulonglong, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_ulonglong = TypeObjectUtils::build_complete_struct_member(common_my_ulonglong, detail_my_ulonglong);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_ulonglong);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_float", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_float Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_float = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_float;
                                    MemberId member_id_my_float = 0x0000000c;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_float = TypeObjectUtils::build_common_struct_member(member_id_my_float, member_flags_my_float, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_float = TypeObjectUtils::build_common_struct_member(member_id_my_float, member_flags_my_float, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_float member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_float = "my_float";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_float;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_float = TypeObjectUtils::build_complete_member_detail(name_my_float, member_ann_builtin_my_float, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_float = TypeObjectUtils::build_complete_struct_member(common_my_float, detail_my_float);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_float);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_double", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_double Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_double = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_double;
                                    MemberId member_id_my_double = 0x0000000d;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_double = TypeObjectUtils::build_common_struct_member(member_id_my_double, member_flags_my_double, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_double = TypeObjectUtils::build_common_struct_member(member_id_my_double, member_flags_my_double, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_double member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_double = "my_double";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_double;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_double = TypeObjectUtils::build_complete_member_detail(name_my_double, member_ann_builtin_my_double, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_double = TypeObjectUtils::build_complete_struct_member(common_my_double, detail_my_double);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_double);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_longdouble", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_longdouble Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_longdouble = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_longdouble;
                                    MemberId member_id_my_longdouble = 0x0000000e;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_longdouble = TypeObjectUtils::build_common_struct_member(member_id_my_longdouble, member_flags_my_longdouble, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_longdouble = TypeObjectUtils::build_common_struct_member(member_id_my_longdouble, member_flags_my_longdouble, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_longdouble member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_longdouble = "my_longdouble";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_longdouble;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_longdouble = TypeObjectUtils::build_complete_member_detail(name_my_longdouble, member_ann_builtin_my_longdouble, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_longdouble = TypeObjectUtils::build_complete_struct_member(common_my_longdouble, detail_my_longdouble);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_longdouble);
                                }
                                CompleteStructType struct_type_PrimitivesStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_type(struct_flags_PrimitivesStruct_TypeIntrospectionExample, header_PrimitivesStruct_TypeIntrospectionExample, member_seq_PrimitivesStruct_TypeIntrospectionExample);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type_PrimitivesStruct_TypeIntrospectionExample, type_name_PrimitivesStruct_TypeIntrospectionExample.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "PrimitivesStruct_TypeIntrospectionExample already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code_PrimitivesStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "PrimitivesStruct_TypeIntrospectionExample", type_ids_PrimitivesStruct_TypeIntrospectionExample);
                                if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "PrimitivesStruct_TypeIntrospectionExample: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        QualifiedTypeName type_name_AllStruct_TypeIntrospectionExample = "AllStruct_TypeIntrospectionExample";
                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_AllStruct_TypeIntrospectionExample;
                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_AllStruct_TypeIntrospectionExample;
                        CompleteTypeDetail detail_AllStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_AllStruct_TypeIntrospectionExample, ann_custom_AllStruct_TypeIntrospectionExample, type_name_AllStruct_TypeIntrospectionExample.to_string());
                        CompleteStructHeader header_AllStruct_TypeIntrospectionExample;
                        if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d())
                        {
                            header_AllStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_header(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1(), detail_AllStruct_TypeIntrospectionExample);
                        }
                        else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d())
                        {
                            header_AllStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_header(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2(), detail_AllStruct_TypeIntrospectionExample);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "AllStruct_TypeIntrospectionExample Structure: base_type TypeIdentifier registered in TypeObjectRegistry is inconsistent.");
                            return;
                        }
                        CompleteStructMemberSeq member_seq_AllStruct_TypeIntrospectionExample;
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                                if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                                {
                                    SBound bound = 0;
                                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                            "anonymous_string_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                                {
                                    LBound bound = 255;
                                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                            "anonymous_string_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded: Unknown String kind.");
                                    return;
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_my_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_my_string;
                            MemberId member_id_my_string = 0x0000000f;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_string = TypeObjectUtils::build_common_struct_member(member_id_my_string, member_flags_my_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_string = TypeObjectUtils::build_common_struct_member(member_id_my_string, member_flags_my_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_string member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_my_string = "my_string";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_string;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_my_string = TypeObjectUtils::build_complete_member_detail(name_my_string, member_ann_builtin_my_string, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_my_string = TypeObjectUtils::build_complete_struct_member(common_my_string, detail_my_string);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_string);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_wstring_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                std::string type_id_kind_anonymous_wstring_unbounded("TI_STRING16_SMALL");
                                if (type_id_kind_anonymous_wstring_unbounded == "TI_STRING16_SMALL")
                                {
                                    SBound bound = 0;
                                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                            "anonymous_wstring_unbounded", true))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else if (type_id_kind_anonymous_wstring_unbounded == "TI_STRING16_LARGE")
                                {
                                    LBound bound = 255;
                                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                            "anonymous_wstring_unbounded", true))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_wstring_unbounded: Unknown WString kind.");
                                    return;
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_wstring_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_wstring_unbounded: Given WString TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_my_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_my_wstring;
                            MemberId member_id_my_wstring = 0x00000010;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_wstring = TypeObjectUtils::build_common_struct_member(member_id_my_wstring, member_flags_my_wstring, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_wstring = TypeObjectUtils::build_common_struct_member(member_id_my_wstring, member_flags_my_wstring, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_wstring member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_my_wstring = "my_wstring";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_wstring;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_my_wstring = TypeObjectUtils::build_complete_member_detail(name_my_wstring, member_ann_builtin_my_wstring, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_my_wstring = TypeObjectUtils::build_complete_struct_member(common_my_wstring, detail_my_wstring);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_wstring);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_41925", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                std::string type_id_kind_anonymous_string_41925("TI_STRING8_LARGE");
                                if (type_id_kind_anonymous_string_41925 == "TI_STRING8_SMALL")
                                {
                                    SBound bound = static_cast<SBound>(41925);
                                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                            "anonymous_string_41925"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_41925 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else if (type_id_kind_anonymous_string_41925 == "TI_STRING8_LARGE")
                                {
                                    LBound bound = 41925;
                                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                            "anonymous_string_41925"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_41925 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_41925: Unknown String kind.");
                                    return;
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_string_41925", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_41925: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_my_bounded_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_my_bounded_string;
                            MemberId member_id_my_bounded_string = 0x00000011;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_bounded_string = TypeObjectUtils::build_common_struct_member(member_id_my_bounded_string, member_flags_my_bounded_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_bounded_string = TypeObjectUtils::build_common_struct_member(member_id_my_bounded_string, member_flags_my_bounded_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_bounded_string member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_my_bounded_string = "my_bounded_string";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_bounded_string;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_my_bounded_string = TypeObjectUtils::build_complete_member_detail(name_my_bounded_string, member_ann_builtin_my_bounded_string, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_my_bounded_string = TypeObjectUtils::build_complete_struct_member(common_my_bounded_string, detail_my_bounded_string);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_bounded_string);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_wstring_20925", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                std::string type_id_kind_anonymous_wstring_20925("TI_STRING16_LARGE");
                                if (type_id_kind_anonymous_wstring_20925 == "TI_STRING16_SMALL")
                                {
                                    SBound bound = static_cast<SBound>(20925);
                                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                            "anonymous_wstring_20925", true))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_wstring_20925 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else if (type_id_kind_anonymous_wstring_20925 == "TI_STRING16_LARGE")
                                {
                                    LBound bound = 20925;
                                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                            "anonymous_wstring_20925", true))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_wstring_20925 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_wstring_20925: Unknown WString kind.");
                                    return;
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_wstring_20925", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_wstring_20925: Given WString TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_my_bounded_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_my_bounded_wstring;
                            MemberId member_id_my_bounded_wstring = 0x00000012;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_bounded_wstring = TypeObjectUtils::build_common_struct_member(member_id_my_bounded_wstring, member_flags_my_bounded_wstring, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_bounded_wstring = TypeObjectUtils::build_common_struct_member(member_id_my_bounded_wstring, member_flags_my_bounded_wstring, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_bounded_wstring member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_my_bounded_wstring = "my_bounded_wstring";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_bounded_wstring;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_my_bounded_wstring = TypeObjectUtils::build_complete_member_detail(name_my_bounded_wstring, member_ann_builtin_my_bounded_wstring, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_my_bounded_wstring = TypeObjectUtils::build_complete_struct_member(common_my_bounded_wstring, detail_my_bounded_wstring);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_bounded_wstring);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EnumTypeFlag enum_flags_MyEnum = 0;
                                BitBound bit_bound_MyEnum = 32;
                                CommonEnumeratedHeader common_MyEnum = TypeObjectUtils::build_common_enumerated_header(bit_bound_MyEnum);
                                QualifiedTypeName type_name_MyEnum = "MyEnum";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyEnum;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyEnum;
                                CompleteTypeDetail detail_MyEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyEnum, ann_custom_MyEnum, type_name_MyEnum.to_string());
                                CompleteEnumeratedHeader header_MyEnum = TypeObjectUtils::build_complete_enumerated_header(common_MyEnum, detail_MyEnum);
                                CompleteEnumeratedLiteralSeq literal_seq_MyEnum;
                                {
                                    EnumeratedLiteralFlag flags_A = TypeObjectUtils::build_enumerated_literal_flag(false);
                                    CommonEnumeratedLiteral common_A = TypeObjectUtils::build_common_enumerated_literal(0, flags_A);
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_A;
                                    ann_custom_MyEnum.reset();
                                    MemberName name_A = "A";
                                    CompleteMemberDetail detail_A = TypeObjectUtils::build_complete_member_detail(name_A, member_ann_builtin_A, ann_custom_MyEnum);
                                    CompleteEnumeratedLiteral literal_A = TypeObjectUtils::build_complete_enumerated_literal(common_A, detail_A);
                                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_A);
                                }
                                {
                                    EnumeratedLiteralFlag flags_B = TypeObjectUtils::build_enumerated_literal_flag(false);
                                    CommonEnumeratedLiteral common_B = TypeObjectUtils::build_common_enumerated_literal(1, flags_B);
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_B;
                                    ann_custom_MyEnum.reset();
                                    MemberName name_B = "B";
                                    CompleteMemberDetail detail_B = TypeObjectUtils::build_complete_member_detail(name_B, member_ann_builtin_B, ann_custom_MyEnum);
                                    CompleteEnumeratedLiteral literal_B = TypeObjectUtils::build_complete_enumerated_literal(common_B, detail_B);
                                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_B);
                                }
                                {
                                    EnumeratedLiteralFlag flags_C = TypeObjectUtils::build_enumerated_literal_flag(false);
                                    CommonEnumeratedLiteral common_C = TypeObjectUtils::build_common_enumerated_literal(2, flags_C);
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_C;
                                    ann_custom_MyEnum.reset();
                                    MemberName name_C = "C";
                                    CompleteMemberDetail detail_C = TypeObjectUtils::build_complete_member_detail(name_C, member_ann_builtin_C, ann_custom_MyEnum);
                                    CompleteEnumeratedLiteral literal_C = TypeObjectUtils::build_complete_enumerated_literal(common_C, detail_C);
                                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_C);
                                }
                                CompleteEnumeratedType enumerated_type_MyEnum = TypeObjectUtils::build_complete_enumerated_type(enum_flags_MyEnum, header_MyEnum,
                                        literal_seq_MyEnum);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_MyEnum, type_name_MyEnum.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyEnum already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_my_enum = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_my_enum;
                            MemberId member_id_my_enum = 0x00000013;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_enum = TypeObjectUtils::build_common_struct_member(member_id_my_enum, member_flags_my_enum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_enum = TypeObjectUtils::build_common_struct_member(member_id_my_enum, member_flags_my_enum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_enum member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_my_enum = "my_enum";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_enum;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_my_enum = TypeObjectUtils::build_complete_member_detail(name_my_enum, member_ann_builtin_my_enum, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_my_enum = TypeObjectUtils::build_complete_struct_member(common_my_enum, detail_my_enum);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_enum);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MyAliasedEnum", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                AliasTypeFlag alias_flags_MyAliasedEnum = 0;
                                QualifiedTypeName type_name_MyAliasedEnum = "MyAliasedEnum";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyAliasedEnum;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyAliasedEnum;
                                CompleteTypeDetail detail_MyAliasedEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyAliasedEnum, ann_custom_MyAliasedEnum, type_name_MyAliasedEnum.to_string());
                                CompleteAliasHeader header_MyAliasedEnum = TypeObjectUtils::build_complete_alias_header(detail_MyAliasedEnum);
                                AliasMemberFlag related_flags_MyAliasedEnum = 0;
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EnumTypeFlag enum_flags_MyEnum = 0;
                                    BitBound bit_bound_MyEnum = 32;
                                    CommonEnumeratedHeader common_MyEnum = TypeObjectUtils::build_common_enumerated_header(bit_bound_MyEnum);
                                    QualifiedTypeName type_name_MyEnum = "MyEnum";
                                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyEnum;
                                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyEnum;
                                    CompleteTypeDetail detail_MyEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyEnum, ann_custom_MyEnum, type_name_MyEnum.to_string());
                                    CompleteEnumeratedHeader header_MyEnum = TypeObjectUtils::build_complete_enumerated_header(common_MyEnum, detail_MyEnum);
                                    CompleteEnumeratedLiteralSeq literal_seq_MyEnum;
                                    {
                                        EnumeratedLiteralFlag flags_A = TypeObjectUtils::build_enumerated_literal_flag(false);
                                        CommonEnumeratedLiteral common_A = TypeObjectUtils::build_common_enumerated_literal(0, flags_A);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_A;
                                        ann_custom_MyEnum.reset();
                                        MemberName name_A = "A";
                                        CompleteMemberDetail detail_A = TypeObjectUtils::build_complete_member_detail(name_A, member_ann_builtin_A, ann_custom_MyEnum);
                                        CompleteEnumeratedLiteral literal_A = TypeObjectUtils::build_complete_enumerated_literal(common_A, detail_A);
                                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_A);
                                    }
                                    {
                                        EnumeratedLiteralFlag flags_B = TypeObjectUtils::build_enumerated_literal_flag(false);
                                        CommonEnumeratedLiteral common_B = TypeObjectUtils::build_common_enumerated_literal(1, flags_B);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_B;
                                        ann_custom_MyEnum.reset();
                                        MemberName name_B = "B";
                                        CompleteMemberDetail detail_B = TypeObjectUtils::build_complete_member_detail(name_B, member_ann_builtin_B, ann_custom_MyEnum);
                                        CompleteEnumeratedLiteral literal_B = TypeObjectUtils::build_complete_enumerated_literal(common_B, detail_B);
                                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_B);
                                    }
                                    {
                                        EnumeratedLiteralFlag flags_C = TypeObjectUtils::build_enumerated_literal_flag(false);
                                        CommonEnumeratedLiteral common_C = TypeObjectUtils::build_common_enumerated_literal(2, flags_C);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_C;
                                        ann_custom_MyEnum.reset();
                                        MemberName name_C = "C";
                                        CompleteMemberDetail detail_C = TypeObjectUtils::build_complete_member_detail(name_C, member_ann_builtin_C, ann_custom_MyEnum);
                                        CompleteEnumeratedLiteral literal_C = TypeObjectUtils::build_complete_enumerated_literal(common_C, detail_C);
                                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_C);
                                    }
                                    CompleteEnumeratedType enumerated_type_MyEnum = TypeObjectUtils::build_complete_enumerated_type(enum_flags_MyEnum, header_MyEnum,
                                            literal_seq_MyEnum);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_MyEnum, type_name_MyEnum.to_string()))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyEnum already registered in TypeObjectRegistry for a different type.");
                                    }
                                    return_code_AllStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);
                                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                CommonAliasBody common_MyAliasedEnum;
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_MyAliasedEnum = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedEnum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_MyAliasedEnum = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedEnum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyAliasedEnum related TypeIdentifier inconsistent.");
                                    return;
                                }
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyAliasedEnum;
                                ann_custom_MyAliasedEnum.reset();
                                CompleteAliasBody body_MyAliasedEnum = TypeObjectUtils::build_complete_alias_body(common_MyAliasedEnum, member_ann_builtin_MyAliasedEnum, ann_custom_MyAliasedEnum);
                                CompleteAliasType alias_type_MyAliasedEnum = TypeObjectUtils::build_complete_alias_type(alias_flags_MyAliasedEnum, header_MyAliasedEnum, body_MyAliasedEnum);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyAliasedEnum, type_name_MyAliasedEnum.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyAliasedEnum already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyAliasedEnum", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyAliasedEnum: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_my_aliased_enum = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_my_aliased_enum;
                            MemberId member_id_my_aliased_enum = 0x00000014;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_aliased_enum = TypeObjectUtils::build_common_struct_member(member_id_my_aliased_enum, member_flags_my_aliased_enum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_aliased_enum = TypeObjectUtils::build_common_struct_member(member_id_my_aliased_enum, member_flags_my_aliased_enum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_aliased_enum member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_my_aliased_enum = "my_aliased_enum";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_aliased_enum;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_my_aliased_enum = TypeObjectUtils::build_complete_member_detail(name_my_aliased_enum, member_ann_builtin_my_aliased_enum, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_my_aliased_enum = TypeObjectUtils::build_complete_struct_member(common_my_aliased_enum, detail_my_aliased_enum);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_aliased_enum);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MyAliasedBoundedString", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                AliasTypeFlag alias_flags_MyAliasedBoundedString = 0;
                                QualifiedTypeName type_name_MyAliasedBoundedString = "MyAliasedBoundedString";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyAliasedBoundedString;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyAliasedBoundedString;
                                CompleteTypeDetail detail_MyAliasedBoundedString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyAliasedBoundedString, ann_custom_MyAliasedBoundedString, type_name_MyAliasedBoundedString.to_string());
                                CompleteAliasHeader header_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_header(detail_MyAliasedBoundedString);
                                AliasMemberFlag related_flags_MyAliasedBoundedString = 0;
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_string_100", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    std::string type_id_kind_anonymous_string_100("TI_STRING8_SMALL");
                                    if (type_id_kind_anonymous_string_100 == "TI_STRING8_SMALL")
                                    {
                                        SBound bound = static_cast<SBound>(100);
                                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                "anonymous_string_100"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_100 already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else if (type_id_kind_anonymous_string_100 == "TI_STRING8_LARGE")
                                    {
                                        LBound bound = 100;
                                        StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                "anonymous_string_100"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_100 already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_100: Unknown String kind.");
                                        return;
                                    }
                                    return_code_AllStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_string_100", type_ids_AllStruct_TypeIntrospectionExample);
                                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_100: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                CommonAliasBody common_MyAliasedBoundedString;
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_MyAliasedBoundedString = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedBoundedString, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_MyAliasedBoundedString = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedBoundedString, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyAliasedBoundedString related TypeIdentifier inconsistent.");
                                    return;
                                }
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyAliasedBoundedString;
                                ann_custom_MyAliasedBoundedString.reset();
                                CompleteAliasBody body_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_body(common_MyAliasedBoundedString, member_ann_builtin_MyAliasedBoundedString, ann_custom_MyAliasedBoundedString);
                                CompleteAliasType alias_type_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_type(alias_flags_MyAliasedBoundedString, header_MyAliasedBoundedString, body_MyAliasedBoundedString);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyAliasedBoundedString, type_name_MyAliasedBoundedString.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyAliasedBoundedString already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyAliasedBoundedString", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyAliasedBoundedString: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_my_aliased_bounded_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_my_aliased_bounded_string;
                            MemberId member_id_my_aliased_bounded_string = 0x00000015;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_aliased_bounded_string = TypeObjectUtils::build_common_struct_member(member_id_my_aliased_bounded_string, member_flags_my_aliased_bounded_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_aliased_bounded_string = TypeObjectUtils::build_common_struct_member(member_id_my_aliased_bounded_string, member_flags_my_aliased_bounded_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_aliased_bounded_string member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_my_aliased_bounded_string = "my_aliased_bounded_string";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_aliased_bounded_string;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_my_aliased_bounded_string = TypeObjectUtils::build_complete_member_detail(name_my_aliased_bounded_string, member_ann_builtin_my_aliased_bounded_string, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_my_aliased_bounded_string = TypeObjectUtils::build_complete_struct_member(common_my_aliased_bounded_string, detail_my_aliased_bounded_string);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_aliased_bounded_string);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MyRecursiveAlias", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                AliasTypeFlag alias_flags_MyRecursiveAlias = 0;
                                QualifiedTypeName type_name_MyRecursiveAlias = "MyRecursiveAlias";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyRecursiveAlias;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyRecursiveAlias;
                                CompleteTypeDetail detail_MyRecursiveAlias = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyRecursiveAlias, ann_custom_MyRecursiveAlias, type_name_MyRecursiveAlias.to_string());
                                CompleteAliasHeader header_MyRecursiveAlias = TypeObjectUtils::build_complete_alias_header(detail_MyRecursiveAlias);
                                AliasMemberFlag related_flags_MyRecursiveAlias = 0;
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyAliasedEnum", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    AliasTypeFlag alias_flags_MyAliasedEnum = 0;
                                    QualifiedTypeName type_name_MyAliasedEnum = "MyAliasedEnum";
                                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyAliasedEnum;
                                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyAliasedEnum;
                                    CompleteTypeDetail detail_MyAliasedEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyAliasedEnum, ann_custom_MyAliasedEnum, type_name_MyAliasedEnum.to_string());
                                    CompleteAliasHeader header_MyAliasedEnum = TypeObjectUtils::build_complete_alias_header(detail_MyAliasedEnum);
                                    AliasMemberFlag related_flags_MyAliasedEnum = 0;
                                    return_code_AllStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);

                                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EnumTypeFlag enum_flags_MyEnum = 0;
                                        BitBound bit_bound_MyEnum = 32;
                                        CommonEnumeratedHeader common_MyEnum = TypeObjectUtils::build_common_enumerated_header(bit_bound_MyEnum);
                                        QualifiedTypeName type_name_MyEnum = "MyEnum";
                                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyEnum;
                                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyEnum;
                                        CompleteTypeDetail detail_MyEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyEnum, ann_custom_MyEnum, type_name_MyEnum.to_string());
                                        CompleteEnumeratedHeader header_MyEnum = TypeObjectUtils::build_complete_enumerated_header(common_MyEnum, detail_MyEnum);
                                        CompleteEnumeratedLiteralSeq literal_seq_MyEnum;
                                        {
                                            EnumeratedLiteralFlag flags_A = TypeObjectUtils::build_enumerated_literal_flag(false);
                                            CommonEnumeratedLiteral common_A = TypeObjectUtils::build_common_enumerated_literal(0, flags_A);
                                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_A;
                                            ann_custom_MyEnum.reset();
                                            MemberName name_A = "A";
                                            CompleteMemberDetail detail_A = TypeObjectUtils::build_complete_member_detail(name_A, member_ann_builtin_A, ann_custom_MyEnum);
                                            CompleteEnumeratedLiteral literal_A = TypeObjectUtils::build_complete_enumerated_literal(common_A, detail_A);
                                            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_A);
                                        }
                                        {
                                            EnumeratedLiteralFlag flags_B = TypeObjectUtils::build_enumerated_literal_flag(false);
                                            CommonEnumeratedLiteral common_B = TypeObjectUtils::build_common_enumerated_literal(1, flags_B);
                                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_B;
                                            ann_custom_MyEnum.reset();
                                            MemberName name_B = "B";
                                            CompleteMemberDetail detail_B = TypeObjectUtils::build_complete_member_detail(name_B, member_ann_builtin_B, ann_custom_MyEnum);
                                            CompleteEnumeratedLiteral literal_B = TypeObjectUtils::build_complete_enumerated_literal(common_B, detail_B);
                                            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_B);
                                        }
                                        {
                                            EnumeratedLiteralFlag flags_C = TypeObjectUtils::build_enumerated_literal_flag(false);
                                            CommonEnumeratedLiteral common_C = TypeObjectUtils::build_common_enumerated_literal(2, flags_C);
                                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_C;
                                            ann_custom_MyEnum.reset();
                                            MemberName name_C = "C";
                                            CompleteMemberDetail detail_C = TypeObjectUtils::build_complete_member_detail(name_C, member_ann_builtin_C, ann_custom_MyEnum);
                                            CompleteEnumeratedLiteral literal_C = TypeObjectUtils::build_complete_enumerated_literal(common_C, detail_C);
                                            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_C);
                                        }
                                        CompleteEnumeratedType enumerated_type_MyEnum = TypeObjectUtils::build_complete_enumerated_type(enum_flags_MyEnum, header_MyEnum,
                                                literal_seq_MyEnum);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_MyEnum, type_name_MyEnum.to_string()))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyEnum already registered in TypeObjectRegistry for a different type.");
                                        }
                                        return_code_AllStruct_TypeIntrospectionExample =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);
                                        if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonAliasBody common_MyAliasedEnum;
                                    if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_MyAliasedEnum = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedEnum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_MyAliasedEnum = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedEnum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyAliasedEnum related TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyAliasedEnum;
                                    ann_custom_MyAliasedEnum.reset();
                                    CompleteAliasBody body_MyAliasedEnum = TypeObjectUtils::build_complete_alias_body(common_MyAliasedEnum, member_ann_builtin_MyAliasedEnum, ann_custom_MyAliasedEnum);
                                    CompleteAliasType alias_type_MyAliasedEnum = TypeObjectUtils::build_complete_alias_type(alias_flags_MyAliasedEnum, header_MyAliasedEnum, body_MyAliasedEnum);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyAliasedEnum, type_name_MyAliasedEnum.to_string()))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyAliasedEnum already registered in TypeObjectRegistry for a different type.");
                                    }
                                    return_code_AllStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "MyAliasedEnum", type_ids_AllStruct_TypeIntrospectionExample);
                                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "MyAliasedEnum: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                CommonAliasBody common_MyRecursiveAlias;
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_MyRecursiveAlias = TypeObjectUtils::build_common_alias_body(related_flags_MyRecursiveAlias, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_MyRecursiveAlias = TypeObjectUtils::build_common_alias_body(related_flags_MyRecursiveAlias, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyRecursiveAlias related TypeIdentifier inconsistent.");
                                    return;
                                }
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyRecursiveAlias;
                                ann_custom_MyRecursiveAlias.reset();
                                CompleteAliasBody body_MyRecursiveAlias = TypeObjectUtils::build_complete_alias_body(common_MyRecursiveAlias, member_ann_builtin_MyRecursiveAlias, ann_custom_MyRecursiveAlias);
                                CompleteAliasType alias_type_MyRecursiveAlias = TypeObjectUtils::build_complete_alias_type(alias_flags_MyRecursiveAlias, header_MyRecursiveAlias, body_MyRecursiveAlias);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyRecursiveAlias, type_name_MyRecursiveAlias.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyRecursiveAlias already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyRecursiveAlias", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyRecursiveAlias: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_my_recursive_alias = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_my_recursive_alias;
                            MemberId member_id_my_recursive_alias = 0x00000016;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_recursive_alias = TypeObjectUtils::build_common_struct_member(member_id_my_recursive_alias, member_flags_my_recursive_alias, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_recursive_alias = TypeObjectUtils::build_common_struct_member(member_id_my_recursive_alias, member_flags_my_recursive_alias, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_recursive_alias member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_my_recursive_alias = "my_recursive_alias";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_recursive_alias;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_my_recursive_alias = TypeObjectUtils::build_complete_member_detail(name_my_recursive_alias, member_ann_builtin_my_recursive_alias, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_my_recursive_alias = TypeObjectUtils::build_complete_struct_member(common_my_recursive_alias, detail_my_recursive_alias);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_recursive_alias);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_sequence_int16_t_5", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_int16_t", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                TypeIdentifier* element_identifier_anonymous_sequence_int16_t_5 {nullptr};
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_sequence_int16_t_5 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_sequence_int16_t_5 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Sequence element TypeIdentifier inconsistent.");
                                    return;
                                }
                                EquivalenceKind equiv_kind_anonymous_sequence_int16_t_5 = EK_COMPLETE;
                                if (TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d())
                                {
                                    equiv_kind_anonymous_sequence_int16_t_5 = EK_BOTH;
                                }
                                CollectionElementFlag element_flags_anonymous_sequence_int16_t_5 = 0;
                                PlainCollectionHeader header_anonymous_sequence_int16_t_5 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_int16_t_5, element_flags_anonymous_sequence_int16_t_5);
                                std::string type_id_kind_anonymous_sequence_int16_t_5("TI_PLAIN_SEQUENCE_SMALL");
                                if (type_id_kind_anonymous_sequence_int16_t_5 == "TI_PLAIN_SEQUENCE_SMALL")
                                {
                                    SBound bound = static_cast<SBound>(5);
                                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_int16_t_5, bound,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int16_t_5));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_int16_t_5"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_sequence_int16_t_5 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    LBound bound = 5;
                                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_int16_t_5, bound,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int16_t_5));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_int16_t_5"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_sequence_int16_t_5 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_sequence_int16_t_5", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_sequence_int16_t_5: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_short_sequence = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_short_sequence;
                            MemberId member_id_short_sequence = 0x00000017;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_short_sequence = TypeObjectUtils::build_common_struct_member(member_id_short_sequence, member_flags_short_sequence, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_short_sequence = TypeObjectUtils::build_common_struct_member(member_id_short_sequence, member_flags_short_sequence, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure short_sequence member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_short_sequence = "short_sequence";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_short_sequence;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_short_sequence = TypeObjectUtils::build_complete_member_detail(name_short_sequence, member_ann_builtin_short_sequence, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_short_sequence = TypeObjectUtils::build_complete_struct_member(common_short_sequence, detail_short_sequence);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_short_sequence);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_array_int32_t_2_3_4", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_int32_t", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                TypeIdentifier* element_identifier_anonymous_array_int32_t_2_3_4 {nullptr};
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_array_int32_t_2_3_4 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_array_int32_t_2_3_4 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Array element TypeIdentifier inconsistent.");
                                    return;
                                }
                                EquivalenceKind equiv_kind_anonymous_array_int32_t_2_3_4 = EK_COMPLETE;
                                if (TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d())
                                {
                                    equiv_kind_anonymous_array_int32_t_2_3_4 = EK_BOTH;
                                }
                                CollectionElementFlag element_flags_anonymous_array_int32_t_2_3_4 = 0;
                                PlainCollectionHeader header_anonymous_array_int32_t_2_3_4 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_int32_t_2_3_4, element_flags_anonymous_array_int32_t_2_3_4);
                                std::string type_id_kind_anonymous_array_int32_t_2_3_4("TI_PLAIN_ARRAY_SMALL");
                                if (type_id_kind_anonymous_array_int32_t_2_3_4 == "TI_PLAIN_ARRAY_SMALL")
                                {
                                    SBoundSeq array_bound_seq;
                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(2));

                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(3));

                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_int32_t_2_3_4, array_bound_seq,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int32_t_2_3_4));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_int32_t_2_3_4"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_array_int32_t_2_3_4 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    LBoundSeq array_bound_seq;
                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(2));

                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(3));

                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(4));

                                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header_anonymous_array_int32_t_2_3_4, array_bound_seq,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int32_t_2_3_4));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_int32_t_2_3_4"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_array_int32_t_2_3_4 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_array_int32_t_2_3_4", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_array_int32_t_2_3_4: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_long_array = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_long_array;
                            MemberId member_id_long_array = 0x00000018;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_long_array = TypeObjectUtils::build_common_struct_member(member_id_long_array, member_flags_long_array, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_long_array = TypeObjectUtils::build_common_struct_member(member_id_long_array, member_flags_long_array, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure long_array member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_long_array = "long_array";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_long_array;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_long_array = TypeObjectUtils::build_complete_member_detail(name_long_array, member_ann_builtin_long_array, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_long_array = TypeObjectUtils::build_complete_struct_member(common_long_array, detail_long_array);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_long_array);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                                    if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                                    {
                                        SBound bound = 0;
                                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                "anonymous_string_unbounded"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                                    {
                                        LBound bound = 255;
                                        StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                "anonymous_string_unbounded"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_unbounded: Unknown String kind.");
                                        return;
                                    }
                                    return_code_AllStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded {nullptr};
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded inconsistent element TypeIdentifier.");
                                    return;
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                                    if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                                    {
                                        SBound bound = 0;
                                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                "anonymous_string_unbounded"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                                    {
                                        LBound bound = 255;
                                        StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                "anonymous_string_unbounded"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_unbounded: Unknown String kind.");
                                        return;
                                    }
                                    return_code_AllStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded {nullptr};
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded inconsistent key TypeIdentifier.");
                                    return;
                                }
                                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = EK_BOTH;
                                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d()) ||
                                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                                {
                                    equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = EK_COMPLETE;
                                }
                                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = 0;
                                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = 0;
                                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded);
                                std::string type_id_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded("TI_PLAIN_MAP_SMALL");
                                if (type_id_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded == "TI_PLAIN_MAP_SMALL")
                                {
                                    SBound bound = 0;
                                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded, bound,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded,
                                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    LBound bound = 0;
                                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded, bound,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded,
                                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_string_unbounded_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_string_unbounded_map;
                            MemberId member_id_string_unbounded_map = 0x00000019;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_string_unbounded_map = TypeObjectUtils::build_common_struct_member(member_id_string_unbounded_map, member_flags_string_unbounded_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_string_unbounded_map = TypeObjectUtils::build_common_struct_member(member_id_string_unbounded_map, member_flags_string_unbounded_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure string_unbounded_map member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_string_unbounded_map = "string_unbounded_map";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_string_unbounded_map;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_string_unbounded_map = TypeObjectUtils::build_complete_member_detail(name_string_unbounded_map, member_ann_builtin_string_unbounded_map, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_string_unbounded_map = TypeObjectUtils::build_complete_struct_member(common_string_unbounded_map, detail_string_unbounded_map);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_string_unbounded_map);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyAliasedBoundedString", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    AliasTypeFlag alias_flags_MyAliasedBoundedString = 0;
                                    QualifiedTypeName type_name_MyAliasedBoundedString = "MyAliasedBoundedString";
                                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyAliasedBoundedString;
                                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyAliasedBoundedString;
                                    CompleteTypeDetail detail_MyAliasedBoundedString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyAliasedBoundedString, ann_custom_MyAliasedBoundedString, type_name_MyAliasedBoundedString.to_string());
                                    CompleteAliasHeader header_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_header(detail_MyAliasedBoundedString);
                                    AliasMemberFlag related_flags_MyAliasedBoundedString = 0;
                                    return_code_AllStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_string_100", type_ids_AllStruct_TypeIntrospectionExample);

                                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        std::string type_id_kind_anonymous_string_100("TI_STRING8_SMALL");
                                        if (type_id_kind_anonymous_string_100 == "TI_STRING8_SMALL")
                                        {
                                            SBound bound = static_cast<SBound>(100);
                                            StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                    "anonymous_string_100"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_100 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else if (type_id_kind_anonymous_string_100 == "TI_STRING8_LARGE")
                                        {
                                            LBound bound = 100;
                                            StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                    "anonymous_string_100"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_100 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_string_100: Unknown String kind.");
                                            return;
                                        }
                                        return_code_AllStruct_TypeIntrospectionExample =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_string_100", type_ids_AllStruct_TypeIntrospectionExample);
                                        if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_string_100: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonAliasBody common_MyAliasedBoundedString;
                                    if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_MyAliasedBoundedString = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedBoundedString, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_MyAliasedBoundedString = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedBoundedString, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyAliasedBoundedString related TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyAliasedBoundedString;
                                    ann_custom_MyAliasedBoundedString.reset();
                                    CompleteAliasBody body_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_body(common_MyAliasedBoundedString, member_ann_builtin_MyAliasedBoundedString, ann_custom_MyAliasedBoundedString);
                                    CompleteAliasType alias_type_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_type(alias_flags_MyAliasedBoundedString, header_MyAliasedBoundedString, body_MyAliasedBoundedString);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyAliasedBoundedString, type_name_MyAliasedBoundedString.to_string()))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyAliasedBoundedString already registered in TypeObjectRegistry for a different type.");
                                    }
                                    return_code_AllStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "MyAliasedBoundedString", type_ids_AllStruct_TypeIntrospectionExample);
                                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "MyAliasedBoundedString: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded {nullptr};
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded inconsistent element TypeIdentifier.");
                                    return;
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                                    if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                                    {
                                        SBound bound = 0;
                                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                "anonymous_string_unbounded"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                                    {
                                        LBound bound = 255;
                                        StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                "anonymous_string_unbounded"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_unbounded: Unknown String kind.");
                                        return;
                                    }
                                    return_code_AllStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded {nullptr};
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded inconsistent key TypeIdentifier.");
                                    return;
                                }
                                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = EK_BOTH;
                                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d()) ||
                                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->map_sdefn().header().equiv_kind())) ||
                                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->map_ldefn().header().equiv_kind())))
                                {
                                    equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = EK_COMPLETE;
                                }
                                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = 0;
                                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = 0;
                                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded);
                                std::string type_id_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded("TI_PLAIN_MAP_SMALL");
                                if (type_id_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded == "TI_PLAIN_MAP_SMALL")
                                {
                                    SBound bound = 0;
                                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded, bound,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded,
                                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    LBound bound = 0;
                                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded, bound,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded,
                                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_string_alias_unbounded_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_string_alias_unbounded_map;
                            MemberId member_id_string_alias_unbounded_map = 0x0000001a;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_string_alias_unbounded_map = TypeObjectUtils::build_common_struct_member(member_id_string_alias_unbounded_map, member_flags_string_alias_unbounded_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_string_alias_unbounded_map = TypeObjectUtils::build_common_struct_member(member_id_string_alias_unbounded_map, member_flags_string_alias_unbounded_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure string_alias_unbounded_map member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_string_alias_unbounded_map = "string_alias_unbounded_map";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_string_alias_unbounded_map;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_string_alias_unbounded_map = TypeObjectUtils::build_complete_member_detail(name_string_alias_unbounded_map, member_ann_builtin_string_alias_unbounded_map, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_string_alias_unbounded_map = TypeObjectUtils::build_complete_struct_member(common_string_alias_unbounded_map, detail_string_alias_unbounded_map);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_string_alias_unbounded_map);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_map_int16_t_int32_t_2", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_int32_t", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                TypeIdentifier* element_identifier_anonymous_map_int16_t_int32_t_2 {nullptr};
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_map_int16_t_int32_t_2 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_map_int16_t_int32_t_2 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_int16_t_int32_t_2 inconsistent element TypeIdentifier.");
                                    return;
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_int16_t", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                TypeIdentifier* key_identifier_anonymous_map_int16_t_int32_t_2 {nullptr};
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    key_identifier_anonymous_map_int16_t_int32_t_2 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    key_identifier_anonymous_map_int16_t_int32_t_2 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_int16_t_int32_t_2 inconsistent key TypeIdentifier.");
                                    return;
                                }
                                EquivalenceKind equiv_kind_anonymous_map_int16_t_int32_t_2 = EK_BOTH;
                                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_int32_t_2->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->_d()) ||
                                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->map_sdefn().header().equiv_kind())) ||
                                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->map_ldefn().header().equiv_kind())))
                                {
                                    equiv_kind_anonymous_map_int16_t_int32_t_2 = EK_COMPLETE;
                                }
                                CollectionElementFlag element_flags_anonymous_map_int16_t_int32_t_2 = 0;
                                CollectionElementFlag key_flags_anonymous_map_int16_t_int32_t_2 = 0;
                                PlainCollectionHeader header_anonymous_map_int16_t_int32_t_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_int32_t_2, element_flags_anonymous_map_int16_t_int32_t_2);
                                std::string type_id_kind_anonymous_map_int16_t_int32_t_2("TI_PLAIN_MAP_SMALL");
                                if (type_id_kind_anonymous_map_int16_t_int32_t_2 == "TI_PLAIN_MAP_SMALL")
                                {
                                    SBound bound = static_cast<SBound>(2);
                                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_int32_t_2, bound,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_int32_t_2), key_flags_anonymous_map_int16_t_int32_t_2,
                                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_int32_t_2));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_int32_t_2"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_map_int16_t_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    LBound bound = 2;
                                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_int16_t_int32_t_2, bound,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_int32_t_2), key_flags_anonymous_map_int16_t_int32_t_2,
                                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_int32_t_2));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int16_t_int32_t_2"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_map_int16_t_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_map_int16_t_int32_t_2", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_map_int16_t_int32_t_2: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_short_long_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_short_long_map;
                            MemberId member_id_short_long_map = 0x0000001b;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_short_long_map = TypeObjectUtils::build_common_struct_member(member_id_short_long_map, member_flags_short_long_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_short_long_map = TypeObjectUtils::build_common_struct_member(member_id_short_long_map, member_flags_short_long_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure short_long_map member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_short_long_map = "short_long_map";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_short_long_map;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_short_long_map = TypeObjectUtils::build_complete_member_detail(name_short_long_map, member_ann_builtin_short_long_map, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_short_long_map = TypeObjectUtils::build_complete_struct_member(common_short_long_map, detail_short_long_map);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_short_long_map);
                        }
                        CompleteStructType struct_type_AllStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_type(struct_flags_AllStruct_TypeIntrospectionExample, header_AllStruct_TypeIntrospectionExample, member_seq_AllStruct_TypeIntrospectionExample);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_struct_type_object(struct_type_AllStruct_TypeIntrospectionExample, type_name_AllStruct_TypeIntrospectionExample.to_string()))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "AllStruct_TypeIntrospectionExample already registered in TypeObjectRegistry for a different type.");
                        }
                        return_code_AllStruct_TypeIntrospectionExample =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "AllStruct_TypeIntrospectionExample", type_ids_AllStruct_TypeIntrospectionExample);
                        if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "AllStruct_TypeIntrospectionExample: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                }
                TypeIdentifier* element_identifier_anonymous_array_AllStruct_TypeIntrospectionExample_2 {nullptr};
                if (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_array_AllStruct_TypeIntrospectionExample_2 = new TypeIdentifier(type_ids_DataTest_TypeIntrospectionExample.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_array_AllStruct_TypeIntrospectionExample_2 = new TypeIdentifier(type_ids_DataTest_TypeIntrospectionExample.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_AllStruct_TypeIntrospectionExample_2 = EK_COMPLETE;
                if (TK_NONE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_AllStruct_TypeIntrospectionExample_2 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_AllStruct_TypeIntrospectionExample_2 = 0;
                PlainCollectionHeader header_anonymous_array_AllStruct_TypeIntrospectionExample_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_AllStruct_TypeIntrospectionExample_2, element_flags_anonymous_array_AllStruct_TypeIntrospectionExample_2);
                std::string type_id_kind_anonymous_array_AllStruct_TypeIntrospectionExample_2("TI_PLAIN_ARRAY_SMALL");
                if (type_id_kind_anonymous_array_AllStruct_TypeIntrospectionExample_2 == "TI_PLAIN_ARRAY_SMALL")
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(2));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_AllStruct_TypeIntrospectionExample_2, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_AllStruct_TypeIntrospectionExample_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_AllStruct_TypeIntrospectionExample_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_AllStruct_TypeIntrospectionExample_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(2));

                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header_anonymous_array_AllStruct_TypeIntrospectionExample_2, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_AllStruct_TypeIntrospectionExample_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_AllStruct_TypeIntrospectionExample_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_AllStruct_TypeIntrospectionExample_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_DataTest_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_array_AllStruct_TypeIntrospectionExample_2", type_ids_DataTest_TypeIntrospectionExample);
                if (return_code_DataTest_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_array_AllStruct_TypeIntrospectionExample_2: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_complex_array = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_complex_array;
            MemberId member_id_complex_array = 0x00000003;
            if (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_complex_array = TypeObjectUtils::build_common_struct_member(member_id_complex_array, member_flags_complex_array, type_ids_DataTest_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_complex_array = TypeObjectUtils::build_common_struct_member(member_id_complex_array, member_flags_complex_array, type_ids_DataTest_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure complex_array member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_complex_array = "complex_array";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_complex_array;
            ann_custom_DataTest_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_complex_array = TypeObjectUtils::build_complete_member_detail(name_complex_array, member_ann_builtin_complex_array, ann_custom_DataTest_TypeIntrospectionExample);
            CompleteStructMember member_complex_array = TypeObjectUtils::build_complete_struct_member(common_complex_array, detail_complex_array);
            TypeObjectUtils::add_complete_struct_member(member_seq_DataTest_TypeIntrospectionExample, member_complex_array);
        }
        {
            return_code_DataTest_TypeIntrospectionExample =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded", type_ids_DataTest_TypeIntrospectionExample);

            if (return_code_DataTest_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_DataTest_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "AllStruct_TypeIntrospectionExample", type_ids_DataTest_TypeIntrospectionExample);

                if (return_code_DataTest_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    {
                        StructTypeFlag struct_flags_AllStruct_TypeIntrospectionExample = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                false, false);
                        ReturnCode_t return_code_AllStruct_TypeIntrospectionExample;
                        TypeIdentifierPair type_ids_AllStruct_TypeIntrospectionExample;
                        return_code_AllStruct_TypeIntrospectionExample =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "PrimitivesStruct_TypeIntrospectionExample", type_ids_AllStruct_TypeIntrospectionExample);

                        if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags_PrimitivesStruct_TypeIntrospectionExample = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code_PrimitivesStruct_TypeIntrospectionExample;
                                TypeIdentifierPair type_ids_PrimitivesStruct_TypeIntrospectionExample;
                                QualifiedTypeName type_name_PrimitivesStruct_TypeIntrospectionExample = "PrimitivesStruct_TypeIntrospectionExample";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_PrimitivesStruct_TypeIntrospectionExample;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_PrimitivesStruct_TypeIntrospectionExample;
                                CompleteTypeDetail detail_PrimitivesStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_PrimitivesStruct_TypeIntrospectionExample, ann_custom_PrimitivesStruct_TypeIntrospectionExample, type_name_PrimitivesStruct_TypeIntrospectionExample.to_string());
                                CompleteStructHeader header_PrimitivesStruct_TypeIntrospectionExample;
                                header_PrimitivesStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_PrimitivesStruct_TypeIntrospectionExample);
                                CompleteStructMemberSeq member_seq_PrimitivesStruct_TypeIntrospectionExample;
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_bool", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_bool = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_bool;
                                    MemberId member_id_my_bool = 0x00000000;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_bool = TypeObjectUtils::build_common_struct_member(member_id_my_bool, member_flags_my_bool, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_bool = TypeObjectUtils::build_common_struct_member(member_id_my_bool, member_flags_my_bool, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_bool member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_bool = "my_bool";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_bool;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_bool = TypeObjectUtils::build_complete_member_detail(name_my_bool, member_ann_builtin_my_bool, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_bool = TypeObjectUtils::build_complete_struct_member(common_my_bool, detail_my_bool);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_bool);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_byte", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_octet = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_octet;
                                    MemberId member_id_my_octet = 0x00000001;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_octet = TypeObjectUtils::build_common_struct_member(member_id_my_octet, member_flags_my_octet, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_octet = TypeObjectUtils::build_common_struct_member(member_id_my_octet, member_flags_my_octet, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_octet member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_octet = "my_octet";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_octet;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_octet = TypeObjectUtils::build_complete_member_detail(name_my_octet, member_ann_builtin_my_octet, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_octet = TypeObjectUtils::build_complete_struct_member(common_my_octet, detail_my_octet);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_octet);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_char", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_char Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_char = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_char;
                                    MemberId member_id_my_char = 0x00000002;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_char = TypeObjectUtils::build_common_struct_member(member_id_my_char, member_flags_my_char, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_char = TypeObjectUtils::build_common_struct_member(member_id_my_char, member_flags_my_char, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_char member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_char = "my_char";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_char;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_char = TypeObjectUtils::build_complete_member_detail(name_my_char, member_ann_builtin_my_char, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_char = TypeObjectUtils::build_complete_struct_member(common_my_char, detail_my_char);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_char);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_wchar_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_wchar Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_wchar = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_wchar;
                                    MemberId member_id_my_wchar = 0x00000003;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_wchar = TypeObjectUtils::build_common_struct_member(member_id_my_wchar, member_flags_my_wchar, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_wchar = TypeObjectUtils::build_common_struct_member(member_id_my_wchar, member_flags_my_wchar, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_wchar member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_wchar = "my_wchar";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_wchar;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_wchar = TypeObjectUtils::build_complete_member_detail(name_my_wchar, member_ann_builtin_my_wchar, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_wchar = TypeObjectUtils::build_complete_struct_member(common_my_wchar, detail_my_wchar);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_wchar);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int32_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_long Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_long = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_long;
                                    MemberId member_id_my_long = 0x00000004;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_long = TypeObjectUtils::build_common_struct_member(member_id_my_long, member_flags_my_long, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_long = TypeObjectUtils::build_common_struct_member(member_id_my_long, member_flags_my_long, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_long member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_long = "my_long";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_long;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_long = TypeObjectUtils::build_complete_member_detail(name_my_long, member_ann_builtin_my_long, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_long = TypeObjectUtils::build_complete_struct_member(common_my_long, detail_my_long);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_long);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_uint32_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_ulong Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_ulong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_ulong;
                                    MemberId member_id_my_ulong = 0x00000005;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_ulong = TypeObjectUtils::build_common_struct_member(member_id_my_ulong, member_flags_my_ulong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_ulong = TypeObjectUtils::build_common_struct_member(member_id_my_ulong, member_flags_my_ulong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_ulong member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_ulong = "my_ulong";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_ulong;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_ulong = TypeObjectUtils::build_complete_member_detail(name_my_ulong, member_ann_builtin_my_ulong, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_ulong = TypeObjectUtils::build_complete_struct_member(common_my_ulong, detail_my_ulong);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_ulong);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int8_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_int8 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_int8 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_int8;
                                    MemberId member_id_my_int8 = 0x00000006;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_int8 = TypeObjectUtils::build_common_struct_member(member_id_my_int8, member_flags_my_int8, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_int8 = TypeObjectUtils::build_common_struct_member(member_id_my_int8, member_flags_my_int8, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_int8 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_int8 = "my_int8";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_int8;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_int8 = TypeObjectUtils::build_complete_member_detail(name_my_int8, member_ann_builtin_my_int8, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_int8 = TypeObjectUtils::build_complete_struct_member(common_my_int8, detail_my_int8);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_int8);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_uint8_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_uint8 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_uint8 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_uint8;
                                    MemberId member_id_my_uint8 = 0x00000007;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_uint8 = TypeObjectUtils::build_common_struct_member(member_id_my_uint8, member_flags_my_uint8, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_uint8 = TypeObjectUtils::build_common_struct_member(member_id_my_uint8, member_flags_my_uint8, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_uint8 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_uint8 = "my_uint8";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_uint8;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_uint8 = TypeObjectUtils::build_complete_member_detail(name_my_uint8, member_ann_builtin_my_uint8, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_uint8 = TypeObjectUtils::build_complete_struct_member(common_my_uint8, detail_my_uint8);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_uint8);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int16_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_short Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_short = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_short;
                                    MemberId member_id_my_short = 0x00000008;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_short = TypeObjectUtils::build_common_struct_member(member_id_my_short, member_flags_my_short, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_short = TypeObjectUtils::build_common_struct_member(member_id_my_short, member_flags_my_short, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_short member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_short = "my_short";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_short;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_short = TypeObjectUtils::build_complete_member_detail(name_my_short, member_ann_builtin_my_short, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_short = TypeObjectUtils::build_complete_struct_member(common_my_short, detail_my_short);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_short);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_uint16_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_ushort Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_ushort = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_ushort;
                                    MemberId member_id_my_ushort = 0x00000009;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_ushort = TypeObjectUtils::build_common_struct_member(member_id_my_ushort, member_flags_my_ushort, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_ushort = TypeObjectUtils::build_common_struct_member(member_id_my_ushort, member_flags_my_ushort, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_ushort member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_ushort = "my_ushort";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_ushort;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_ushort = TypeObjectUtils::build_complete_member_detail(name_my_ushort, member_ann_builtin_my_ushort, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_ushort = TypeObjectUtils::build_complete_struct_member(common_my_ushort, detail_my_ushort);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_ushort);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int64_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_longlong Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_longlong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_longlong;
                                    MemberId member_id_my_longlong = 0x0000000a;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_longlong = TypeObjectUtils::build_common_struct_member(member_id_my_longlong, member_flags_my_longlong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_longlong = TypeObjectUtils::build_common_struct_member(member_id_my_longlong, member_flags_my_longlong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_longlong member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_longlong = "my_longlong";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_longlong;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_longlong = TypeObjectUtils::build_complete_member_detail(name_my_longlong, member_ann_builtin_my_longlong, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_longlong = TypeObjectUtils::build_complete_struct_member(common_my_longlong, detail_my_longlong);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_longlong);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_uint64_t", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_ulonglong Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_ulonglong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_ulonglong;
                                    MemberId member_id_my_ulonglong = 0x0000000b;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_ulonglong = TypeObjectUtils::build_common_struct_member(member_id_my_ulonglong, member_flags_my_ulonglong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_ulonglong = TypeObjectUtils::build_common_struct_member(member_id_my_ulonglong, member_flags_my_ulonglong, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_ulonglong member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_ulonglong = "my_ulonglong";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_ulonglong;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_ulonglong = TypeObjectUtils::build_complete_member_detail(name_my_ulonglong, member_ann_builtin_my_ulonglong, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_ulonglong = TypeObjectUtils::build_complete_struct_member(common_my_ulonglong, detail_my_ulonglong);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_ulonglong);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_float", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_float Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_float = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_float;
                                    MemberId member_id_my_float = 0x0000000c;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_float = TypeObjectUtils::build_common_struct_member(member_id_my_float, member_flags_my_float, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_float = TypeObjectUtils::build_common_struct_member(member_id_my_float, member_flags_my_float, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_float member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_float = "my_float";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_float;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_float = TypeObjectUtils::build_complete_member_detail(name_my_float, member_ann_builtin_my_float, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_float = TypeObjectUtils::build_complete_struct_member(common_my_float, detail_my_float);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_float);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_double", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_double Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_double = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_double;
                                    MemberId member_id_my_double = 0x0000000d;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_double = TypeObjectUtils::build_common_struct_member(member_id_my_double, member_flags_my_double, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_double = TypeObjectUtils::build_common_struct_member(member_id_my_double, member_flags_my_double, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_double member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_double = "my_double";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_double;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_double = TypeObjectUtils::build_complete_member_detail(name_my_double, member_ann_builtin_my_double, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_double = TypeObjectUtils::build_complete_struct_member(common_my_double, detail_my_double);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_double);
                                }
                                {
                                    return_code_PrimitivesStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_longdouble", type_ids_PrimitivesStruct_TypeIntrospectionExample);

                                    if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_longdouble Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    StructMemberFlag member_flags_my_longdouble = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    CommonStructMember common_my_longdouble;
                                    MemberId member_id_my_longdouble = 0x0000000e;
                                    if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_longdouble = TypeObjectUtils::build_common_struct_member(member_id_my_longdouble, member_flags_my_longdouble, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_my_longdouble = TypeObjectUtils::build_common_struct_member(member_id_my_longdouble, member_flags_my_longdouble, type_ids_PrimitivesStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_longdouble member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_my_longdouble = "my_longdouble";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_longdouble;
                                    ann_custom_PrimitivesStruct_TypeIntrospectionExample.reset();
                                    CompleteMemberDetail detail_my_longdouble = TypeObjectUtils::build_complete_member_detail(name_my_longdouble, member_ann_builtin_my_longdouble, ann_custom_PrimitivesStruct_TypeIntrospectionExample);
                                    CompleteStructMember member_my_longdouble = TypeObjectUtils::build_complete_struct_member(common_my_longdouble, detail_my_longdouble);
                                    TypeObjectUtils::add_complete_struct_member(member_seq_PrimitivesStruct_TypeIntrospectionExample, member_my_longdouble);
                                }
                                CompleteStructType struct_type_PrimitivesStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_type(struct_flags_PrimitivesStruct_TypeIntrospectionExample, header_PrimitivesStruct_TypeIntrospectionExample, member_seq_PrimitivesStruct_TypeIntrospectionExample);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type_PrimitivesStruct_TypeIntrospectionExample, type_name_PrimitivesStruct_TypeIntrospectionExample.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "PrimitivesStruct_TypeIntrospectionExample already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code_PrimitivesStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "PrimitivesStruct_TypeIntrospectionExample", type_ids_PrimitivesStruct_TypeIntrospectionExample);
                                if (return_code_PrimitivesStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "PrimitivesStruct_TypeIntrospectionExample: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        QualifiedTypeName type_name_AllStruct_TypeIntrospectionExample = "AllStruct_TypeIntrospectionExample";
                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_AllStruct_TypeIntrospectionExample;
                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_AllStruct_TypeIntrospectionExample;
                        CompleteTypeDetail detail_AllStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_AllStruct_TypeIntrospectionExample, ann_custom_AllStruct_TypeIntrospectionExample, type_name_AllStruct_TypeIntrospectionExample.to_string());
                        CompleteStructHeader header_AllStruct_TypeIntrospectionExample;
                        if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d())
                        {
                            header_AllStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_header(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1(), detail_AllStruct_TypeIntrospectionExample);
                        }
                        else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d())
                        {
                            header_AllStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_header(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2(), detail_AllStruct_TypeIntrospectionExample);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "AllStruct_TypeIntrospectionExample Structure: base_type TypeIdentifier registered in TypeObjectRegistry is inconsistent.");
                            return;
                        }
                        CompleteStructMemberSeq member_seq_AllStruct_TypeIntrospectionExample;
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                                if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                                {
                                    SBound bound = 0;
                                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                            "anonymous_string_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                                {
                                    LBound bound = 255;
                                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                            "anonymous_string_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded: Unknown String kind.");
                                    return;
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_my_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_my_string;
                            MemberId member_id_my_string = 0x0000000f;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_string = TypeObjectUtils::build_common_struct_member(member_id_my_string, member_flags_my_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_string = TypeObjectUtils::build_common_struct_member(member_id_my_string, member_flags_my_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_string member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_my_string = "my_string";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_string;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_my_string = TypeObjectUtils::build_complete_member_detail(name_my_string, member_ann_builtin_my_string, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_my_string = TypeObjectUtils::build_complete_struct_member(common_my_string, detail_my_string);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_string);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_wstring_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                std::string type_id_kind_anonymous_wstring_unbounded("TI_STRING16_SMALL");
                                if (type_id_kind_anonymous_wstring_unbounded == "TI_STRING16_SMALL")
                                {
                                    SBound bound = 0;
                                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                            "anonymous_wstring_unbounded", true))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else if (type_id_kind_anonymous_wstring_unbounded == "TI_STRING16_LARGE")
                                {
                                    LBound bound = 255;
                                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                            "anonymous_wstring_unbounded", true))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_wstring_unbounded: Unknown WString kind.");
                                    return;
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_wstring_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_wstring_unbounded: Given WString TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_my_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_my_wstring;
                            MemberId member_id_my_wstring = 0x00000010;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_wstring = TypeObjectUtils::build_common_struct_member(member_id_my_wstring, member_flags_my_wstring, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_wstring = TypeObjectUtils::build_common_struct_member(member_id_my_wstring, member_flags_my_wstring, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_wstring member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_my_wstring = "my_wstring";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_wstring;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_my_wstring = TypeObjectUtils::build_complete_member_detail(name_my_wstring, member_ann_builtin_my_wstring, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_my_wstring = TypeObjectUtils::build_complete_struct_member(common_my_wstring, detail_my_wstring);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_wstring);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_41925", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                std::string type_id_kind_anonymous_string_41925("TI_STRING8_LARGE");
                                if (type_id_kind_anonymous_string_41925 == "TI_STRING8_SMALL")
                                {
                                    SBound bound = static_cast<SBound>(41925);
                                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                            "anonymous_string_41925"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_41925 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else if (type_id_kind_anonymous_string_41925 == "TI_STRING8_LARGE")
                                {
                                    LBound bound = 41925;
                                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                            "anonymous_string_41925"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_41925 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_41925: Unknown String kind.");
                                    return;
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_string_41925", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_41925: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_my_bounded_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_my_bounded_string;
                            MemberId member_id_my_bounded_string = 0x00000011;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_bounded_string = TypeObjectUtils::build_common_struct_member(member_id_my_bounded_string, member_flags_my_bounded_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_bounded_string = TypeObjectUtils::build_common_struct_member(member_id_my_bounded_string, member_flags_my_bounded_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_bounded_string member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_my_bounded_string = "my_bounded_string";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_bounded_string;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_my_bounded_string = TypeObjectUtils::build_complete_member_detail(name_my_bounded_string, member_ann_builtin_my_bounded_string, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_my_bounded_string = TypeObjectUtils::build_complete_struct_member(common_my_bounded_string, detail_my_bounded_string);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_bounded_string);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_wstring_20925", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                std::string type_id_kind_anonymous_wstring_20925("TI_STRING16_LARGE");
                                if (type_id_kind_anonymous_wstring_20925 == "TI_STRING16_SMALL")
                                {
                                    SBound bound = static_cast<SBound>(20925);
                                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                            "anonymous_wstring_20925", true))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_wstring_20925 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else if (type_id_kind_anonymous_wstring_20925 == "TI_STRING16_LARGE")
                                {
                                    LBound bound = 20925;
                                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                            "anonymous_wstring_20925", true))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_wstring_20925 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_wstring_20925: Unknown WString kind.");
                                    return;
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_wstring_20925", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_wstring_20925: Given WString TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_my_bounded_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_my_bounded_wstring;
                            MemberId member_id_my_bounded_wstring = 0x00000012;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_bounded_wstring = TypeObjectUtils::build_common_struct_member(member_id_my_bounded_wstring, member_flags_my_bounded_wstring, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_bounded_wstring = TypeObjectUtils::build_common_struct_member(member_id_my_bounded_wstring, member_flags_my_bounded_wstring, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_bounded_wstring member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_my_bounded_wstring = "my_bounded_wstring";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_bounded_wstring;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_my_bounded_wstring = TypeObjectUtils::build_complete_member_detail(name_my_bounded_wstring, member_ann_builtin_my_bounded_wstring, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_my_bounded_wstring = TypeObjectUtils::build_complete_struct_member(common_my_bounded_wstring, detail_my_bounded_wstring);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_bounded_wstring);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EnumTypeFlag enum_flags_MyEnum = 0;
                                BitBound bit_bound_MyEnum = 32;
                                CommonEnumeratedHeader common_MyEnum = TypeObjectUtils::build_common_enumerated_header(bit_bound_MyEnum);
                                QualifiedTypeName type_name_MyEnum = "MyEnum";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyEnum;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyEnum;
                                CompleteTypeDetail detail_MyEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyEnum, ann_custom_MyEnum, type_name_MyEnum.to_string());
                                CompleteEnumeratedHeader header_MyEnum = TypeObjectUtils::build_complete_enumerated_header(common_MyEnum, detail_MyEnum);
                                CompleteEnumeratedLiteralSeq literal_seq_MyEnum;
                                {
                                    EnumeratedLiteralFlag flags_A = TypeObjectUtils::build_enumerated_literal_flag(false);
                                    CommonEnumeratedLiteral common_A = TypeObjectUtils::build_common_enumerated_literal(0, flags_A);
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_A;
                                    ann_custom_MyEnum.reset();
                                    MemberName name_A = "A";
                                    CompleteMemberDetail detail_A = TypeObjectUtils::build_complete_member_detail(name_A, member_ann_builtin_A, ann_custom_MyEnum);
                                    CompleteEnumeratedLiteral literal_A = TypeObjectUtils::build_complete_enumerated_literal(common_A, detail_A);
                                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_A);
                                }
                                {
                                    EnumeratedLiteralFlag flags_B = TypeObjectUtils::build_enumerated_literal_flag(false);
                                    CommonEnumeratedLiteral common_B = TypeObjectUtils::build_common_enumerated_literal(1, flags_B);
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_B;
                                    ann_custom_MyEnum.reset();
                                    MemberName name_B = "B";
                                    CompleteMemberDetail detail_B = TypeObjectUtils::build_complete_member_detail(name_B, member_ann_builtin_B, ann_custom_MyEnum);
                                    CompleteEnumeratedLiteral literal_B = TypeObjectUtils::build_complete_enumerated_literal(common_B, detail_B);
                                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_B);
                                }
                                {
                                    EnumeratedLiteralFlag flags_C = TypeObjectUtils::build_enumerated_literal_flag(false);
                                    CommonEnumeratedLiteral common_C = TypeObjectUtils::build_common_enumerated_literal(2, flags_C);
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_C;
                                    ann_custom_MyEnum.reset();
                                    MemberName name_C = "C";
                                    CompleteMemberDetail detail_C = TypeObjectUtils::build_complete_member_detail(name_C, member_ann_builtin_C, ann_custom_MyEnum);
                                    CompleteEnumeratedLiteral literal_C = TypeObjectUtils::build_complete_enumerated_literal(common_C, detail_C);
                                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_C);
                                }
                                CompleteEnumeratedType enumerated_type_MyEnum = TypeObjectUtils::build_complete_enumerated_type(enum_flags_MyEnum, header_MyEnum,
                                        literal_seq_MyEnum);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_MyEnum, type_name_MyEnum.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyEnum already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_my_enum = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_my_enum;
                            MemberId member_id_my_enum = 0x00000013;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_enum = TypeObjectUtils::build_common_struct_member(member_id_my_enum, member_flags_my_enum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_enum = TypeObjectUtils::build_common_struct_member(member_id_my_enum, member_flags_my_enum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_enum member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_my_enum = "my_enum";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_enum;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_my_enum = TypeObjectUtils::build_complete_member_detail(name_my_enum, member_ann_builtin_my_enum, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_my_enum = TypeObjectUtils::build_complete_struct_member(common_my_enum, detail_my_enum);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_enum);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MyAliasedEnum", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                AliasTypeFlag alias_flags_MyAliasedEnum = 0;
                                QualifiedTypeName type_name_MyAliasedEnum = "MyAliasedEnum";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyAliasedEnum;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyAliasedEnum;
                                CompleteTypeDetail detail_MyAliasedEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyAliasedEnum, ann_custom_MyAliasedEnum, type_name_MyAliasedEnum.to_string());
                                CompleteAliasHeader header_MyAliasedEnum = TypeObjectUtils::build_complete_alias_header(detail_MyAliasedEnum);
                                AliasMemberFlag related_flags_MyAliasedEnum = 0;
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EnumTypeFlag enum_flags_MyEnum = 0;
                                    BitBound bit_bound_MyEnum = 32;
                                    CommonEnumeratedHeader common_MyEnum = TypeObjectUtils::build_common_enumerated_header(bit_bound_MyEnum);
                                    QualifiedTypeName type_name_MyEnum = "MyEnum";
                                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyEnum;
                                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyEnum;
                                    CompleteTypeDetail detail_MyEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyEnum, ann_custom_MyEnum, type_name_MyEnum.to_string());
                                    CompleteEnumeratedHeader header_MyEnum = TypeObjectUtils::build_complete_enumerated_header(common_MyEnum, detail_MyEnum);
                                    CompleteEnumeratedLiteralSeq literal_seq_MyEnum;
                                    {
                                        EnumeratedLiteralFlag flags_A = TypeObjectUtils::build_enumerated_literal_flag(false);
                                        CommonEnumeratedLiteral common_A = TypeObjectUtils::build_common_enumerated_literal(0, flags_A);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_A;
                                        ann_custom_MyEnum.reset();
                                        MemberName name_A = "A";
                                        CompleteMemberDetail detail_A = TypeObjectUtils::build_complete_member_detail(name_A, member_ann_builtin_A, ann_custom_MyEnum);
                                        CompleteEnumeratedLiteral literal_A = TypeObjectUtils::build_complete_enumerated_literal(common_A, detail_A);
                                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_A);
                                    }
                                    {
                                        EnumeratedLiteralFlag flags_B = TypeObjectUtils::build_enumerated_literal_flag(false);
                                        CommonEnumeratedLiteral common_B = TypeObjectUtils::build_common_enumerated_literal(1, flags_B);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_B;
                                        ann_custom_MyEnum.reset();
                                        MemberName name_B = "B";
                                        CompleteMemberDetail detail_B = TypeObjectUtils::build_complete_member_detail(name_B, member_ann_builtin_B, ann_custom_MyEnum);
                                        CompleteEnumeratedLiteral literal_B = TypeObjectUtils::build_complete_enumerated_literal(common_B, detail_B);
                                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_B);
                                    }
                                    {
                                        EnumeratedLiteralFlag flags_C = TypeObjectUtils::build_enumerated_literal_flag(false);
                                        CommonEnumeratedLiteral common_C = TypeObjectUtils::build_common_enumerated_literal(2, flags_C);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_C;
                                        ann_custom_MyEnum.reset();
                                        MemberName name_C = "C";
                                        CompleteMemberDetail detail_C = TypeObjectUtils::build_complete_member_detail(name_C, member_ann_builtin_C, ann_custom_MyEnum);
                                        CompleteEnumeratedLiteral literal_C = TypeObjectUtils::build_complete_enumerated_literal(common_C, detail_C);
                                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_C);
                                    }
                                    CompleteEnumeratedType enumerated_type_MyEnum = TypeObjectUtils::build_complete_enumerated_type(enum_flags_MyEnum, header_MyEnum,
                                            literal_seq_MyEnum);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_MyEnum, type_name_MyEnum.to_string()))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyEnum already registered in TypeObjectRegistry for a different type.");
                                    }
                                    return_code_AllStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);
                                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                CommonAliasBody common_MyAliasedEnum;
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_MyAliasedEnum = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedEnum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_MyAliasedEnum = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedEnum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyAliasedEnum related TypeIdentifier inconsistent.");
                                    return;
                                }
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyAliasedEnum;
                                ann_custom_MyAliasedEnum.reset();
                                CompleteAliasBody body_MyAliasedEnum = TypeObjectUtils::build_complete_alias_body(common_MyAliasedEnum, member_ann_builtin_MyAliasedEnum, ann_custom_MyAliasedEnum);
                                CompleteAliasType alias_type_MyAliasedEnum = TypeObjectUtils::build_complete_alias_type(alias_flags_MyAliasedEnum, header_MyAliasedEnum, body_MyAliasedEnum);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyAliasedEnum, type_name_MyAliasedEnum.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyAliasedEnum already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyAliasedEnum", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyAliasedEnum: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_my_aliased_enum = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_my_aliased_enum;
                            MemberId member_id_my_aliased_enum = 0x00000014;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_aliased_enum = TypeObjectUtils::build_common_struct_member(member_id_my_aliased_enum, member_flags_my_aliased_enum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_aliased_enum = TypeObjectUtils::build_common_struct_member(member_id_my_aliased_enum, member_flags_my_aliased_enum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_aliased_enum member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_my_aliased_enum = "my_aliased_enum";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_aliased_enum;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_my_aliased_enum = TypeObjectUtils::build_complete_member_detail(name_my_aliased_enum, member_ann_builtin_my_aliased_enum, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_my_aliased_enum = TypeObjectUtils::build_complete_struct_member(common_my_aliased_enum, detail_my_aliased_enum);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_aliased_enum);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MyAliasedBoundedString", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                AliasTypeFlag alias_flags_MyAliasedBoundedString = 0;
                                QualifiedTypeName type_name_MyAliasedBoundedString = "MyAliasedBoundedString";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyAliasedBoundedString;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyAliasedBoundedString;
                                CompleteTypeDetail detail_MyAliasedBoundedString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyAliasedBoundedString, ann_custom_MyAliasedBoundedString, type_name_MyAliasedBoundedString.to_string());
                                CompleteAliasHeader header_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_header(detail_MyAliasedBoundedString);
                                AliasMemberFlag related_flags_MyAliasedBoundedString = 0;
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_string_100", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    std::string type_id_kind_anonymous_string_100("TI_STRING8_SMALL");
                                    if (type_id_kind_anonymous_string_100 == "TI_STRING8_SMALL")
                                    {
                                        SBound bound = static_cast<SBound>(100);
                                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                "anonymous_string_100"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_100 already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else if (type_id_kind_anonymous_string_100 == "TI_STRING8_LARGE")
                                    {
                                        LBound bound = 100;
                                        StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                "anonymous_string_100"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_100 already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_100: Unknown String kind.");
                                        return;
                                    }
                                    return_code_AllStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_string_100", type_ids_AllStruct_TypeIntrospectionExample);
                                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_100: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                CommonAliasBody common_MyAliasedBoundedString;
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_MyAliasedBoundedString = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedBoundedString, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_MyAliasedBoundedString = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedBoundedString, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyAliasedBoundedString related TypeIdentifier inconsistent.");
                                    return;
                                }
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyAliasedBoundedString;
                                ann_custom_MyAliasedBoundedString.reset();
                                CompleteAliasBody body_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_body(common_MyAliasedBoundedString, member_ann_builtin_MyAliasedBoundedString, ann_custom_MyAliasedBoundedString);
                                CompleteAliasType alias_type_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_type(alias_flags_MyAliasedBoundedString, header_MyAliasedBoundedString, body_MyAliasedBoundedString);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyAliasedBoundedString, type_name_MyAliasedBoundedString.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyAliasedBoundedString already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyAliasedBoundedString", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyAliasedBoundedString: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_my_aliased_bounded_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_my_aliased_bounded_string;
                            MemberId member_id_my_aliased_bounded_string = 0x00000015;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_aliased_bounded_string = TypeObjectUtils::build_common_struct_member(member_id_my_aliased_bounded_string, member_flags_my_aliased_bounded_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_aliased_bounded_string = TypeObjectUtils::build_common_struct_member(member_id_my_aliased_bounded_string, member_flags_my_aliased_bounded_string, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_aliased_bounded_string member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_my_aliased_bounded_string = "my_aliased_bounded_string";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_aliased_bounded_string;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_my_aliased_bounded_string = TypeObjectUtils::build_complete_member_detail(name_my_aliased_bounded_string, member_ann_builtin_my_aliased_bounded_string, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_my_aliased_bounded_string = TypeObjectUtils::build_complete_struct_member(common_my_aliased_bounded_string, detail_my_aliased_bounded_string);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_aliased_bounded_string);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MyRecursiveAlias", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                AliasTypeFlag alias_flags_MyRecursiveAlias = 0;
                                QualifiedTypeName type_name_MyRecursiveAlias = "MyRecursiveAlias";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyRecursiveAlias;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyRecursiveAlias;
                                CompleteTypeDetail detail_MyRecursiveAlias = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyRecursiveAlias, ann_custom_MyRecursiveAlias, type_name_MyRecursiveAlias.to_string());
                                CompleteAliasHeader header_MyRecursiveAlias = TypeObjectUtils::build_complete_alias_header(detail_MyRecursiveAlias);
                                AliasMemberFlag related_flags_MyRecursiveAlias = 0;
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyAliasedEnum", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    AliasTypeFlag alias_flags_MyAliasedEnum = 0;
                                    QualifiedTypeName type_name_MyAliasedEnum = "MyAliasedEnum";
                                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyAliasedEnum;
                                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyAliasedEnum;
                                    CompleteTypeDetail detail_MyAliasedEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyAliasedEnum, ann_custom_MyAliasedEnum, type_name_MyAliasedEnum.to_string());
                                    CompleteAliasHeader header_MyAliasedEnum = TypeObjectUtils::build_complete_alias_header(detail_MyAliasedEnum);
                                    AliasMemberFlag related_flags_MyAliasedEnum = 0;
                                    return_code_AllStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);

                                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EnumTypeFlag enum_flags_MyEnum = 0;
                                        BitBound bit_bound_MyEnum = 32;
                                        CommonEnumeratedHeader common_MyEnum = TypeObjectUtils::build_common_enumerated_header(bit_bound_MyEnum);
                                        QualifiedTypeName type_name_MyEnum = "MyEnum";
                                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyEnum;
                                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyEnum;
                                        CompleteTypeDetail detail_MyEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyEnum, ann_custom_MyEnum, type_name_MyEnum.to_string());
                                        CompleteEnumeratedHeader header_MyEnum = TypeObjectUtils::build_complete_enumerated_header(common_MyEnum, detail_MyEnum);
                                        CompleteEnumeratedLiteralSeq literal_seq_MyEnum;
                                        {
                                            EnumeratedLiteralFlag flags_A = TypeObjectUtils::build_enumerated_literal_flag(false);
                                            CommonEnumeratedLiteral common_A = TypeObjectUtils::build_common_enumerated_literal(0, flags_A);
                                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_A;
                                            ann_custom_MyEnum.reset();
                                            MemberName name_A = "A";
                                            CompleteMemberDetail detail_A = TypeObjectUtils::build_complete_member_detail(name_A, member_ann_builtin_A, ann_custom_MyEnum);
                                            CompleteEnumeratedLiteral literal_A = TypeObjectUtils::build_complete_enumerated_literal(common_A, detail_A);
                                            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_A);
                                        }
                                        {
                                            EnumeratedLiteralFlag flags_B = TypeObjectUtils::build_enumerated_literal_flag(false);
                                            CommonEnumeratedLiteral common_B = TypeObjectUtils::build_common_enumerated_literal(1, flags_B);
                                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_B;
                                            ann_custom_MyEnum.reset();
                                            MemberName name_B = "B";
                                            CompleteMemberDetail detail_B = TypeObjectUtils::build_complete_member_detail(name_B, member_ann_builtin_B, ann_custom_MyEnum);
                                            CompleteEnumeratedLiteral literal_B = TypeObjectUtils::build_complete_enumerated_literal(common_B, detail_B);
                                            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_B);
                                        }
                                        {
                                            EnumeratedLiteralFlag flags_C = TypeObjectUtils::build_enumerated_literal_flag(false);
                                            CommonEnumeratedLiteral common_C = TypeObjectUtils::build_common_enumerated_literal(2, flags_C);
                                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_C;
                                            ann_custom_MyEnum.reset();
                                            MemberName name_C = "C";
                                            CompleteMemberDetail detail_C = TypeObjectUtils::build_complete_member_detail(name_C, member_ann_builtin_C, ann_custom_MyEnum);
                                            CompleteEnumeratedLiteral literal_C = TypeObjectUtils::build_complete_enumerated_literal(common_C, detail_C);
                                            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_C);
                                        }
                                        CompleteEnumeratedType enumerated_type_MyEnum = TypeObjectUtils::build_complete_enumerated_type(enum_flags_MyEnum, header_MyEnum,
                                                literal_seq_MyEnum);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_MyEnum, type_name_MyEnum.to_string()))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyEnum already registered in TypeObjectRegistry for a different type.");
                                        }
                                        return_code_AllStruct_TypeIntrospectionExample =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "MyEnum", type_ids_AllStruct_TypeIntrospectionExample);
                                        if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonAliasBody common_MyAliasedEnum;
                                    if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_MyAliasedEnum = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedEnum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_MyAliasedEnum = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedEnum, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyAliasedEnum related TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyAliasedEnum;
                                    ann_custom_MyAliasedEnum.reset();
                                    CompleteAliasBody body_MyAliasedEnum = TypeObjectUtils::build_complete_alias_body(common_MyAliasedEnum, member_ann_builtin_MyAliasedEnum, ann_custom_MyAliasedEnum);
                                    CompleteAliasType alias_type_MyAliasedEnum = TypeObjectUtils::build_complete_alias_type(alias_flags_MyAliasedEnum, header_MyAliasedEnum, body_MyAliasedEnum);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyAliasedEnum, type_name_MyAliasedEnum.to_string()))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyAliasedEnum already registered in TypeObjectRegistry for a different type.");
                                    }
                                    return_code_AllStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "MyAliasedEnum", type_ids_AllStruct_TypeIntrospectionExample);
                                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "MyAliasedEnum: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                CommonAliasBody common_MyRecursiveAlias;
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_MyRecursiveAlias = TypeObjectUtils::build_common_alias_body(related_flags_MyRecursiveAlias, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_MyRecursiveAlias = TypeObjectUtils::build_common_alias_body(related_flags_MyRecursiveAlias, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyRecursiveAlias related TypeIdentifier inconsistent.");
                                    return;
                                }
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyRecursiveAlias;
                                ann_custom_MyRecursiveAlias.reset();
                                CompleteAliasBody body_MyRecursiveAlias = TypeObjectUtils::build_complete_alias_body(common_MyRecursiveAlias, member_ann_builtin_MyRecursiveAlias, ann_custom_MyRecursiveAlias);
                                CompleteAliasType alias_type_MyRecursiveAlias = TypeObjectUtils::build_complete_alias_type(alias_flags_MyRecursiveAlias, header_MyRecursiveAlias, body_MyRecursiveAlias);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyRecursiveAlias, type_name_MyRecursiveAlias.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyRecursiveAlias already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyRecursiveAlias", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyRecursiveAlias: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_my_recursive_alias = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_my_recursive_alias;
                            MemberId member_id_my_recursive_alias = 0x00000016;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_recursive_alias = TypeObjectUtils::build_common_struct_member(member_id_my_recursive_alias, member_flags_my_recursive_alias, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_my_recursive_alias = TypeObjectUtils::build_common_struct_member(member_id_my_recursive_alias, member_flags_my_recursive_alias, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_recursive_alias member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_my_recursive_alias = "my_recursive_alias";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_recursive_alias;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_my_recursive_alias = TypeObjectUtils::build_complete_member_detail(name_my_recursive_alias, member_ann_builtin_my_recursive_alias, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_my_recursive_alias = TypeObjectUtils::build_complete_struct_member(common_my_recursive_alias, detail_my_recursive_alias);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_my_recursive_alias);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_sequence_int16_t_5", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_int16_t", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                TypeIdentifier* element_identifier_anonymous_sequence_int16_t_5 {nullptr};
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_sequence_int16_t_5 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_sequence_int16_t_5 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Sequence element TypeIdentifier inconsistent.");
                                    return;
                                }
                                EquivalenceKind equiv_kind_anonymous_sequence_int16_t_5 = EK_COMPLETE;
                                if (TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d())
                                {
                                    equiv_kind_anonymous_sequence_int16_t_5 = EK_BOTH;
                                }
                                CollectionElementFlag element_flags_anonymous_sequence_int16_t_5 = 0;
                                PlainCollectionHeader header_anonymous_sequence_int16_t_5 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_int16_t_5, element_flags_anonymous_sequence_int16_t_5);
                                std::string type_id_kind_anonymous_sequence_int16_t_5("TI_PLAIN_SEQUENCE_SMALL");
                                if (type_id_kind_anonymous_sequence_int16_t_5 == "TI_PLAIN_SEQUENCE_SMALL")
                                {
                                    SBound bound = static_cast<SBound>(5);
                                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_int16_t_5, bound,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int16_t_5));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_int16_t_5"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_sequence_int16_t_5 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    LBound bound = 5;
                                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_int16_t_5, bound,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int16_t_5));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_int16_t_5"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_sequence_int16_t_5 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_sequence_int16_t_5", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_sequence_int16_t_5: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_short_sequence = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_short_sequence;
                            MemberId member_id_short_sequence = 0x00000017;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_short_sequence = TypeObjectUtils::build_common_struct_member(member_id_short_sequence, member_flags_short_sequence, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_short_sequence = TypeObjectUtils::build_common_struct_member(member_id_short_sequence, member_flags_short_sequence, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure short_sequence member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_short_sequence = "short_sequence";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_short_sequence;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_short_sequence = TypeObjectUtils::build_complete_member_detail(name_short_sequence, member_ann_builtin_short_sequence, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_short_sequence = TypeObjectUtils::build_complete_struct_member(common_short_sequence, detail_short_sequence);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_short_sequence);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_array_int32_t_2_3_4", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_int32_t", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                TypeIdentifier* element_identifier_anonymous_array_int32_t_2_3_4 {nullptr};
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_array_int32_t_2_3_4 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_array_int32_t_2_3_4 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Array element TypeIdentifier inconsistent.");
                                    return;
                                }
                                EquivalenceKind equiv_kind_anonymous_array_int32_t_2_3_4 = EK_COMPLETE;
                                if (TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d())
                                {
                                    equiv_kind_anonymous_array_int32_t_2_3_4 = EK_BOTH;
                                }
                                CollectionElementFlag element_flags_anonymous_array_int32_t_2_3_4 = 0;
                                PlainCollectionHeader header_anonymous_array_int32_t_2_3_4 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_int32_t_2_3_4, element_flags_anonymous_array_int32_t_2_3_4);
                                std::string type_id_kind_anonymous_array_int32_t_2_3_4("TI_PLAIN_ARRAY_SMALL");
                                if (type_id_kind_anonymous_array_int32_t_2_3_4 == "TI_PLAIN_ARRAY_SMALL")
                                {
                                    SBoundSeq array_bound_seq;
                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(2));

                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(3));

                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_int32_t_2_3_4, array_bound_seq,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int32_t_2_3_4));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_int32_t_2_3_4"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_array_int32_t_2_3_4 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    LBoundSeq array_bound_seq;
                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(2));

                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(3));

                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(4));

                                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header_anonymous_array_int32_t_2_3_4, array_bound_seq,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int32_t_2_3_4));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_int32_t_2_3_4"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_array_int32_t_2_3_4 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_array_int32_t_2_3_4", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_array_int32_t_2_3_4: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_long_array = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_long_array;
                            MemberId member_id_long_array = 0x00000018;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_long_array = TypeObjectUtils::build_common_struct_member(member_id_long_array, member_flags_long_array, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_long_array = TypeObjectUtils::build_common_struct_member(member_id_long_array, member_flags_long_array, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure long_array member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_long_array = "long_array";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_long_array;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_long_array = TypeObjectUtils::build_complete_member_detail(name_long_array, member_ann_builtin_long_array, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_long_array = TypeObjectUtils::build_complete_struct_member(common_long_array, detail_long_array);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_long_array);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                                    if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                                    {
                                        SBound bound = 0;
                                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                "anonymous_string_unbounded"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                                    {
                                        LBound bound = 255;
                                        StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                "anonymous_string_unbounded"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_unbounded: Unknown String kind.");
                                        return;
                                    }
                                    return_code_AllStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded {nullptr};
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded inconsistent element TypeIdentifier.");
                                    return;
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                                    if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                                    {
                                        SBound bound = 0;
                                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                "anonymous_string_unbounded"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                                    {
                                        LBound bound = 255;
                                        StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                "anonymous_string_unbounded"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_unbounded: Unknown String kind.");
                                        return;
                                    }
                                    return_code_AllStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded {nullptr};
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded inconsistent key TypeIdentifier.");
                                    return;
                                }
                                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = EK_BOTH;
                                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d()) ||
                                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->map_sdefn().header().equiv_kind())) ||
                                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded->map_ldefn().header().equiv_kind())))
                                {
                                    equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = EK_COMPLETE;
                                }
                                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = 0;
                                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = 0;
                                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded);
                                std::string type_id_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded("TI_PLAIN_MAP_SMALL");
                                if (type_id_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded == "TI_PLAIN_MAP_SMALL")
                                {
                                    SBound bound = 0;
                                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded, bound,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded,
                                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    LBound bound = 0;
                                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded, bound,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded,
                                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_map_anonymous_string_unbounded_anonymous_string_unbounded_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_string_unbounded_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_string_unbounded_map;
                            MemberId member_id_string_unbounded_map = 0x00000019;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_string_unbounded_map = TypeObjectUtils::build_common_struct_member(member_id_string_unbounded_map, member_flags_string_unbounded_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_string_unbounded_map = TypeObjectUtils::build_common_struct_member(member_id_string_unbounded_map, member_flags_string_unbounded_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure string_unbounded_map member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_string_unbounded_map = "string_unbounded_map";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_string_unbounded_map;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_string_unbounded_map = TypeObjectUtils::build_complete_member_detail(name_string_unbounded_map, member_ann_builtin_string_unbounded_map, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_string_unbounded_map = TypeObjectUtils::build_complete_struct_member(common_string_unbounded_map, detail_string_unbounded_map);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_string_unbounded_map);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyAliasedBoundedString", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    AliasTypeFlag alias_flags_MyAliasedBoundedString = 0;
                                    QualifiedTypeName type_name_MyAliasedBoundedString = "MyAliasedBoundedString";
                                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyAliasedBoundedString;
                                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyAliasedBoundedString;
                                    CompleteTypeDetail detail_MyAliasedBoundedString = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyAliasedBoundedString, ann_custom_MyAliasedBoundedString, type_name_MyAliasedBoundedString.to_string());
                                    CompleteAliasHeader header_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_header(detail_MyAliasedBoundedString);
                                    AliasMemberFlag related_flags_MyAliasedBoundedString = 0;
                                    return_code_AllStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_string_100", type_ids_AllStruct_TypeIntrospectionExample);

                                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        std::string type_id_kind_anonymous_string_100("TI_STRING8_SMALL");
                                        if (type_id_kind_anonymous_string_100 == "TI_STRING8_SMALL")
                                        {
                                            SBound bound = static_cast<SBound>(100);
                                            StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                    "anonymous_string_100"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_100 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else if (type_id_kind_anonymous_string_100 == "TI_STRING8_LARGE")
                                        {
                                            LBound bound = 100;
                                            StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                    "anonymous_string_100"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_100 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_string_100: Unknown String kind.");
                                            return;
                                        }
                                        return_code_AllStruct_TypeIntrospectionExample =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_string_100", type_ids_AllStruct_TypeIntrospectionExample);
                                        if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_string_100: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonAliasBody common_MyAliasedBoundedString;
                                    if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_MyAliasedBoundedString = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedBoundedString, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_MyAliasedBoundedString = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasedBoundedString, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyAliasedBoundedString related TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyAliasedBoundedString;
                                    ann_custom_MyAliasedBoundedString.reset();
                                    CompleteAliasBody body_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_body(common_MyAliasedBoundedString, member_ann_builtin_MyAliasedBoundedString, ann_custom_MyAliasedBoundedString);
                                    CompleteAliasType alias_type_MyAliasedBoundedString = TypeObjectUtils::build_complete_alias_type(alias_flags_MyAliasedBoundedString, header_MyAliasedBoundedString, body_MyAliasedBoundedString);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyAliasedBoundedString, type_name_MyAliasedBoundedString.to_string()))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyAliasedBoundedString already registered in TypeObjectRegistry for a different type.");
                                    }
                                    return_code_AllStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "MyAliasedBoundedString", type_ids_AllStruct_TypeIntrospectionExample);
                                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "MyAliasedBoundedString: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                TypeIdentifier* element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded {nullptr};
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded inconsistent element TypeIdentifier.");
                                    return;
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                                    if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                                    {
                                        SBound bound = 0;
                                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                "anonymous_string_unbounded"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                                    {
                                        LBound bound = 255;
                                        StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                "anonymous_string_unbounded"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_unbounded: Unknown String kind.");
                                        return;
                                    }
                                    return_code_AllStruct_TypeIntrospectionExample =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_string_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                                    if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                TypeIdentifier* key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded {nullptr};
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded inconsistent key TypeIdentifier.");
                                    return;
                                }
                                EquivalenceKind equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = EK_BOTH;
                                if ((EK_COMPLETE == key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d()) ||
                                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->map_sdefn().header().equiv_kind())) ||
                                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded->map_ldefn().header().equiv_kind())))
                                {
                                    equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = EK_COMPLETE;
                                }
                                CollectionElementFlag element_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = 0;
                                CollectionElementFlag key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = 0;
                                PlainCollectionHeader header_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded, element_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded);
                                std::string type_id_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded("TI_PLAIN_MAP_SMALL");
                                if (type_id_kind_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded == "TI_PLAIN_MAP_SMALL")
                                {
                                    SBound bound = 0;
                                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded, bound,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded,
                                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    LBound bound = 0;
                                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded, bound,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded), key_flags_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded,
                                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_map_anonymous_string_unbounded_anonymous_string_100_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_string_alias_unbounded_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_string_alias_unbounded_map;
                            MemberId member_id_string_alias_unbounded_map = 0x0000001a;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_string_alias_unbounded_map = TypeObjectUtils::build_common_struct_member(member_id_string_alias_unbounded_map, member_flags_string_alias_unbounded_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_string_alias_unbounded_map = TypeObjectUtils::build_common_struct_member(member_id_string_alias_unbounded_map, member_flags_string_alias_unbounded_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure string_alias_unbounded_map member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_string_alias_unbounded_map = "string_alias_unbounded_map";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_string_alias_unbounded_map;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_string_alias_unbounded_map = TypeObjectUtils::build_complete_member_detail(name_string_alias_unbounded_map, member_ann_builtin_string_alias_unbounded_map, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_string_alias_unbounded_map = TypeObjectUtils::build_complete_struct_member(common_string_alias_unbounded_map, detail_string_alias_unbounded_map);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_string_alias_unbounded_map);
                        }
                        {
                            return_code_AllStruct_TypeIntrospectionExample =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_map_int16_t_int32_t_2", type_ids_AllStruct_TypeIntrospectionExample);

                            if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_int32_t", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                TypeIdentifier* element_identifier_anonymous_map_int16_t_int32_t_2 {nullptr};
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_map_int16_t_int32_t_2 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    element_identifier_anonymous_map_int16_t_int32_t_2 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_int16_t_int32_t_2 inconsistent element TypeIdentifier.");
                                    return;
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_int16_t", type_ids_AllStruct_TypeIntrospectionExample);

                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                TypeIdentifier* key_identifier_anonymous_map_int16_t_int32_t_2 {nullptr};
                                if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    key_identifier_anonymous_map_int16_t_int32_t_2 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    key_identifier_anonymous_map_int16_t_int32_t_2 = new TypeIdentifier(type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_int16_t_int32_t_2 inconsistent key TypeIdentifier.");
                                    return;
                                }
                                EquivalenceKind equiv_kind_anonymous_map_int16_t_int32_t_2 = EK_BOTH;
                                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_int32_t_2->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->_d()) ||
                                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->map_sdefn().header().equiv_kind())) ||
                                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_int32_t_2->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_int32_t_2->map_ldefn().header().equiv_kind())))
                                {
                                    equiv_kind_anonymous_map_int16_t_int32_t_2 = EK_COMPLETE;
                                }
                                CollectionElementFlag element_flags_anonymous_map_int16_t_int32_t_2 = 0;
                                CollectionElementFlag key_flags_anonymous_map_int16_t_int32_t_2 = 0;
                                PlainCollectionHeader header_anonymous_map_int16_t_int32_t_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_int32_t_2, element_flags_anonymous_map_int16_t_int32_t_2);
                                std::string type_id_kind_anonymous_map_int16_t_int32_t_2("TI_PLAIN_MAP_SMALL");
                                if (type_id_kind_anonymous_map_int16_t_int32_t_2 == "TI_PLAIN_MAP_SMALL")
                                {
                                    SBound bound = static_cast<SBound>(2);
                                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_int32_t_2, bound,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_int32_t_2), key_flags_anonymous_map_int16_t_int32_t_2,
                                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_int32_t_2));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_int32_t_2"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_map_int16_t_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    LBound bound = 2;
                                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_int16_t_int32_t_2, bound,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_int32_t_2), key_flags_anonymous_map_int16_t_int32_t_2,
                                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_int32_t_2));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int16_t_int32_t_2"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_map_int16_t_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                return_code_AllStruct_TypeIntrospectionExample =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_map_int16_t_int32_t_2", type_ids_AllStruct_TypeIntrospectionExample);
                                if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_map_int16_t_int32_t_2: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            StructMemberFlag member_flags_short_long_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            CommonStructMember common_short_long_map;
                            MemberId member_id_short_long_map = 0x0000001b;
                            if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                            {
                                common_short_long_map = TypeObjectUtils::build_common_struct_member(member_id_short_long_map, member_flags_short_long_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2()._d() &&
                                    (EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                                    EK_COMPLETE == type_ids_AllStruct_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                            {
                                common_short_long_map = TypeObjectUtils::build_common_struct_member(member_id_short_long_map, member_flags_short_long_map, type_ids_AllStruct_TypeIntrospectionExample.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure short_long_map member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name_short_long_map = "short_long_map";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_short_long_map;
                            ann_custom_AllStruct_TypeIntrospectionExample.reset();
                            CompleteMemberDetail detail_short_long_map = TypeObjectUtils::build_complete_member_detail(name_short_long_map, member_ann_builtin_short_long_map, ann_custom_AllStruct_TypeIntrospectionExample);
                            CompleteStructMember member_short_long_map = TypeObjectUtils::build_complete_struct_member(common_short_long_map, detail_short_long_map);
                            TypeObjectUtils::add_complete_struct_member(member_seq_AllStruct_TypeIntrospectionExample, member_short_long_map);
                        }
                        CompleteStructType struct_type_AllStruct_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_type(struct_flags_AllStruct_TypeIntrospectionExample, header_AllStruct_TypeIntrospectionExample, member_seq_AllStruct_TypeIntrospectionExample);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_struct_type_object(struct_type_AllStruct_TypeIntrospectionExample, type_name_AllStruct_TypeIntrospectionExample.to_string()))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "AllStruct_TypeIntrospectionExample already registered in TypeObjectRegistry for a different type.");
                        }
                        return_code_AllStruct_TypeIntrospectionExample =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "AllStruct_TypeIntrospectionExample", type_ids_AllStruct_TypeIntrospectionExample);
                        if (return_code_AllStruct_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "AllStruct_TypeIntrospectionExample: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                }
                TypeIdentifier* element_identifier_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded = new TypeIdentifier(type_ids_DataTest_TypeIntrospectionExample.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded = new TypeIdentifier(type_ids_DataTest_TypeIntrospectionExample.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_DataTest_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids_DataTest_TypeIntrospectionExample);

                if (return_code_DataTest_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* key_identifier_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded {nullptr};
                if (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    key_identifier_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded = new TypeIdentifier(type_ids_DataTest_TypeIntrospectionExample.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    key_identifier_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded = new TypeIdentifier(type_ids_DataTest_TypeIntrospectionExample.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded = EK_BOTH;
                if ((EK_COMPLETE == key_identifier_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded->_d()) ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded->_d() && EK_COMPLETE == element_identifier_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded->map_sdefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded->map_sdefn().header().equiv_kind())) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded->_d() && (EK_COMPLETE == element_identifier_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded->map_ldefn().key_identifier()->_d() || EK_COMPLETE == element_identifier_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded->map_ldefn().header().equiv_kind())))
                {
                    equiv_kind_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded = 0;
                CollectionElementFlag key_flags_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded = 0;
                PlainCollectionHeader header_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded, element_flags_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded);
                std::string type_id_kind_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded("TI_PLAIN_MAP_SMALL");
                if (type_id_kind_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded == "TI_PLAIN_MAP_SMALL")
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded), key_flags_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded), key_flags_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_DataTest_TypeIntrospectionExample =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded", type_ids_DataTest_TypeIntrospectionExample);
                if (return_code_DataTest_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_map_int16_t_AllStruct_TypeIntrospectionExample_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_complex_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_complex_map;
            MemberId member_id_complex_map = 0x00000004;
            if (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() || TK_NONE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_complex_map = TypeObjectUtils::build_common_struct_member(member_id_complex_map, member_flags_complex_map, type_ids_DataTest_TypeIntrospectionExample.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DataTest_TypeIntrospectionExample.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_complex_map = TypeObjectUtils::build_common_struct_member(member_id_complex_map, member_flags_complex_map, type_ids_DataTest_TypeIntrospectionExample.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure complex_map member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_complex_map = "complex_map";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_complex_map;
            ann_custom_DataTest_TypeIntrospectionExample.reset();
            CompleteMemberDetail detail_complex_map = TypeObjectUtils::build_complete_member_detail(name_complex_map, member_ann_builtin_complex_map, ann_custom_DataTest_TypeIntrospectionExample);
            CompleteStructMember member_complex_map = TypeObjectUtils::build_complete_struct_member(common_complex_map, detail_complex_map);
            TypeObjectUtils::add_complete_struct_member(member_seq_DataTest_TypeIntrospectionExample, member_complex_map);
        }
        CompleteStructType struct_type_DataTest_TypeIntrospectionExample = TypeObjectUtils::build_complete_struct_type(struct_flags_DataTest_TypeIntrospectionExample, header_DataTest_TypeIntrospectionExample, member_seq_DataTest_TypeIntrospectionExample);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_DataTest_TypeIntrospectionExample, type_name_DataTest_TypeIntrospectionExample.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "DataTest_TypeIntrospectionExample already registered in TypeObjectRegistry for a different type.");
        }
        return_code_DataTest_TypeIntrospectionExample =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "DataTest_TypeIntrospectionExample", type_ids_DataTest_TypeIntrospectionExample);
        if (return_code_DataTest_TypeIntrospectionExample != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "DataTest_TypeIntrospectionExample: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}

