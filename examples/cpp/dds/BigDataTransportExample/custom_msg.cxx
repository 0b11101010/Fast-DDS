// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file custom_msg.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "custom_msg.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




Timestamp::Timestamp()
{
}

Timestamp::~Timestamp()
{
}

Timestamp::Timestamp(
        const Timestamp& x)
{
    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
}

Timestamp::Timestamp(
        Timestamp&& x) noexcept
{
    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
}

Timestamp& Timestamp::operator =(
        const Timestamp& x)
{

    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
    return *this;
}

Timestamp& Timestamp::operator =(
        Timestamp&& x) noexcept
{

    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
    return *this;
}

bool Timestamp::operator ==(
        const Timestamp& x) const
{
    return (m_sec == x.m_sec &&
           m_nanosec == x.m_nanosec);
}

bool Timestamp::operator !=(
        const Timestamp& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member sec
 * @param _sec New value for member sec
 */
void Timestamp::sec(
        uint64_t _sec)
{
    m_sec = _sec;
}

/*!
 * @brief This function returns the value of member sec
 * @return Value of member sec
 */
uint64_t Timestamp::sec() const
{
    return m_sec;
}

/*!
 * @brief This function returns a reference to member sec
 * @return Reference to member sec
 */
uint64_t& Timestamp::sec()
{
    return m_sec;
}

/*!
 * @brief This function sets a value in member nanosec
 * @param _nanosec New value for member nanosec
 */
void Timestamp::nanosec(
        uint32_t _nanosec)
{
    m_nanosec = _nanosec;
}

/*!
 * @brief This function returns the value of member nanosec
 * @return Value of member nanosec
 */
uint32_t Timestamp::nanosec() const
{
    return m_nanosec;
}

/*!
 * @brief This function returns a reference to member nanosec
 * @return Reference to member nanosec
 */
uint32_t& Timestamp::nanosec()
{
    return m_nanosec;
}

BigData::BigData()
{
}

BigData::~BigData()
{
}

BigData::BigData(
        const BigData& x)
{
    m_timestamp_value = x.m_timestamp_value;
    m_index = x.m_index;
    m_data = x.m_data;
}

BigData::BigData(
        BigData&& x) noexcept
{
    m_timestamp_value = std::move(x.m_timestamp_value);
    m_index = x.m_index;
    m_data = std::move(x.m_data);
}

BigData& BigData::operator =(
        const BigData& x)
{

    m_timestamp_value = x.m_timestamp_value;
    m_index = x.m_index;
    m_data = x.m_data;
    return *this;
}

BigData& BigData::operator =(
        BigData&& x) noexcept
{

    m_timestamp_value = std::move(x.m_timestamp_value);
    m_index = x.m_index;
    m_data = std::move(x.m_data);
    return *this;
}

bool BigData::operator ==(
        const BigData& x) const
{
    return (m_timestamp_value == x.m_timestamp_value &&
           m_index == x.m_index &&
           m_data == x.m_data);
}

bool BigData::operator !=(
        const BigData& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member timestamp_value
 * @param _timestamp_value New value to be copied in member timestamp_value
 */
void BigData::timestamp_value(
        const Timestamp& _timestamp_value)
{
    m_timestamp_value = _timestamp_value;
}

/*!
 * @brief This function moves the value in member timestamp_value
 * @param _timestamp_value New value to be moved in member timestamp_value
 */
void BigData::timestamp_value(
        Timestamp&& _timestamp_value)
{
    m_timestamp_value = std::move(_timestamp_value);
}

/*!
 * @brief This function returns a constant reference to member timestamp_value
 * @return Constant reference to member timestamp_value
 */
const Timestamp& BigData::timestamp_value() const
{
    return m_timestamp_value;
}

/*!
 * @brief This function returns a reference to member timestamp_value
 * @return Reference to member timestamp_value
 */
Timestamp& BigData::timestamp_value()
{
    return m_timestamp_value;
}

/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void BigData::index(
        uint32_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint32_t BigData::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint32_t& BigData::index()
{
    return m_index;
}

/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void BigData::data(
        const std::vector<uint8_t>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void BigData::data(
        std::vector<uint8_t>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::vector<uint8_t>& BigData::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::vector<uint8_t>& BigData::data()
{
    return m_data;
}

// Include auxiliary functions like for serializing/deserializing.
#include "custom_msgCdrAux.ipp"

