// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file datatypes.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "datatypes.h"
#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


Timestamp::Timestamp()
{

}

Timestamp::~Timestamp()
{
}

Timestamp::Timestamp(
        const Timestamp& x)
{
    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
}

Timestamp::Timestamp(
        Timestamp&& x) noexcept
{
    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
}

Timestamp& Timestamp::operator =(
        const Timestamp& x)
{

    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
    return *this;
}

Timestamp& Timestamp::operator =(
        Timestamp&& x) noexcept
{

    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
    return *this;
}

bool Timestamp::operator ==(
        const Timestamp& x) const
{
    return (m_sec == x.m_sec &&
           m_nanosec == x.m_nanosec);
}

bool Timestamp::operator !=(
        const Timestamp& x) const
{
    return !(*this == x);
}

size_t Timestamp::getCdrSerializedSize(
        const Timestamp& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    return current_alignment - initial_alignment;
}

/*!
 * @brief This function sets a value in member sec
 * @param _sec New value for member sec
 */
void Timestamp::sec(
        uint64_t _sec)
{
    m_sec = _sec;
}

/*!
 * @brief This function returns the value of member sec
 * @return Value of member sec
 */
uint64_t Timestamp::sec() const
{
    return m_sec;
}

/*!
 * @brief This function returns a reference to member sec
 * @return Reference to member sec
 */
uint64_t& Timestamp::sec()
{
    return m_sec;
}


/*!
 * @brief This function sets a value in member nanosec
 * @param _nanosec New value for member nanosec
 */
void Timestamp::nanosec(
        uint32_t _nanosec)
{
    m_nanosec = _nanosec;
}

/*!
 * @brief This function returns the value of member nanosec
 * @return Value of member nanosec
 */
uint32_t Timestamp::nanosec() const
{
    return m_nanosec;
}

/*!
 * @brief This function returns a reference to member nanosec
 * @return Reference to member nanosec
 */
uint32_t& Timestamp::nanosec()
{
    return m_nanosec;
}


Header::Header()
{

}

Header::~Header()
{
}

Header::Header(
        const Header& x)
{
    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
    m_frame_id = x.m_frame_id;
}

Header::Header(
        Header&& x) noexcept
{
    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
    m_frame_id = std::move(x.m_frame_id);
}

Header& Header::operator =(
        const Header& x)
{

    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
    m_frame_id = x.m_frame_id;
    return *this;
}

Header& Header::operator =(
        Header&& x) noexcept
{

    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
    m_frame_id = std::move(x.m_frame_id);
    return *this;
}

bool Header::operator ==(
        const Header& x) const
{
    return (m_sec == x.m_sec &&
           m_nanosec == x.m_nanosec &&
           m_frame_id == x.m_frame_id);
}

bool Header::operator !=(
        const Header& x) const
{
    return !(*this == x);
}

size_t Header::getCdrSerializedSize(
        const Header& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.frame_id().size() + 1;

    return current_alignment - initial_alignment;
}

/*!
 * @brief This function sets a value in member sec
 * @param _sec New value for member sec
 */
void Header::sec(
        int32_t _sec)
{
    m_sec = _sec;
}

/*!
 * @brief This function returns the value of member sec
 * @return Value of member sec
 */
int32_t Header::sec() const
{
    return m_sec;
}

/*!
 * @brief This function returns a reference to member sec
 * @return Reference to member sec
 */
int32_t& Header::sec()
{
    return m_sec;
}


/*!
 * @brief This function sets a value in member nanosec
 * @param _nanosec New value for member nanosec
 */
void Header::nanosec(
        uint32_t _nanosec)
{
    m_nanosec = _nanosec;
}

/*!
 * @brief This function returns the value of member nanosec
 * @return Value of member nanosec
 */
uint32_t Header::nanosec() const
{
    return m_nanosec;
}

/*!
 * @brief This function returns a reference to member nanosec
 * @return Reference to member nanosec
 */
uint32_t& Header::nanosec()
{
    return m_nanosec;
}


/*!
 * @brief This function copies the value in member frame_id
 * @param _frame_id New value to be copied in member frame_id
 */
void Header::frame_id(
        const eprosima::fastcdr::fixed_string<256>& _frame_id)
{
    m_frame_id = _frame_id;
}

/*!
 * @brief This function moves the value in member frame_id
 * @param _frame_id New value to be moved in member frame_id
 */
void Header::frame_id(
        eprosima::fastcdr::fixed_string<256>&& _frame_id)
{
    m_frame_id = std::move(_frame_id);
}

/*!
 * @brief This function returns a constant reference to member frame_id
 * @return Constant reference to member frame_id
 */
const eprosima::fastcdr::fixed_string<256>& Header::frame_id() const
{
    return m_frame_id;
}

/*!
 * @brief This function returns a reference to member frame_id
 * @return Reference to member frame_id
 */
eprosima::fastcdr::fixed_string<256>& Header::frame_id()
{
    return m_frame_id;
}


Image::Image()
{

}

Image::~Image()
{
}

Image::Image(
        const Image& x)
{
    m_header_value = x.m_header_value;
    m_height = x.m_height;
    m_width = x.m_width;
    m_encoding = x.m_encoding;
    m_is_bigendian = x.m_is_bigendian;
    m_step = x.m_step;
    m_data = x.m_data;
}

Image::Image(
        Image&& x) noexcept
{
    m_header_value = std::move(x.m_header_value);
    m_height = x.m_height;
    m_width = x.m_width;
    m_encoding = std::move(x.m_encoding);
    m_is_bigendian = x.m_is_bigendian;
    m_step = x.m_step;
    m_data = std::move(x.m_data);
}

Image& Image::operator =(
        const Image& x)
{

    m_header_value = x.m_header_value;
    m_height = x.m_height;
    m_width = x.m_width;
    m_encoding = x.m_encoding;
    m_is_bigendian = x.m_is_bigendian;
    m_step = x.m_step;
    m_data = x.m_data;
    return *this;
}

Image& Image::operator =(
        Image&& x) noexcept
{

    m_header_value = std::move(x.m_header_value);
    m_height = x.m_height;
    m_width = x.m_width;
    m_encoding = std::move(x.m_encoding);
    m_is_bigendian = x.m_is_bigendian;
    m_step = x.m_step;
    m_data = std::move(x.m_data);
    return *this;
}

bool Image::operator ==(
        const Image& x) const
{
    return (m_header_value == x.m_header_value &&
           m_height == x.m_height &&
           m_width == x.m_width &&
           m_encoding == x.m_encoding &&
           m_is_bigendian == x.m_is_bigendian &&
           m_step == x.m_step &&
           m_data == x.m_data);
}

bool Image::operator !=(
        const Image& x) const
{
    return !(*this == x);
}

size_t Image::getCdrSerializedSize(
        const Image& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += Header::getCdrSerializedSize(data.header_value(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.encoding().size() + 1;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.data().size() > 0)
    {
        current_alignment += (data.data().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

/*!
 * @brief This function copies the value in member header_value
 * @param _header_value New value to be copied in member header_value
 */
void Image::header_value(
        const Header& _header_value)
{
    m_header_value = _header_value;
}

/*!
 * @brief This function moves the value in member header_value
 * @param _header_value New value to be moved in member header_value
 */
void Image::header_value(
        Header&& _header_value)
{
    m_header_value = std::move(_header_value);
}

/*!
 * @brief This function returns a constant reference to member header_value
 * @return Constant reference to member header_value
 */
const Header& Image::header_value() const
{
    return m_header_value;
}

/*!
 * @brief This function returns a reference to member header_value
 * @return Reference to member header_value
 */
Header& Image::header_value()
{
    return m_header_value;
}


/*!
 * @brief This function sets a value in member height
 * @param _height New value for member height
 */
void Image::height(
        uint32_t _height)
{
    m_height = _height;
}

/*!
 * @brief This function returns the value of member height
 * @return Value of member height
 */
uint32_t Image::height() const
{
    return m_height;
}

/*!
 * @brief This function returns a reference to member height
 * @return Reference to member height
 */
uint32_t& Image::height()
{
    return m_height;
}


/*!
 * @brief This function sets a value in member width
 * @param _width New value for member width
 */
void Image::width(
        uint32_t _width)
{
    m_width = _width;
}

/*!
 * @brief This function returns the value of member width
 * @return Value of member width
 */
uint32_t Image::width() const
{
    return m_width;
}

/*!
 * @brief This function returns a reference to member width
 * @return Reference to member width
 */
uint32_t& Image::width()
{
    return m_width;
}


/*!
 * @brief This function copies the value in member encoding
 * @param _encoding New value to be copied in member encoding
 */
void Image::encoding(
        const eprosima::fastcdr::fixed_string<256>& _encoding)
{
    m_encoding = _encoding;
}

/*!
 * @brief This function moves the value in member encoding
 * @param _encoding New value to be moved in member encoding
 */
void Image::encoding(
        eprosima::fastcdr::fixed_string<256>&& _encoding)
{
    m_encoding = std::move(_encoding);
}

/*!
 * @brief This function returns a constant reference to member encoding
 * @return Constant reference to member encoding
 */
const eprosima::fastcdr::fixed_string<256>& Image::encoding() const
{
    return m_encoding;
}

/*!
 * @brief This function returns a reference to member encoding
 * @return Reference to member encoding
 */
eprosima::fastcdr::fixed_string<256>& Image::encoding()
{
    return m_encoding;
}


/*!
 * @brief This function sets a value in member is_bigendian
 * @param _is_bigendian New value for member is_bigendian
 */
void Image::is_bigendian(
        bool _is_bigendian)
{
    m_is_bigendian = _is_bigendian;
}

/*!
 * @brief This function returns the value of member is_bigendian
 * @return Value of member is_bigendian
 */
bool Image::is_bigendian() const
{
    return m_is_bigendian;
}

/*!
 * @brief This function returns a reference to member is_bigendian
 * @return Reference to member is_bigendian
 */
bool& Image::is_bigendian()
{
    return m_is_bigendian;
}


/*!
 * @brief This function sets a value in member step
 * @param _step New value for member step
 */
void Image::step(
        uint32_t _step)
{
    m_step = _step;
}

/*!
 * @brief This function returns the value of member step
 * @return Value of member step
 */
uint32_t Image::step() const
{
    return m_step;
}

/*!
 * @brief This function returns a reference to member step
 * @return Reference to member step
 */
uint32_t& Image::step()
{
    return m_step;
}


/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void Image::data(
        const std::vector<uint8_t>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void Image::data(
        std::vector<uint8_t>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::vector<uint8_t>& Image::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::vector<uint8_t>& Image::data()
{
    return m_data;
}










PointField::PointField()
{

}

PointField::~PointField()
{
}

PointField::PointField(
        const PointField& x)
{
    m_name = x.m_name;
    m_offset = x.m_offset;
    m_datatype = x.m_datatype;
    m_count = x.m_count;
}

PointField::PointField(
        PointField&& x) noexcept
{
    m_name = std::move(x.m_name);
    m_offset = x.m_offset;
    m_datatype = x.m_datatype;
    m_count = x.m_count;
}

PointField& PointField::operator =(
        const PointField& x)
{

    m_name = x.m_name;
    m_offset = x.m_offset;
    m_datatype = x.m_datatype;
    m_count = x.m_count;
    return *this;
}

PointField& PointField::operator =(
        PointField&& x) noexcept
{

    m_name = std::move(x.m_name);
    m_offset = x.m_offset;
    m_datatype = x.m_datatype;
    m_count = x.m_count;
    return *this;
}

bool PointField::operator ==(
        const PointField& x) const
{
    return (m_name == x.m_name &&
           m_offset == x.m_offset &&
           m_datatype == x.m_datatype &&
           m_count == x.m_count);
}

bool PointField::operator !=(
        const PointField& x) const
{
    return !(*this == x);
}


size_t PointField::getCdrSerializedSize(
        const PointField& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.name().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    return current_alignment - initial_alignment;
}

/*!
 * @brief This function copies the value in member name
 * @param _name New value to be copied in member name
 */
void PointField::name(
        const eprosima::fastcdr::fixed_string<256>& _name)
{
    m_name = _name;
}

/*!
 * @brief This function moves the value in member name
 * @param _name New value to be moved in member name
 */
void PointField::name(
        eprosima::fastcdr::fixed_string<256>&& _name)
{
    m_name = std::move(_name);
}

/*!
 * @brief This function returns a constant reference to member name
 * @return Constant reference to member name
 */
const eprosima::fastcdr::fixed_string<256>& PointField::name() const
{
    return m_name;
}

/*!
 * @brief This function returns a reference to member name
 * @return Reference to member name
 */
eprosima::fastcdr::fixed_string<256>& PointField::name()
{
    return m_name;
}


/*!
 * @brief This function sets a value in member offset
 * @param _offset New value for member offset
 */
void PointField::offset(
        uint32_t _offset)
{
    m_offset = _offset;
}

/*!
 * @brief This function returns the value of member offset
 * @return Value of member offset
 */
uint32_t PointField::offset() const
{
    return m_offset;
}

/*!
 * @brief This function returns a reference to member offset
 * @return Reference to member offset
 */
uint32_t& PointField::offset()
{
    return m_offset;
}


/*!
 * @brief This function sets a value in member datatype
 * @param _datatype New value for member datatype
 */
void PointField::datatype(
        uint8_t _datatype)
{
    m_datatype = _datatype;
}

/*!
 * @brief This function returns the value of member datatype
 * @return Value of member datatype
 */
uint8_t PointField::datatype() const
{
    return m_datatype;
}

/*!
 * @brief This function returns a reference to member datatype
 * @return Reference to member datatype
 */
uint8_t& PointField::datatype()
{
    return m_datatype;
}


/*!
 * @brief This function sets a value in member count
 * @param _count New value for member count
 */
void PointField::count(
        uint32_t _count)
{
    m_count = _count;
}

/*!
 * @brief This function returns the value of member count
 * @return Value of member count
 */
uint32_t PointField::count() const
{
    return m_count;
}

/*!
 * @brief This function returns a reference to member count
 * @return Reference to member count
 */
uint32_t& PointField::count()
{
    return m_count;
}


PointCloud2::PointCloud2()
{

}

PointCloud2::~PointCloud2()
{
}

PointCloud2::PointCloud2(
        const PointCloud2& x)
{
    m_header_value = x.m_header_value;
    m_height = x.m_height;
    m_width = x.m_width;
    m_fields = x.m_fields;
    m_is_bigendian = x.m_is_bigendian;
    m_point_step = x.m_point_step;
    m_row_step = x.m_row_step;
    m_data = x.m_data;
    m_is_dense = x.m_is_dense;
}

PointCloud2::PointCloud2(
        PointCloud2&& x) noexcept
{
    m_header_value = std::move(x.m_header_value);
    m_height = x.m_height;
    m_width = x.m_width;
    m_fields = std::move(x.m_fields);
    m_is_bigendian = x.m_is_bigendian;
    m_point_step = x.m_point_step;
    m_row_step = x.m_row_step;
    m_data = std::move(x.m_data);
    m_is_dense = x.m_is_dense;
}

PointCloud2& PointCloud2::operator =(
        const PointCloud2& x)
{

    m_header_value = x.m_header_value;
    m_height = x.m_height;
    m_width = x.m_width;
    m_fields = x.m_fields;
    m_is_bigendian = x.m_is_bigendian;
    m_point_step = x.m_point_step;
    m_row_step = x.m_row_step;
    m_data = x.m_data;
    m_is_dense = x.m_is_dense;
    return *this;
}

PointCloud2& PointCloud2::operator =(
        PointCloud2&& x) noexcept
{

    m_header_value = std::move(x.m_header_value);
    m_height = x.m_height;
    m_width = x.m_width;
    m_fields = std::move(x.m_fields);
    m_is_bigendian = x.m_is_bigendian;
    m_point_step = x.m_point_step;
    m_row_step = x.m_row_step;
    m_data = std::move(x.m_data);
    m_is_dense = x.m_is_dense;
    return *this;
}

bool PointCloud2::operator ==(
        const PointCloud2& x) const
{
    return (m_header_value == x.m_header_value &&
           m_height == x.m_height &&
           m_width == x.m_width &&
           m_fields == x.m_fields &&
           m_is_bigendian == x.m_is_bigendian &&
           m_point_step == x.m_point_step &&
           m_row_step == x.m_row_step &&
           m_data == x.m_data &&
           m_is_dense == x.m_is_dense);
}

bool PointCloud2::operator !=(
        const PointCloud2& x) const
{
    return !(*this == x);
}

size_t PointCloud2::getCdrSerializedSize(
        const PointCloud2& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += Header::getCdrSerializedSize(data.header_value(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(size_t a = 0; a < data.fields().size(); ++a)
    {
        current_alignment += PointField::getCdrSerializedSize(data.fields().at(a), current_alignment);}

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.data().size() > 0)
    {
        current_alignment += (data.data().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    return current_alignment - initial_alignment;
}

/*!
 * @brief This function copies the value in member header_value
 * @param _header_value New value to be copied in member header_value
 */
void PointCloud2::header_value(
        const Header& _header_value)
{
    m_header_value = _header_value;
}

/*!
 * @brief This function moves the value in member header_value
 * @param _header_value New value to be moved in member header_value
 */
void PointCloud2::header_value(
        Header&& _header_value)
{
    m_header_value = std::move(_header_value);
}

/*!
 * @brief This function returns a constant reference to member header_value
 * @return Constant reference to member header_value
 */
const Header& PointCloud2::header_value() const
{
    return m_header_value;
}

/*!
 * @brief This function returns a reference to member header_value
 * @return Reference to member header_value
 */
Header& PointCloud2::header_value()
{
    return m_header_value;
}


/*!
 * @brief This function sets a value in member height
 * @param _height New value for member height
 */
void PointCloud2::height(
        uint32_t _height)
{
    m_height = _height;
}

/*!
 * @brief This function returns the value of member height
 * @return Value of member height
 */
uint32_t PointCloud2::height() const
{
    return m_height;
}

/*!
 * @brief This function returns a reference to member height
 * @return Reference to member height
 */
uint32_t& PointCloud2::height()
{
    return m_height;
}


/*!
 * @brief This function sets a value in member width
 * @param _width New value for member width
 */
void PointCloud2::width(
        uint32_t _width)
{
    m_width = _width;
}

/*!
 * @brief This function returns the value of member width
 * @return Value of member width
 */
uint32_t PointCloud2::width() const
{
    return m_width;
}

/*!
 * @brief This function returns a reference to member width
 * @return Reference to member width
 */
uint32_t& PointCloud2::width()
{
    return m_width;
}


/*!
 * @brief This function copies the value in member fields
 * @param _fields New value to be copied in member fields
 */
void PointCloud2::fields(
        const std::vector<PointField>& _fields)
{
    m_fields = _fields;
}

/*!
 * @brief This function moves the value in member fields
 * @param _fields New value to be moved in member fields
 */
void PointCloud2::fields(
        std::vector<PointField>&& _fields)
{
    m_fields = std::move(_fields);
}

/*!
 * @brief This function returns a constant reference to member fields
 * @return Constant reference to member fields
 */
const std::vector<PointField>& PointCloud2::fields() const
{
    return m_fields;
}

/*!
 * @brief This function returns a reference to member fields
 * @return Reference to member fields
 */
std::vector<PointField>& PointCloud2::fields()
{
    return m_fields;
}


/*!
 * @brief This function sets a value in member is_bigendian
 * @param _is_bigendian New value for member is_bigendian
 */
void PointCloud2::is_bigendian(
        bool _is_bigendian)
{
    m_is_bigendian = _is_bigendian;
}

/*!
 * @brief This function returns the value of member is_bigendian
 * @return Value of member is_bigendian
 */
bool PointCloud2::is_bigendian() const
{
    return m_is_bigendian;
}

/*!
 * @brief This function returns a reference to member is_bigendian
 * @return Reference to member is_bigendian
 */
bool& PointCloud2::is_bigendian()
{
    return m_is_bigendian;
}


/*!
 * @brief This function sets a value in member point_step
 * @param _point_step New value for member point_step
 */
void PointCloud2::point_step(
        uint32_t _point_step)
{
    m_point_step = _point_step;
}

/*!
 * @brief This function returns the value of member point_step
 * @return Value of member point_step
 */
uint32_t PointCloud2::point_step() const
{
    return m_point_step;
}

/*!
 * @brief This function returns a reference to member point_step
 * @return Reference to member point_step
 */
uint32_t& PointCloud2::point_step()
{
    return m_point_step;
}


/*!
 * @brief This function sets a value in member row_step
 * @param _row_step New value for member row_step
 */
void PointCloud2::row_step(
        uint32_t _row_step)
{
    m_row_step = _row_step;
}

/*!
 * @brief This function returns the value of member row_step
 * @return Value of member row_step
 */
uint32_t PointCloud2::row_step() const
{
    return m_row_step;
}

/*!
 * @brief This function returns a reference to member row_step
 * @return Reference to member row_step
 */
uint32_t& PointCloud2::row_step()
{
    return m_row_step;
}


/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void PointCloud2::data(
        const std::vector<uint8_t>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void PointCloud2::data(
        std::vector<uint8_t>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::vector<uint8_t>& PointCloud2::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::vector<uint8_t>& PointCloud2::data()
{
    return m_data;
}


/*!
 * @brief This function sets a value in member is_dense
 * @param _is_dense New value for member is_dense
 */
void PointCloud2::is_dense(
        bool _is_dense)
{
    m_is_dense = _is_dense;
}

/*!
 * @brief This function returns the value of member is_dense
 * @return Value of member is_dense
 */
bool PointCloud2::is_dense() const
{
    return m_is_dense;
}

/*!
 * @brief This function returns a reference to member is_dense
 * @return Reference to member is_dense
 */
bool& PointCloud2::is_dense()
{
    return m_is_dense;
}


BigData::BigData()
{

}

BigData::~BigData()
{
}

BigData::BigData(
        const BigData& x)
{
    m_timestamp_value = x.m_timestamp_value;
    m_image_value = x.m_image_value;
    m_point_cloud_value = x.m_point_cloud_value;
    m_index = x.m_index;
}

BigData::BigData(
        BigData&& x) noexcept
{
    m_timestamp_value = std::move(x.m_timestamp_value);
    m_image_value = std::move(x.m_image_value);
    m_point_cloud_value = std::move(x.m_point_cloud_value);
    m_index = x.m_index;
}

BigData& BigData::operator =(
        const BigData& x)
{

    m_timestamp_value = x.m_timestamp_value;
    m_image_value = x.m_image_value;
    m_point_cloud_value = x.m_point_cloud_value;
    m_index = x.m_index;
    return *this;
}

BigData& BigData::operator =(
        BigData&& x) noexcept
{

    m_timestamp_value = std::move(x.m_timestamp_value);
    m_image_value = std::move(x.m_image_value);
    m_point_cloud_value = std::move(x.m_point_cloud_value);
    m_index = x.m_index;
    return *this;
}

bool BigData::operator ==(
        const BigData& x) const
{
    return (m_timestamp_value == x.m_timestamp_value &&
           m_image_value == x.m_image_value &&
           m_point_cloud_value == x.m_point_cloud_value &&
           m_index == x.m_index);
}

bool BigData::operator !=(
        const BigData& x) const
{
    return !(*this == x);
}

size_t BigData::getCdrSerializedSize(
        const BigData& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += Timestamp::getCdrSerializedSize(data.timestamp_value(), current_alignment);
    current_alignment += Image::getCdrSerializedSize(data.image_value(), current_alignment);
    current_alignment += PointCloud2::getCdrSerializedSize(data.point_cloud_value(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    return current_alignment - initial_alignment;
}

/*!
 * @brief This function copies the value in member timestamp_value
 * @param _timestamp_value New value to be copied in member timestamp_value
 */
void BigData::timestamp_value(
        const Timestamp& _timestamp_value)
{
    m_timestamp_value = _timestamp_value;
}

/*!
 * @brief This function moves the value in member timestamp_value
 * @param _timestamp_value New value to be moved in member timestamp_value
 */
void BigData::timestamp_value(
        Timestamp&& _timestamp_value)
{
    m_timestamp_value = std::move(_timestamp_value);
}

/*!
 * @brief This function returns a constant reference to member timestamp_value
 * @return Constant reference to member timestamp_value
 */
const Timestamp& BigData::timestamp_value() const
{
    return m_timestamp_value;
}

/*!
 * @brief This function returns a reference to member timestamp_value
 * @return Reference to member timestamp_value
 */
Timestamp& BigData::timestamp_value()
{
    return m_timestamp_value;
}


/*!
 * @brief This function copies the value in member image_value
 * @param _image_value New value to be copied in member image_value
 */
void BigData::image_value(
        const Image& _image_value)
{
    m_image_value = _image_value;
}

/*!
 * @brief This function moves the value in member image_value
 * @param _image_value New value to be moved in member image_value
 */
void BigData::image_value(
        Image&& _image_value)
{
    m_image_value = std::move(_image_value);
}

/*!
 * @brief This function returns a constant reference to member image_value
 * @return Constant reference to member image_value
 */
const Image& BigData::image_value() const
{
    return m_image_value;
}

/*!
 * @brief This function returns a reference to member image_value
 * @return Reference to member image_value
 */
Image& BigData::image_value()
{
    return m_image_value;
}


/*!
 * @brief This function copies the value in member point_cloud_value
 * @param _point_cloud_value New value to be copied in member point_cloud_value
 */
void BigData::point_cloud_value(
        const PointCloud2& _point_cloud_value)
{
    m_point_cloud_value = _point_cloud_value;
}

/*!
 * @brief This function moves the value in member point_cloud_value
 * @param _point_cloud_value New value to be moved in member point_cloud_value
 */
void BigData::point_cloud_value(
        PointCloud2&& _point_cloud_value)
{
    m_point_cloud_value = std::move(_point_cloud_value);
}

/*!
 * @brief This function returns a constant reference to member point_cloud_value
 * @return Constant reference to member point_cloud_value
 */
const PointCloud2& BigData::point_cloud_value() const
{
    return m_point_cloud_value;
}

/*!
 * @brief This function returns a reference to member point_cloud_value
 * @return Reference to member point_cloud_value
 */
PointCloud2& BigData::point_cloud_value()
{
    return m_point_cloud_value;
}


/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void BigData::index(
        uint32_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint32_t BigData::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint32_t& BigData::index()
{
    return m_index;
}


// Include auxiliary functions like for serializing/deserializing.
#include "datatypesCdrAux.ipp"
