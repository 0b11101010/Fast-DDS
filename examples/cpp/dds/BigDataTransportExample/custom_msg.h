// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file custom_msg.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_CUSTOM_MSG_H_
#define _FAST_DDS_GENERATED_CUSTOM_MSG_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(CUSTOM_MSG_SOURCE)
#define CUSTOM_MSG_DllAPI __declspec( dllexport )
#else
#define CUSTOM_MSG_DllAPI __declspec( dllimport )
#endif // CUSTOM_MSG_SOURCE
#else
#define CUSTOM_MSG_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define CUSTOM_MSG_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima





/*!
 * @brief This class represents the structure Timestamp defined by the user in the IDL file.
 * @ingroup custom_msg
 */
class Timestamp
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Timestamp();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Timestamp();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Timestamp that will be copied.
     */
    eProsima_user_DllExport Timestamp(
            const Timestamp& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Timestamp that will be copied.
     */
    eProsima_user_DllExport Timestamp(
            Timestamp&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Timestamp that will be copied.
     */
    eProsima_user_DllExport Timestamp& operator =(
            const Timestamp& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Timestamp that will be copied.
     */
    eProsima_user_DllExport Timestamp& operator =(
            Timestamp&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x Timestamp object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Timestamp& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Timestamp object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Timestamp& x) const;

    /*!
     * @brief This function sets a value in member sec
     * @param _sec New value for member sec
     */
    eProsima_user_DllExport void sec(
            uint64_t _sec);

    /*!
     * @brief This function returns the value of member sec
     * @return Value of member sec
     */
    eProsima_user_DllExport uint64_t sec() const;

    /*!
     * @brief This function returns a reference to member sec
     * @return Reference to member sec
     */
    eProsima_user_DllExport uint64_t& sec();


    /*!
     * @brief This function sets a value in member nanosec
     * @param _nanosec New value for member nanosec
     */
    eProsima_user_DllExport void nanosec(
            uint32_t _nanosec);

    /*!
     * @brief This function returns the value of member nanosec
     * @return Value of member nanosec
     */
    eProsima_user_DllExport uint32_t nanosec() const;

    /*!
     * @brief This function returns a reference to member nanosec
     * @return Reference to member nanosec
     */
    eProsima_user_DllExport uint32_t& nanosec();

private:

    uint64_t m_sec{0};
    uint32_t m_nanosec{0};

};




/*!
 * @brief This class represents the structure BigData defined by the user in the IDL file.
 * @ingroup custom_msg
 */
class BigData
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport BigData();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~BigData();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object BigData that will be copied.
     */
    eProsima_user_DllExport BigData(
            const BigData& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object BigData that will be copied.
     */
    eProsima_user_DllExport BigData(
            BigData&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object BigData that will be copied.
     */
    eProsima_user_DllExport BigData& operator =(
            const BigData& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object BigData that will be copied.
     */
    eProsima_user_DllExport BigData& operator =(
            BigData&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x BigData object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const BigData& x) const;

    /*!
     * @brief Comparison operator.
     * @param x BigData object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const BigData& x) const;

    /*!
     * @brief This function copies the value in member timestamp_value
     * @param _timestamp_value New value to be copied in member timestamp_value
     */
    eProsima_user_DllExport void timestamp_value(
            const Timestamp& _timestamp_value);

    /*!
     * @brief This function moves the value in member timestamp_value
     * @param _timestamp_value New value to be moved in member timestamp_value
     */
    eProsima_user_DllExport void timestamp_value(
            Timestamp&& _timestamp_value);

    /*!
     * @brief This function returns a constant reference to member timestamp_value
     * @return Constant reference to member timestamp_value
     */
    eProsima_user_DllExport const Timestamp& timestamp_value() const;

    /*!
     * @brief This function returns a reference to member timestamp_value
     * @return Reference to member timestamp_value
     */
    eProsima_user_DllExport Timestamp& timestamp_value();


    /*!
     * @brief This function sets a value in member index
     * @param _index New value for member index
     */
    eProsima_user_DllExport void index(
            uint32_t _index);

    /*!
     * @brief This function returns the value of member index
     * @return Value of member index
     */
    eProsima_user_DllExport uint32_t index() const;

    /*!
     * @brief This function returns a reference to member index
     * @return Reference to member index
     */
    eProsima_user_DllExport uint32_t& index();


    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const std::vector<uint8_t>& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            std::vector<uint8_t>&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const std::vector<uint8_t>& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport std::vector<uint8_t>& data();

private:

    Timestamp m_timestamp_value;
    uint32_t m_index{0};
    std::vector<uint8_t> m_data;

};

#endif // _FAST_DDS_GENERATED_CUSTOM_MSG_H_



