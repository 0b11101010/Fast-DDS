// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file datatypesCdrAux.hpp
 * This source file contains some definitions of CDR related functions.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_DATATYPESCDRAUX_HPP_
#define _FAST_DDS_GENERATED_DATATYPESCDRAUX_HPP_

#include "datatypes.h"

constexpr uint32_t Wrench_max_cdr_typesize {64UL};
constexpr uint32_t Wrench_max_key_cdr_typesize {0UL};

constexpr uint32_t Vector3Stamped_max_cdr_typesize {312UL};
constexpr uint32_t Vector3Stamped_max_key_cdr_typesize {0UL};

constexpr uint32_t Quaternion_max_cdr_typesize {40UL};
constexpr uint32_t Quaternion_max_key_cdr_typesize {0UL};

constexpr uint32_t WrenchStamped_max_cdr_typesize {344UL};
constexpr uint32_t WrenchStamped_max_key_cdr_typesize {0UL};

constexpr uint32_t Vector3_max_cdr_typesize {32UL};
constexpr uint32_t Vector3_max_key_cdr_typesize {0UL};

constexpr uint32_t Point_max_cdr_typesize {32UL};
constexpr uint32_t Point_max_key_cdr_typesize {0UL};

constexpr uint32_t Image_max_cdr_typesize {24883760UL};
constexpr uint32_t Image_max_key_cdr_typesize {0UL};

constexpr uint32_t PointField_max_cdr_typesize {280UL};
constexpr uint32_t PointField_max_key_cdr_typesize {0UL};

constexpr uint32_t Timestamp_max_cdr_typesize {20UL};
constexpr uint32_t Timestamp_max_key_cdr_typesize {0UL};

constexpr uint32_t TwistWithCovariance_max_cdr_typesize {2128UL};
constexpr uint32_t TwistWithCovariance_max_key_cdr_typesize {0UL};

constexpr uint32_t TwistWithCovarianceStamped_max_cdr_typesize {2408UL};
constexpr uint32_t TwistWithCovarianceStamped_max_key_cdr_typesize {0UL};

constexpr uint32_t Twist_max_cdr_typesize {64UL};
constexpr uint32_t Twist_max_key_cdr_typesize {0UL};

constexpr uint32_t BasicTypes_max_cdr_typesize {181UL};
constexpr uint32_t BasicTypes_max_key_cdr_typesize {0UL};

constexpr uint32_t Float32_max_cdr_typesize {8UL};
constexpr uint32_t Float32_max_key_cdr_typesize {0UL};

constexpr uint32_t Float64_max_cdr_typesize {16UL};
constexpr uint32_t Float64_max_key_cdr_typesize {0UL};

constexpr uint32_t Header_max_cdr_typesize {273UL};
constexpr uint32_t Header_max_key_cdr_typesize {0UL};

constexpr uint32_t Int64_max_cdr_typesize {16UL};
constexpr uint32_t Int64_max_key_cdr_typesize {0UL};

constexpr uint32_t Int32_max_cdr_typesize {8UL};
constexpr uint32_t Int32_max_key_cdr_typesize {0UL};

constexpr uint32_t Pose_max_cdr_typesize {72UL};
constexpr uint32_t Pose_max_key_cdr_typesize {0UL};

constexpr uint32_t BigData_max_cdr_typesize {157666180UL};
constexpr uint32_t BigData_max_key_cdr_typesize {0UL};

constexpr uint32_t PointCloud2_max_cdr_typesize {132782393UL};
constexpr uint32_t PointCloud2_max_key_cdr_typesize {0UL};

constexpr uint32_t LaserScan_max_cdr_typesize {8508UL};
constexpr uint32_t LaserScan_max_key_cdr_typesize {0UL};


namespace eprosima {
namespace fastcdr {

class Cdr;
class CdrSizeCalculator;

eProsima_user_DllExport void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const Int32& data);

eProsima_user_DllExport void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const Int64& data);

eProsima_user_DllExport void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const Float32& data);

eProsima_user_DllExport void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const Float64& data);

eProsima_user_DllExport void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const Timestamp& data);

eProsima_user_DllExport void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const Header& data);

eProsima_user_DllExport void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const Point& data);

eProsima_user_DllExport void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const Quaternion& data);

eProsima_user_DllExport void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const Vector3& data);

eProsima_user_DllExport void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const Vector3Stamped& data);

eProsima_user_DllExport void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const Pose& data);

eProsima_user_DllExport void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const Twist& data);

eProsima_user_DllExport void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const TwistWithCovariance& data);

eProsima_user_DllExport void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const TwistWithCovarianceStamped& data);

eProsima_user_DllExport void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const Wrench& data);

eProsima_user_DllExport void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const WrenchStamped& data);

eProsima_user_DllExport void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const Image& data);









eProsima_user_DllExport void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const PointField& data);

eProsima_user_DllExport void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const PointCloud2& data);

eProsima_user_DllExport void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const LaserScan& data);

eProsima_user_DllExport void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const BasicTypes& data);

eProsima_user_DllExport void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const BigData& data);


} // namespace fastcdr
} // namespace eprosima

#endif // _FAST_DDS_GENERATED_DATATYPESCDRAUX_HPP_

